{"version":3,"file":"reach.js","sources":["node_modules/jquery/dist/jquery.js","source/scripts/globals/jquery.js","source/scripts/globals/jquery-plugins.js","node_modules/jquery-trend/jquery.trend.js","node_modules/jquery-revealer/jquery.revealer.js","node_modules/intersection-observer/intersection-observer.js","node_modules/rimg/dist/index.es.js","node_modules/rimg-shopify/dist/index.es.js","source/scripts/Constants.js","source/scripts/helpers/ObjectFitPolyfill.js","source/scripts/helpers/Newsletter.js","source/scripts/helpers/formElements.js","node_modules/grouped-content/dist/index.js","node_modules/fitvids/index.js","source/scripts/components/RichText.js","source/scripts/templates/Page.js","source/scripts/helpers/ScrollLock.js","node_modules/vanilla-modal/dist/index.js","source/scripts/Modal.js","source/scripts/Layout.js","node_modules/shopify-currency-converter/dist/index.js","source/scripts/components/PriceManager.js","node_modules/scriptjs/dist/script.js","node_modules/just-debounce/index.js","node_modules/ev-emitter/ev-emitter.js","node_modules/get-size/get-size.js","node_modules/desandro-matches-selector/matches-selector.js","node_modules/fizzy-ui-utils/utils.js","node_modules/flickity/js/cell.js","node_modules/flickity/js/slide.js","node_modules/flickity/js/animate.js","node_modules/flickity/js/flickity.js","node_modules/unipointer/unipointer.js","node_modules/unidragger/unidragger.js","node_modules/flickity/js/drag.js","node_modules/tap-listener/tap-listener.js","node_modules/flickity/js/prev-next-button.js","node_modules/flickity/js/page-dots.js","node_modules/flickity/js/player.js","node_modules/flickity/js/add-remove-cell.js","node_modules/flickity/js/lazyload.js","node_modules/flickity/js/index.js","node_modules/hammerjs/hammer.js","source/scripts/components/CardsPlayer.js","source/scripts/components/ProductGallery.js","source/scripts/ProductOptions.js","source/scripts/VariantHelper.js","source/scripts/components/Quantity.js","source/scripts/components/QuantitySubmit.js","source/scripts/components/BannerManager.js","source/scripts/components/cart/CartRequests.js","source/scripts/components/cart/CartItem.js","source/scripts/components/cart/Cart.js","source/scripts/helpers/Popover.js","source/scripts/helpers/ScrollHinter.js","source/scripts/components/ProductAtc.js","source/scripts/components/ProductLayout.js","source/scripts/components/QuickShop.js","source/scripts/components/ProductItem.js","source/scripts/templates/SearchPage.js","source/scripts/templates/account.js","source/scripts/Sections.js","source/scripts/components/MobileScrollers.js","source/scripts/sections/DynamicBlogPosts.js","source/scripts/sections/Gallery.js","source/scripts/sections/DynamicInstagramFeed.js","source/scripts/components/DeckCase.js","source/scripts/sections/DynamicListCollections.js","source/scripts/sections/DynamicProduct.js","node_modules/imagesloaded/imagesloaded.js","node_modules/flickity-imagesloaded/flickity-imagesloaded.js","source/scripts/sections/DynamicSlideshow.js","node_modules/twitter-fetcher/js/twitterFetcher_min.js","source/scripts/sections/DynamicTwitterFeed.js","source/scripts/sections/FeaturedProducts.js","source/scripts/sections/ImageWithTextOverlay.js","node_modules/pxs-map/dist/index.es.js","node_modules/pxs-announcement-bar/dist/pxs-announcement-bar.es.js","source/scripts/sections/StaticAnnouncementBar.js","source/scripts/sections/StaticCart.js","node_modules/popper.js/dist/esm/popper.js","source/scripts/components/Popover.js","source/scripts/sections/StaticCollectionPages.js","source/scripts/sections/StaticFaq.js","source/scripts/sections/StaticGiftCard.js","source/scripts/components/header/HeaderCart.js","source/scripts/sections/FeaturesList.js","source/scripts/sections/VideoWithText.js","source/scripts/sections/ShareBlock.js","source/scripts/sections/Testimonials.js","source/scripts/sections/StaticStory.js","source/scripts/components/header/HeaderStory.js","source/scripts/components/header/getHeaderHeight.js","source/scripts/components/header/getAnnouncementBarHeight.js","source/scripts/components/header/HeaderNotification.js","source/scripts/helpers/a11y.js","source/scripts/components/header/HeaderDrawers.js","source/scripts/components/header/MenuDrawer.js","source/scripts/components/header/Navigation.js","source/scripts/components/header/StickyHeader.js","source/scripts/sections/StaticHeader.js","source/scripts/sections/StaticProductPages.js","source/scripts/reach.js"],"sourcesContent":["/*!\n * jQuery JavaScript Library v3.2.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2017-03-20T18:59Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\n\n\n\tfunction DOMEval( code, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar script = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.2.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g,\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && Array.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisFunction: function( obj ) {\n\t\treturn jQuery.type( obj ) === \"function\";\n\t},\n\n\tisWindow: function( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t},\n\n\tisNumeric: function( obj ) {\n\n\t\t// As of jQuery 3.0, isNumeric is limited to\n\t\t// strings and numbers (primitives or objects)\n\t\t// that can be coerced to finite numbers (gh-2662)\n\t\tvar type = jQuery.type( obj );\n\t\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t\t// subtraction forces infinities to NaN\n\t\t\t!isNaN( obj - parseFloat( obj ) );\n\t},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\n\t\t/* eslint-disable no-unused-vars */\n\t\t// See https://github.com/eslint/eslint/issues/6125\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\ttype: function( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\";\n\t\t}\n\n\t\t// Support: Android <=2.3 only (functionish RegExp)\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\t\ttypeof obj;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tDOMEval( code );\n\t},\n\n\t// Convert dashed to camelCase; used by the css and data modules\n\t// Support: IE <=9 - 11, Edge 12 - 13\n\t// Microsoft forgot to hump their vendor prefix (#9572)\n\tcamelCase: function( string ) {\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// Bind a function to a context, optionally partially applying any\n\t// arguments.\n\tproxy: function( fn, context ) {\n\t\tvar tmp, args, proxy;\n\n\t\tif ( typeof context === \"string\" ) {\n\t\t\ttmp = fn[ context ];\n\t\t\tcontext = fn;\n\t\t\tfn = tmp;\n\t\t}\n\n\t\t// Quick check to determine if target is callable, in the spec\n\t\t// this throws a TypeError, but we will just return undefined.\n\t\tif ( !jQuery.isFunction( fn ) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Simulated bind\n\t\targs = slice.call( arguments, 2 );\n\t\tproxy = function() {\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t\t};\n\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\treturn proxy;\n\t},\n\n\tnow: Date.now,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = jQuery.type( obj );\n\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.3\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-08-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tdisabledAncestor = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && (\"form\" in elem || \"label\" in elem);\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tdisabledAncestor( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( jQuery.isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Simple selector that can be filtered directly, removing non-Elements\n\tif ( risSimple.test( qualifier ) ) {\n\t\treturn jQuery.filter( qualifier, elements, not );\n\t}\n\n\t// Complex selector, compare the two sets, removing non-Elements\n\tqualifier = jQuery.filter( qualifier, elements );\n\treturn jQuery.grep( elements, function( elem ) {\n\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;\n\t} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( jQuery.isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n        if ( nodeName( elem, \"iframe\" ) ) {\n            return elem.contentDocument;\n        }\n\n        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n        // Treat the template element as a regular one in browsers that\n        // don't support it.\n        if ( nodeName( elem, \"template\" ) ) {\n            elem = elem.content || elem;\n        }\n\n        return jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( jQuery.isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && jQuery.isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( jQuery.isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tjQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( jQuery.type( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !jQuery.isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ jQuery.camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ jQuery.camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( jQuery.camelCase );\n\t\t\t} else {\n\t\t\t\tkey = jQuery.camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tjQuery.contains( elem.ownerDocument, elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted,\n\t\tscale = 1,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\tdo {\n\n\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\tscale = scale || \".5\";\n\n\t\t\t// Adjust and apply\n\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t} while (\n\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n\t\t);\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\nvar documentElement = document.documentElement;\n\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 only\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: jQuery.isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trscriptTypeMasked = /^true\\/(.*)/,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( \">tbody\", elem )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tvar match = rscriptTypeMasked.exec( elem.type );\n\n\tif ( match ) {\n\t\telem.type = match[ 1 ];\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tisFunction = jQuery.isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( isFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( isFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdiv.style.cssText =\n\t\t\t\"box-sizing:border-box;\" +\n\t\t\t\"position:relative;display:block;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"top:1%;width:50%\";\n\t\tdiv.innerHTML = \"\";\n\t\tdocumentElement.appendChild( container );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\t// Support: Android 4.0 - 4.3 only\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.marginRight = \"50%\";\n\t\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\n\t\t\"padding:0;margin-top:1px;position:absolute\";\n\tcontainer.appendChild( div );\n\n\tjQuery.extend( support, {\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelMarginRight: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelMarginRightVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a property mapped along what jQuery.cssProps suggests or to\n// a vendor prefixed property.\nfunction finalPropName( name ) {\n\tvar ret = jQuery.cssProps[ name ];\n\tif ( !ret ) {\n\t\tret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;\n\t}\n\treturn ret;\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n\tvar i,\n\t\tval = 0;\n\n\t// If we already have the right measurement, avoid augmentation\n\tif ( extra === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\ti = 4;\n\n\t// Otherwise initialize for horizontal or vertical properties\n\t} else {\n\t\ti = name === \"width\" ? 1 : 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin, so add it if we want it\n\t\tif ( extra === \"margin\" ) {\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\tif ( isBorderBox ) {\n\n\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\tif ( extra === \"content\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\tif ( extra !== \"margin\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// At this point, extra isn't content, so add padding\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\tif ( extra !== \"padding\" ) {\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n\t// Start with computed style\n\tvar valueIsBorderBox,\n\t\tstyles = getStyles( elem ),\n\t\tval = curCSS( elem, name, styles ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t// Computed unit is not pixels. Stop here and return.\n\tif ( rnumnonpx.test( val ) ) {\n\t\treturn val;\n\t}\n\n\t// Check for style in case a browser which returns unreliable values\n\t// for getComputedStyle silently falls back to the reliable elem.style\n\tvalueIsBorderBox = isBorderBox &&\n\t\t( support.boxSizingReliable() || val === elem.style[ name ] );\n\n\t// Fall back to offsetWidth/Height when value is \"auto\"\n\t// This happens for inline elements with no explicit setting (gh-3571)\n\tif ( val === \"auto\" ) {\n\t\tval = elem[ \"offset\" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];\n\t}\n\n\t// Normalize \"\", auto, and prepare for extra\n\tval = parseFloat( val ) || 0;\n\n\t// Use the active box-sizing model to add/subtract irrelevant styles\n\treturn ( val +\n\t\taugmentWidthOrHeight(\n\t\t\telem,\n\t\t\tname,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {\n\t\t\"float\": \"cssFloat\"\n\t},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\n\tjQuery.cssHooks[ name ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = extra && getStyles( elem ),\n\t\t\t\tsubtract = extra && augmentWidthOrHeight(\n\t\t\t\t\telem,\n\t\t\t\t\tname,\n\t\t\t\t\textra,\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ name ] = value;\n\t\t\t\tvalue = jQuery.css( elem, name );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( !rmargin.test( prefix ) ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 13\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = jQuery.camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( jQuery.isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tjQuery.proxy( result.stop, result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( jQuery.isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( jQuery.isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = jQuery.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value;\n\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( type === \"string\" ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = value.match( rnothtmlwhite ) || [];\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, isFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tisFunction = jQuery.isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\telem[ type ]();\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = jQuery.isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( jQuery.isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 13\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available, append data to url\n\t\t\tif ( s.data ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar isFunction = jQuery.isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( jQuery.isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( jQuery.isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar doc, docElem, rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\trect = elem.getBoundingClientRect();\n\n\t\tdoc = elem.ownerDocument;\n\t\tdocElem = doc.documentElement;\n\t\twin = doc.defaultView;\n\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset - docElem.clientTop,\n\t\t\tleft: rect.left + win.pageXOffset - docElem.clientLeft\n\t\t};\n\t},\n\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n\t\t// because it is its only offset parent\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\n\t\t\t// Get *real* offsetParent\n\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t// Get correct offsets\n\t\t\toffset = this.offset();\n\t\t\tif ( !nodeName( offsetParent[ 0 ], \"html\" ) ) {\n\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t}\n\n\t\t\t// Add offsetParent borders\n\t\t\tparentOffset = {\n\t\t\t\ttop: parentOffset.top + jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true ),\n\t\t\t\tleft: parentOffset.left + jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true )\n\t\t\t};\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( jQuery.isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t} );\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n","// jQuery plugins expect to find a global `jQuery` object, so we\n// need to attach it to the window.\n//\n// This is in its own file because we have to attach it before any\n// other imports happen, but with ES6 modules, all `import`s have\n// to be at the top.\nimport $ from 'jquery';\nwindow.jQuery = $;\nwindow.$ = $;\n","import $ from 'jquery';\n\n$.fn.ariaExpanded = function(toggleOn) {\n  return this.attr('aria-expanded', toggleOn);\n};\n\n$.fn.ariaHidden = function(toggleOn) {\n  return this.attr('aria-hidden', toggleOn);\n};\n","/*!\n * Trend 0.2.0\n *\n * Fail-safe TransitionEnd event for jQuery.\n *\n * Adds a new \"trend\" event that can be used in browsers that don't\n * support \"transitionend\".\n *\n * NOTE: Only supports being bound with \"jQuery.one\".\n *\n * Copyright 2014, Pixel Union - http://pixelunion.net\n * Released under the MIT license\n */\n;(function($){\n\n  // Prefixed transitionend event names\n  var transitionEndEvents =\n    \"webkitTransitionEnd \" +\n    \"otransitionend \" +\n    \"oTransitionEnd \" +\n    \"msTransitionEnd \" +\n    \"transitionend\";\n\n  // Prefixed transition duration property names\n  var transitionDurationProperties = [\n    \"transition-duration\",\n    \"-moz-transition-duration\",\n    \"-webkit-transition-duration\",\n    \"-ms-transition-duration\",\n    \"-o-transition-duration\",\n    \"-khtml-transition-duration\"\n  ];\n\n  // Prefixed transition delay property names\n  var transitionDelayProperties = [\n    \"transition-delay\",\n    \"-moz-transition-delay\",\n    \"-webkit-transition-delay\",\n    \"-ms-transition-delay\",\n    \"-o-transition-delay\",\n    \"-khtml-transition-delay\"\n  ];\n\n  // Parses a CSS time value into milliseconds.\n  var parseTime = function(s) {\n    s = s.replace(/\\s/, \"\");\n    var v = window.parseFloat(s);\n\n    return s.match(/[^m]s$/i)\n      ? v * 1000\n      : v;\n  };\n\n  // Parses the longest time unit found in a series of CSS properties.\n  // Returns a value in milliseconds.\n  var parseProperties = function(el, properties) {\n    var duration = 0;\n\n    for (var i = 0; i < properties.length; i++) {\n      // Get raw CSS value\n      var value = el.css(properties[i]);\n      if (!value) continue;\n\n      // Multiple transitions--pick the longest\n      if (value.indexOf(\",\") !== -1) {\n        var values = value.split(\",\");\n        var durations = (function(){\n          var results = [];\n          for (var i = 0; i < values.length; i++) {\n            var duration = parseTime(values[i]);\n            results.push(duration);\n          }\n          return results;\n        })();\n\n        duration = Math.max.apply(Math, durations);\n      }\n\n      // Single transition\n      else {\n        duration = parseTime(value);\n      }\n\n      // Accept first vaue\n      break;\n    }\n\n    return duration;\n  };\n\n  $.event.special.trend = {\n    // Triggers an event handler when an element is done transitioning.\n    //\n    // Handles browsers that don't support transitionend by adding a\n    // timeout with the transition duration.\n    add: function(handleObj) {\n      var el = $(this);\n      var fired = false;\n\n      // Mark element as being in transition\n      el.data(\"trend\", true);\n\n      // Calculate a fallback duration. + 20 because some browsers fire\n      // timeouts faster than transitionend.\n      var time =\n        parseProperties(el, transitionDurationProperties) +\n        parseProperties(el, transitionDelayProperties) +\n        20;\n\n      var cb = function(e) {\n        // transitionend events can be sent for each property. Let's just\n        // skip all but the first. Also handles the timeout callback.\n        if (fired) return;\n\n        // Child elements that also have transitions can be fired before we\n        // complete. This will catch and ignore those. Unfortunately, we'll\n        // have to rely on the timeout in these cases.\n        if (e && e.srcElement !== el[0]) return;\n\n        // Mark element has not being in transition\n        el.data(\"trend\", false);\n\n        // Callback\n        fired = true;\n        if (handleObj.handler) handleObj.handler();\n      };\n\n      el.one(transitionEndEvents, cb);\n      el.data(\"trend-timeout\", window.setTimeout(cb, time));\n    },\n\n    remove: function(handleObj) {\n      var el = $(this);\n      el.off(transitionEndEvents);\n      window.clearTimeout(el.data(\"trend-timeout\"));\n    }\n  };\n\n})(jQuery);\n","/*!\n * Revealer 2.0.0\n *\n * Copyright 2015, Pixel Union - http://pixelunion.net\n * Released under the MIT license\n */\n(function($){\n  // check for trend event (make sure jquery.trend is included)\n  if (typeof $.event.special.trend !== \"object\") {\n    console.warn(\"Please make sure jquery.trend is included! Otherwise revealer won't work.\");\n  }\n\n  // Simple requestAnimationFrame polyfill\n  var raf = window.requestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    function(fn) { window.setTimeout(fn, 1000/60); }\n\n\n  // Public API\n  var methods = {\n    isVisible: function(el) {\n      return !!el.data(\"revealer-visible\");\n    },\n\n    show: function(el, force) {\n      // Check state\n      if (methods.isVisible(el)) {\n        el.removeClass(\"animating animating-in\");\n        el.off(\"revealer-animating revealer-show\");\n        return;\n      }\n\n      // Remove previous event listeners\n      el.data(\"revealer-visible\", true);\n      el.off(\"trend\");\n\n      if (force) {\n        el.addClass(\"visible\");\n        raf(function(){\n          el.trigger(\"revealer-animating\");\n          el.trigger(\"revealer-show\");\n        });\n        return;\n      }\n\n      raf(function(){\n        // Start animation state transition\n        el.addClass(\"animating animating-in\");\n        el.trigger(\"revealer-animating\");\n\n        raf(function(){\n          el.addClass(\"visible\");\n\n          el.one(\"trend\", function(){\n            el.removeClass(\"animating animating-in\");\n            el.trigger(\"revealer-show\");\n          });\n        });\n      });\n    },\n\n    hide: function(el, force) {\n      // Check state\n      if (!methods.isVisible(el)) {\n        el.removeClass(\"animating animating-out visible\");\n        el.off(\"revealer-animating revealer-hide\");\n        return;\n      }\n\n      // Remove previous event listeners\n      el.data(\"revealer-visible\", false);\n      el.off(\"trend\");\n\n      if (force) {\n        el.removeClass(\"visible\");\n        raf(function(){\n          el.trigger(\"revealer-animating\");\n          el.trigger(\"revealer-hide\");\n        });\n        return;\n      }\n\n      raf(function(){\n        el.addClass(\"animating animating-out\");\n        el.trigger(\"revealer-animating\");\n\n        raf(function(){\n          el.removeClass(\"visible\");\n\n          el.one(\"trend\", function(){\n            el.removeClass(\"animating animating-in animating-out\");\n            el.trigger(\"revealer-hide\");\n          });\n        });\n      });\n    },\n\n    toggle: function(el, force) {\n      if (methods.isVisible(el)) {\n        methods.hide(el, force);\n      } else {\n        methods.show(el, force);\n      }\n    }\n  };\n\n  // jQuery plugin\n  $.fn.revealer = function(method, force) {\n    // Get action\n    var action = methods[method || \"toggle\"];\n    if (!action) return this;\n\n    // Run action\n    if (method === \"isVisible\") {\n      return action(this);\n    }\n\n    return this.each(function(){\n      action($(this), force);\n    });\n  };\n})(jQuery);\n","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n\n(function(window, document) {\n'use strict';\n\n\n// Exits early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observering a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = entry.rootBounds;\n  this.boundingClientRect = entry.boundingClientRect;\n  this.intersectionRect = entry.intersectionRect || getEmptyRect();\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    this.intersectionRatio = intersectionArea / targetArea;\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n/**\n * Use a mutation observer on the root element\n * to detect intersection changes.\n */\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n    return item.element == target;\n  });\n\n  if (isTargetAlreadyObserved) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections();\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n\n    return item.element != target;\n  });\n  if (!this._observationTargets.length) {\n    this._unmonitorIntersections();\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibilty state is visible.\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function() {\n  if (!this._monitoringIntersections) {\n    this._monitoringIntersections = true;\n\n    // If a poll interval is set, use polling instead of listening to\n    // resize and scroll events or DOM mutations.\n    if (this.POLL_INTERVAL) {\n      this._monitoringInterval = setInterval(\n          this._checkForIntersections, this.POLL_INTERVAL);\n    }\n    else {\n      addEvent(window, 'resize', this._checkForIntersections, true);\n      addEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {\n        this._domObserver = new MutationObserver(this._checkForIntersections);\n        this._domObserver.observe(document, {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n      }\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function() {\n  if (this._monitoringIntersections) {\n    this._monitoringIntersections = false;\n\n    clearInterval(this._monitoringInterval);\n    this._monitoringInterval = null;\n\n    removeEvent(window, 'resize', this._checkForIntersections, true);\n    removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n    if (this._domObserver) {\n      this._domObserver.disconnect();\n      this._domObserver = null;\n    }\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, rootRect) {\n\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var targetRect = getBoundingClientRect(target);\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return;\n\n    if (parent == this.root || parent == document) {\n      atRoot = true;\n      parentRect = rootRect;\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      if (parent != document.body &&\n          parent != document.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n\n      if (!intersectionRect) break;\n    }\n    parent = getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {Object} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {Object} rect The rect object to expand.\n * @return {Object} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its executiong, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object} The intersection rect or undefined if no intersection\n *     is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  };\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {Object} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {Object} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n/**\n * Checks to see if a parent element contains a child elemnt (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n  return parent;\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}(window, document));\n","/*!\n * rimg v2.1.0\n * (c) 2018 Pixel Union\n */\n/**\n * The default template render function. Turns a template string into an image\n * URL.\n *\n * @param {String} template\n * @param {Size} size\n * @returns {String}\n */\nfunction defaultTemplateRender(template, size) {\n  return template.replace('{size}', size.width + 'x' + size.height);\n}\n\n/**\n * @type Settings\n */\nvar defaults = {\n  scale: 1,\n  template: false,\n  templateRender: defaultTemplateRender,\n  max: { width: Infinity, height: Infinity },\n  round: 32,\n  placeholder: false\n};\n\n/**\n * Get a data attribute value from an element, with a default fallback and\n * sanitization step.\n *\n * @param {Element} el\n *\n * @param {String} name\n *        The data attribute name.\n *\n * @param {Object} options\n *        An object holding fallback values if the data attribute does not\n *        exist. If this object doesn't have the property, we further fallback\n *        to our defaults.\n *\n * @param {Function} [sanitize]\n *        A function to sanitize the data attribute value with.\n *\n * @returns {String|*}\n */\nfunction getData(el, name, options, sanitize) {\n  var attr = 'data-rimg-' + name;\n  if (!el.hasAttribute(attr)) return options[name] || defaults[name];\n\n  var value = el.getAttribute(attr);\n\n  return sanitize ? sanitize(value) : value;\n}\n\n/**\n * Sanitize data attributes that represent a size (in the form of `10x10`).\n *\n * @param {String} value\n * @returns {Object} An object with `width` and `height` properties.\n */\nfunction parseSize(value) {\n  value = value.split('x');\n  return { width: parseInt(value[0], 10), height: parseInt(value[1], 10) };\n}\n\n/**\n * Loads information about an element.\n *\n * Options can be set on the element itself using data attributes, or through\n * the `options` parameter. Data attributes take priority.\n *\n * @param {HTMLElement} el\n * @param {Settings} options\n * @returns {Item}\n */\nfunction parseItem(el) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var isImage = el.hasAttribute('data-rimg-template');\n\n  /**\n   * @typedef {Settings} Item\n   */\n  return {\n    el: el,\n\n    // Type of element\n    isImage: isImage,\n    isBackgroundImage: isImage && el.tagName !== 'IMG',\n\n    // Image scale\n    scale: getData(el, 'scale', options),\n\n    // Device density\n    density: window.devicePixelRatio || 1,\n\n    // Image template URL\n    template: getData(el, 'template', options),\n    templateRender: options.templateRender || defaults.templateRender,\n\n    // Maximum image dimensions\n    max: getData(el, 'max', options, parseSize),\n\n    // Round image dimensions to the nearest multiple\n    round: getData(el, 'round', options),\n\n    // Placeholder image dimensions\n    placeholder: getData(el, 'placeholder', options, parseSize)\n  };\n}\n\n/**\n * Round to the nearest multiple.\n *\n * This is so we don't tax the image server too much.\n *\n * @param {Number} size The size, in pixels.\n * @param {Number} multiple The multiple to round to the nearest.\n * @returns {Number}\n */\nfunction roundSize(size, multiple) {\n  return Math.ceil(size / multiple) * multiple;\n}\n\n/**\n * Get the size of an element.\n *\n * If it is too small, it's parent element is checked, and so on. This helps\n * avoid the situation where an element doesn't have a size yet or is positioned\n * out of the layout.\n *\n * @param {HTMLElement} el\n * @return {Object} size\n * @return {Number} size.width The width, in pixels.\n * @return {Number} size.height The height, in pixels.\n */\nfunction getElementSize(el) {\n  var size = { width: 0, height: 0 };\n\n  while (el) {\n    size.width = el.offsetWidth;\n    size.height = el.offsetHeight;\n    if (size.width > 20 && size.height > 20) break;\n    el = el.parentNode;\n  }\n\n  return size;\n}\n\n/**\n * Trigger a custom event.\n *\n * Note: this approach is deprecated, but still required to support older\n * browsers such as IE 10.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\n *\n * @param {HTMLElement} el\n *        The element to trigger the event on.\n *\n * @param {String} name\n *        The event name.\n *\n * @returns {Boolean}\n *          True if the event was canceled.\n */\nfunction trigger(el, name) {\n  var event = document.createEvent('Event');\n  event.initEvent(name, true, true);\n  return !el.dispatchEvent(event);\n}\n\n/**\n * Return the maximum supported density of the image, given the container.\n *\n * @param {Item} item\n * @param {Size} size\n */\nfunction supportedDensity(item, size) {\n  return Math.min(Math.min(Math.max(item.max.width / size.width, 1), item.density), Math.min(Math.max(item.max.height / size.height, 1), item.density)).toFixed(2);\n}\n\n/**\n * Set the image URL on the element. Supports background images and `srcset`.\n *\n * @param {Item} item\n * @param {Size} size\n * @param {Boolean} isPlaceholder\n */\nfunction setImage(item, size, isPlaceholder, onLoad) {\n  var render = item.templateRender;\n  var density = isPlaceholder ? 1 : supportedDensity(item, size);\n  var round = isPlaceholder ? 1 : item.round;\n\n  var width = roundSize(size.width * density, round);\n  var height = roundSize(size.height * density, round);\n  var displaySize = width > item.max.width || height > item.max.height ? { width: item.max.width, height: item.max.height } : { width: width, height: height };\n\n  var url = render(item.template, displaySize);\n\n  // On load callback\n  var image = new Image();\n  image.onload = onLoad;\n  image.src = url;\n\n  // Set image\n  if (item.isBackgroundImage) {\n    item.el.style.backgroundImage = 'url(\\'' + url + '\\')';\n  } else {\n    item.el.setAttribute('srcset', url + ' ' + density + 'x');\n  }\n}\n\n/**\n * Load the image, set loaded status, and trigger the load event.\n *\n * @fires rimg:load\n * @fires rimg:error\n * @param {Item} item\n * @param {Size} size\n */\nfunction loadFullImage(item, size) {\n  var el = item.el;\n\n  setImage(item, size, false, function (event) {\n    if (event.type === 'load') {\n      el.setAttribute('data-rimg', 'loaded');\n    } else {\n      el.setAttribute('data-rimg', 'error');\n      trigger(el, 'rimg:error');\n    }\n\n    trigger(el, 'rimg:load');\n  });\n}\n\n/**\n * Load in a responsive image.\n *\n * Sets the image's `srcset` attribute to the final image URLs, calculated based\n * on the actual size the image is being shown at.\n *\n * @fires rimg:loading\n *        The image URLs have been set and we are waiting for them to load.\n *\n * @fires rimg:loaded\n *        The final image has loaded.\n *\n * @fires rimg:error\n *        The final image failed loading.\n *\n * @param {Item} item\n */\nfunction loadImage(item) {\n  var el = item.el;\n\n  // Already loaded?\n  var status = el.getAttribute('data-rimg');\n  if (status === 'loading' || status === 'loaded') return;\n\n  // Is the SVG loaded?\n  if (!el.complete && !item.isBackgroundImage) {\n    // Wait for the load event, then call load image\n    el.addEventListener('load', function cb() {\n      el.removeEventListener('load', cb);\n      loadImage(item);\n    });\n\n    return;\n  }\n\n  // Trigger loading event, and stop if cancelled\n  if (trigger(el, 'rimg:loading')) return;\n\n  // Mark as loading\n  el.setAttribute('data-rimg', 'loading');\n\n  // Get element size. This is used as the ideal display size.\n  var size = getElementSize(item.el);\n\n  size.width *= item.scale;\n  size.height *= item.scale;\n\n  if (item.placeholder) {\n    // Load a placeholder image first, followed by the full image. Force the\n    // element to keep its dimensions while it loads. If the image is smaller\n    // than the element size, use the image's size. Density is taken into account\n    // for HiDPI devices to avoid blurry images.\n    if (!item.isBackgroundImage) {\n      el.setAttribute('width', Math.min(Math.floor(item.max.width / item.density), size.width));\n      el.setAttribute('height', Math.min(Math.floor(item.max.height / item.density), size.height));\n    }\n\n    setImage(item, item.placeholder, true, function () {\n      return loadFullImage(item, size);\n    });\n  } else {\n    loadFullImage(item, size);\n  }\n}\n\n/**\n * Prepare an element to be displayed on the screen.\n *\n * Images have special logic applied to them to swap out the different sources.\n *\n * @fires rimg:enter\n *        The element is entering the viewport.\n *\n * @param {HTMLElement} el\n * @param {Settings} options\n */\nfunction load(el, options) {\n  if (!el) return;\n  trigger(el, 'rimg:enter');\n\n  var item = parseItem(el, options);\n  if (item.isImage) {\n    if (!item.isBackgroundImage) {\n      el.setAttribute('data-rimg-template-svg', el.getAttribute('srcset'));\n    }\n\n    loadImage(item);\n  }\n}\n\n/**\n * Prepare an element to be displayed on the screen.\n *\n * Images have special logic applied to them to swap out the different sources.\n *\n * @fires rimg:enter\n *        The element is entering the viewport.\n *\n * @param {HTMLElement} el\n * @param {Settings} options\n */\nfunction update(el, options) {\n  if (!el) return;\n  trigger(el, 'rimg:update');\n\n  var item = parseItem(el, options);\n\n  if (item.isImage) {\n    if (!item.isBackgroundImage) {\n      el.setAttribute('data-rimg', 'lazy');\n      el.setAttribute('srcset', el.getAttribute('data-rimg-template-svg'));\n    }\n\n    loadImage(item);\n  }\n}\n\n/**\n * @typedef {Object} Size\n * @property {Number} width\n * @property {Number} height\n */\n\n/**\n * A function to turn a template string into a URL.\n *\n * @callback TemplateRenderer\n * @param {String} template\n * @param {Size} size\n * @returns {String}\n */\n\n/**\n * @typedef {Object} Settings\n *\n * @property {String} [template]\n *           A template string used to generate URLs for an image. This allows us to\n *           dynamically load images with sizes to match the container's size.\n *\n * @property {TemplateRenderer} [templateRender]\n *           A function to turn a template string into a URL.\n *\n * @property {Size} [max]\n *           The maximum available size for the image. This ensures we don't\n *           try to load an image larger than is possible.\n *\n * @property {Number} [round]\n *           Round image dimensions to the nearest multiple. This is intended to\n *           tax the image server less by lowering the number of possible image\n *           sizes requested.\n *\n * @property {Size} [placeholder]\n *           The size of the lo-fi image to load before the full image.\n */\n\n/**\n * Initialize the responsive image handler.\n *\n * @param {String|HTMLElement|NodeList} selector\n *        The CSS selector, element, or elements to track for lazy-loading.\n *\n * @param {Settings} options\n *\n * @returns {PublicApi}\n */\nfunction rimg() {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg=\"lazy\"]';\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // Intersections\n  var io = new IntersectionObserver(function (entries) {\n    entries.forEach(function (entry) {\n      if (entry.isIntersecting || entry.intersectionRatio > 0) {\n        io.unobserve(entry.target);\n        load(entry.target, options);\n      }\n    });\n  }, {\n    // Watch the viewport, with 20% vertical margins\n    rootMargin: '20% 0px'\n  });\n\n  /**\n   * @typedef {Object} PublicApi\n   */\n  var api = {\n    /**\n     * Track a new selector, element, or nodelist for lazy-loading.\n     * @type Function\n     * @param {String|HTMLElement|NodeList} selector\n     */\n    track: function track() {\n      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg=\"lazy\"]';\n\n      var els = querySelector(selector);\n      for (var i = 0; i < els.length; i++) {\n        io.observe(els[i]);\n      }\n    },\n    update: function update$$1() {\n      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg=\"loaded\"]';\n\n      var els = querySelector(selector);\n      for (var i = 0; i < els.length; i++) {\n        update(els[i], options);\n      }\n    },\n\n\n    /**\n     * Stop tracking element(s) for lazy-loading.\n     * @type Function\n     * @param {String|HTMLElement|NodeList} selector\n     */\n    untrack: function untrack() {\n      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg]';\n\n      var els = querySelector(selector);\n      for (var i = 0; i < els.length; i++) {\n        io.unobserve(els[i]);\n      }\n    },\n\n\n    /**\n     * Unload all event handlers and observers.\n     * @type Function\n     */\n    unload: function unload() {\n      io.disconnect();\n    }\n  };\n\n  // Add initial elements\n  api.track(selector);\n\n  return api;\n}\n\n/**\n * Finds a group of elements on the page.\n *\n * @param {String|HTMLElement|NodeList} selector\n * @returns {Object} An array-like object.\n */\nfunction querySelector(selector) {\n  if (typeof selector === 'string') {\n    return document.querySelectorAll(selector);\n  }\n\n  if (selector instanceof HTMLElement) {\n    return [selector];\n  }\n\n  if (selector instanceof NodeList) {\n    return selector;\n  }\n\n  return [];\n}\n\nexport default rimg;\n","/*!\n * rimg-shopify v2.2.0\n * (c) 2018 Pixel Union\n */\nimport rimg from 'rimg';\n\n/**\n * Polyfill for Element.matches().\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n */\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n    var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n        i = matches.length;\n    while (--i >= 0 && matches.item(i) !== this) {}\n    return i > -1;\n  };\n}\n\nvar state = {\n  init: init,\n  watch: watch,\n  unwatch: unwatch\n};\n\nfunction init() {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg=\"lazy\"]';\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  state.selector = selector;\n  state.instance = rimg(selector, options);\n  state.loadedWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n\n  // Listen for Shopify theme editor events\n  document.addEventListener('shopify:section:load', function (event) {\n    return watch(event.target);\n  });\n\n  window.addEventListener('resize', function () {\n    return _update();\n  });\n\n  document.addEventListener('shopify:section:unload', function (event) {\n    return unwatch(event.target);\n  });\n\n  // Listen for custom events to allow themes to hook into rimg\n  document.addEventListener('theme:rimg:watch', function (event) {\n    return watch(event.target);\n  });\n\n  document.addEventListener('theme:rimg:unwatch', function (event) {\n    return unwatch(event.target);\n  });\n\n  // Support custom events triggered through jQuery\n  // See: https://github.com/jquery/jquery/issues/3347\n  if (window.jQuery) {\n    jQuery(document).on({\n      'theme:rimg:watch': function themeRimgWatch(event) {\n        return watch(event.target);\n      },\n      'theme:rimg:unwatch': function themeRimgUnwatch(event) {\n        return unwatch(event.target);\n      }\n    });\n  }\n}\n\n/**\n * Track an element, and its children.\n *\n * @param {HTMLElement} el\n */\nfunction watch(el) {\n  // Track element\n  if (typeof el.matches === 'function' && el.matches(state.selector)) {\n    state.instance.track(el);\n  }\n\n  // Track element's children\n  state.instance.track(el.querySelectorAll(state.selector));\n}\n\n/**\n * Untrack an element, and its children\n *\n * @param {HTMLElement} el\n * @private\n */\nfunction unwatch(el) {\n  // Untrack element's children\n  state.instance.untrack(el.querySelectorAll(state.selector));\n\n  // Untrack element\n  if (typeof el.matches === 'function' && el.matches(state.selector)) {\n    state.instance.untrack(el);\n  }\n}\n\n/**\n * Update an element, and its children.\n *\n * @param {HTMLElement} el\n */\nfunction _update() {\n  var currentWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n\n  // Return if we're not 2x smaller, or larger than the existing loading size\n  if (currentWidth / state.loadedWidth > 0.5 && currentWidth / state.loadedWidth < 2) {\n    return;\n  }\n\n  state.loadedWidth = currentWidth;\n  state.instance.update();\n}\n\nexport default state;\n","const selectors = {\n  header: {\n    main: '[data-header-main]',\n    mobile: '[data-header-mobile]',\n    drawerToggle: '[data-header-drawer-toggle]',\n    drawerToggleParent: '[data-header-toggle-parent]',\n    drawerToggleAttr: 'data-header-drawer-toggle',\n    drawerItemAttr: 'data-header-drawer',\n    navigation: '[data-header-navigation]',\n    actions: '[data-header-actions]',\n    utilities: '[data-header-utilities]',\n    currencyConverter: '[name=currencies]',\n    converterParent: '[data-header-currency-converter]',\n  },\n  announcementBar: {\n    main: '.pxs-announcement-bar',\n  },\n  drawers: {\n    menu: {\n      navigation: '[data-header-drawer-navigation]',\n      converterParent: '[data-header-drawer-currency-converter]',\n    },\n    search: {\n      field: '[data-header-search]',\n    },\n  },\n  navmenu: {\n    submenu: '[data-navmenu-submenu]',\n    trigger: '[data-navmenu-trigger]',\n    depthOne: '.navmenu-link-depth-1',\n  },\n  cardsPlayer: {\n    card: '[data-cards-player-card]',\n    cardVisual: '[data-cards-player-card-visual]',\n    cardContent: '[data-cards-player-card-content]',\n  },\n  collectionUtils: {\n    utils: '[data-collection-utils]',\n    narrow: '[data-collection-utils-narrow]',\n    wide: '[data-collection-utils-wide]',\n  },\n  collectionPopover: {\n    filterItem: '[data-collection-filter] a',\n    filterItemAdvanced: '[data-collection-filter-advanced] a',\n    sortByItem: '[data-collection-sortby]',\n  },\n  popover: {\n    trigger: '[data-popover-trigger]',\n    target: '[data-popover-target]',\n    content: '[data-popover-content]',\n    triggers: {\n      collectionFilter: '[data-popover-trigger=\"filters\"]',\n      collectionSortBy: '[data-popover-trigger=\"sort-by\"]',\n      atcSteps: '[data-popover-trigger=\"atc-steps\"]',\n      atcToggle: '[data-popover-toggle]',\n      share: '[data-popover-trigger=\"share\"]',\n    },\n    contents: {\n      collectionFilter: '[data-popover-content=\"filters\"]',\n      collectionSortBy: '[data-popover-content=\"sort-by\"]',\n      atcStepForm: '[data-popover-content=\"atc-step-form\"]',\n      atcStepCart: '[data-popover-content=\"atc-step-cart\"]',\n      share: '[data-popover-content=\"share\"]',\n    },\n  },\n  product: {\n    el: '[data-product]',\n    form: {\n      el: '[data-product-form]',\n      variants: '[data-variants]',\n      productOption: '[data-product-option]',\n      quantity: '[data-quantity]',\n      atc: '[data-product-form-atc]',\n      dcbSubmit: '[data-product-dcb-submit]',\n      dcbSubmitText: '[data-product-dcb-text]',\n    },\n    item: {\n      el: '[data-product-item]',\n      urlAttr: 'data-product-item-url',\n      idAttr: 'data-product-item-id',\n    },\n    quickshop: {\n      data: '[data-quickshop-data]',\n      error: '[data-quickshop-error]',\n      errorAttr: 'data-quickshop-error',\n      trigger: '[data-product-quickshop-trigger]',\n      contents: '[data-product-quickshop]',\n      selectorAttr: 'data-product-item-quickshop',\n    },\n    atc: '[data-product-atc]',\n    description: '[data-product-description]',\n    gallery: '[data-product-gallery]',\n    galleryImages: '[data-product-gallery-images]',\n    galleryImage: '[data-product-gallery-image]',\n    galleryThumbnails: '[data-product-gallery-thumbnails]',\n    galleryThumbnailsWrapper: '[data-product-gallery-thumbnails-wrapper]',\n    galleryThumbnailsPrev: '[data-product-gallery-thumbnails-prev]',\n    galleryThumbnailsNext: '[data-product-gallery-thumbnails-next]',\n    galleryThumbnail: '[data-product-gallery-thumbnail]',\n    galleryThumbnailSelected: '.product-gallery-thumbnail-selected',\n  },\n  slideshow: {\n    container: '[data-slideshow]',\n    slide: '[data-slideshow-slide]',\n    slideImage: '[data-slide-image]',\n    slideContent: '[data-slide-content]',\n    linkButton: '[data-slideshow-button]',\n    pagination: '[data-slideshow]',\n    paginationNext: '[data-slideshow=\"next\"]',\n    paginationPrev: '[data-slideshow=\"prev\"]',\n  },\n  gallery: {\n    container: '[data-gallery]',\n    slide: '[data-gallery-slide]',\n  },\n  twitter: {\n    container: '[data-twitter-content]',\n    tweet: '[data-tweet-content]',\n  },\n  instagram: {\n    container: '[data-gallery]',\n    galleryImage: '.gallery-image',\n    placeholder: '.placeholder-svg',\n  },\n  videoBlock: {\n    videoEl: '[data-video-block]',\n    blockingLayer: '[data-video-overlay]',\n    playButton: '[data-video-play]',\n  },\n  quantity: {\n    el: '[data-quantity]',\n    submitEl: '[data-quantity-submit]',\n    decrement: '[data-quantity-decrement]',\n    increment: '[data-quantity-increment]',\n    element: '[data-quantity-element]',\n    input: '[data-quantity-input]',\n  },\n  newsletter: {\n    formPosted: '[data-newsletter-submitted]',\n  },\n  cart: {\n    el: '[data-cart]',\n    form: '[data-cart-form]',\n    expand: '[data-cart-expand]',\n    expandable: '[data-cart-expandable]',\n    totals: '[data-cart-totals]',\n    subtotal: '[data-cart-subtotal]',\n    submit: '[data-cart-submit]',\n    otherItemsButton: '[data-cart-otheritems-button]',\n    atcSuccess: '[data-product-atc-success]',\n    item: {\n      el: '[data-cart-item]',\n      remove: '[data-cart-item-remove]',\n      price: '[data-cart-item-price]',\n      total: '[data-cart-item-total]',\n      slide: '[data-cart-item-column-slide]',\n    },\n    note: '[data-cart-note]',\n    shipping: {\n      el: '[data-cart-shipping]',\n      response: '[data-cart-shipping-response]',\n      message: '[data-cart-shipping-message]',\n      rates: '[data-cart-shipping-rates]',\n      submit: '[data-cart-shipping-submit]',\n    },\n  },\n  price: {\n    compareAt: '[data-price-compare-at]',\n    price: '[data-price]',\n  },\n  password: {\n    modal: '[data-password-modal]',\n    trigger: '[data-password-modal-trigger]',\n    errors: '[data-password-form-error]',\n  },\n  modal: {\n    wrapper: '[data-modal-wrapper]',\n  },\n};\n\nconst classes = {\n  header: {\n    sticky: 'site-header-sticky',\n    scrolled: 'site-header-scrolled',\n    bordered: 'site-header-bordered',\n  },\n  scrollLock: {\n    locked: 'scroll-lock',\n  },\n  navigation: {\n    expanded: 'site-navigation-layout-expanded',\n    collapsed: 'site-navigation-layout-drawer',\n  },\n  drawerVisibility: {\n    general: 'site-header-drawer-visible',\n    account: 'site-header-account-visible',\n    notification: 'site-header-notification-visible',\n    menu: 'site-header-menu-visible',\n    cart: 'site-header-cart-visible action-drawer-visible',\n    story: 'site-header-story-visible action-drawer-visible',\n    search: 'site-header-search-visible action-drawer-visible',\n  },\n  drawerToggles: {\n    active: 'has-active-toggle',\n    disabled: 'is-disabled-toggle',\n  },\n  navmenu: {\n    parentActive: 'navmenu-item-active',\n  },\n  objectFit: {\n    noObjectFit: 'no-object-fit',\n  },\n  cardsPlayer: {\n    player: 'cards-player',\n    deck: 'cards-player-deck',\n    hand: 'cards-player-hand',\n    content: 'cards-player-content',\n    visualFirst: 'cards-player-card-visual-first',\n    repositioning: 'cards-player-card-repositioning',\n    hintingStart: 'cards-player-card-hinting-start',\n    hintingEnd: 'cards-player-card-hinting-end',\n  },\n  popover: {\n    created: 'popover-created',\n    listItemActive: 'popover-list-item-active',\n    scrolls: 'popover-scrolls',\n    active: 'popover-active',\n    hideHeader: 'popover-hides-header',\n    buttonActive: 'popover-button-active',\n    buttonHidden: 'popover-button-hidden',\n  },\n  product: {\n    galleryImageSelected: 'product-gallery-image-selected',\n    galleryThumbnailSelected: 'product-gallery-thumbnail-selected',\n    galleryThumbnailsFlickityEnabled: 'product-gallery-thumbnails-flickity-enabled',\n    quickshop: {\n      wrapper: 'product-item-quickshop',\n      error: 'quickshop-form-errors',\n    },\n    atc: {\n      static: 'product-atc-static',\n      defaultVariant: 'product-atc-defaultvariant',\n      popper: 'product-atc-popper',\n      formActive: 'product-atc-popper-form-active',\n      cartActive: 'product-atc-popper-cart-active',\n      loading: 'product-form-atc-loading',\n    },\n  },\n  cart: {\n    inline: 'cart-inline',\n    emptying: 'cart-emptying',\n    empty: 'cart-empty',\n    loading: 'cart-loading',\n    loadingAffectsTotal: 'cart-loading-affects-total',\n    reloading: 'cart-reloading',\n    expanded: 'cart-expanded',\n    item: {\n      inlineVisible: 'cart-inline-visible',\n      inlineRecentlyAdded: 'cart-inline-recentlyadded',\n      loading: 'cart-item-loading',\n      totalLoading: 'cart-item-total-loading',\n      sliding: 'cart-item-sliding',\n    },\n    shipping: {\n      responseVisible: 'cart-shipping-response-visible',\n    },\n    expandable: {\n      expanded: 'cart-expand-button-expanded',\n    },\n  },\n  instagram: {\n    image: 'instagram-image',\n    hidden: 'hidden',\n  },\n  quantity: {\n    disabled: 'form-element-disabled',\n  },\n  form: {\n    formElements: {\n      el: 'form-element',\n      disabled: 'form-element-disabled',\n    },\n  },\n};\n\nconst events = {\n  cart: {\n    error: 'cart-error',\n    reloadStart: 'cart-reload-start',\n    reloadFinish: 'cart-reload-finish',\n    loadingStart: 'cart-loading-start',\n    loadingFinish: 'cart-loading-finish',\n    inlineVisible: 'cart-inline-visible',\n    item: {\n      loadingStart: 'cart-item-loading-start',\n      loadingFinish: 'cart-item-loading-finish',\n      removingFinished: 'cart-item-removing-finished',\n    },\n    note: {\n      loadingStart: 'cart-note-loading-start',\n      loadingFinish: 'cart-note-loading-finish',\n    },\n  },\n};\n\nexport {\n  classes,\n  selectors,\n  events,\n};\n","import $ from 'jquery';\nimport { classes } from '../Constants';\n\nexport default class ObjectFitPolyfill {\n  constructor() {\n    this._onSectionEvent = this._onSectionEvent.bind(this);\n\n    /*\n      - Fall back to background images Theme Editor for browsers which don't\n      support object-fit\n      - Trigger to check element loaded in asynchronously\n     */\n    $(document).on('shopify:section:select', this._onSectionEvent)\n               .on('shopify:block:select', this._onSectionEvent)\n               .on('check-object-fit', (event, data) => this._checkElement(data));\n\n    this._init(document.body);\n  }\n\n\n  _isObjectFitAvailable() {\n    return 'objectFit' in document.documentElement.style;\n  }\n\n  _onSectionEvent(event) {\n    this._init(event.target);\n  }\n\n  _checkElement(data) {\n    if (!data.el) {\n      return console.warn('No element specified to check for object-fit');\n    }\n\n    this._init(data.el);\n  }\n\n  _init(el) {\n    if (this._isObjectFitAvailable()) {\n      return;\n    }\n\n    const $items = $('[data-object-fit-item]', el);\n\n    $items.each((i, item) => {\n      const $item = $(item);\n      const $image = $('img', $item);\n\n      // Don't re-run on processed elements, or if there is no image\n      if ($item.hasClass(classes.objectFit.noObjectFit) || !$image.length) {\n        return console.warn('Element already has been checked for object fit compatibility');\n      }\n\n      const src = $image.attr('src');\n\n      $item\n        .css('background-image', `url(\"${ src }\")`)\n        .addClass(classes.objectFit.noObjectFit);\n    });\n  }\n}\n\n","import $ from 'jquery';\nimport { selectors } from '../Constants';\n\nexport default class Newsletter {\n  constructor() {\n    this.$body = $(document.body);\n    this.$formPosted = this.$body.find(selectors.newsletter.formPosted);\n\n    if (this.$formPosted.length) {\n      const scrollTop = this.$formPosted\n        .eq(0)\n        .parents('.shopify-section')\n        .offset()\n        .top;\n\n      $('html, body').animate({\n        scrollTop,\n      }, 500, 'linear');\n    }\n  }\n}\n","import { classes } from '../Constants';\n\nconst observer = new MutationObserver((mutations) => {\n  // Access list of all 'disabled' mutations\n  mutations.forEach((mutation) => {\n    const target = mutation.target;\n\n    if (target.classList.contains(classes.form.formElements.el)) {\n      const parent = target.parentElement;\n\n      if (target.disabled) {\n        parent.classList.add(classes.form.formElements.disabled);\n      } else {\n        parent.classList.remove(classes.form.formElements.disabled);\n      }\n    }\n  });\n});\n\n// Observe the document body, filter to only disabled events\nobserver.observe(\n  document.body,\n  {\n    subtree: true,\n    attributes: true,\n    attributeFilter: ['disabled'],\n  },\n);\n","'use strict';\n\n// forEach method, could be shipped as part of an Object Literal/Module\nfunction forEach(array, callback, scope) {\n  var index = 0;\n\n  for (index = 0; index < array.length; index += 1) {\n    callback.call(scope, array[index], index); // passes back stuff we need\n  }\n}\n\nfunction hasClass(el, className) {\n  var regex = new RegExp('^' + className + '| +' + className, 'g');\n\n  return el.className.match(regex);\n}\n\nfunction addClass(el, className) {\n  // Return if it already has the className\n  if (hasClass(el, className)) return;\n\n  el.className += ' ' + className;\n}\n\nfunction removeClass(el, className) {\n  // Return if it doesn't already have the className\n  if (!hasClass(el, className)) return;\n\n  var regex = new RegExp('^' + className + '| +' + className, 'g');\n\n  el.className = el.className.replace(regex, '');\n}\n\nfunction toggleClass(el, className) {\n  if (hasClass(el, className)) {\n    removeClass(el, className);\n  } else {\n    addClass(el, className);\n  }\n}\n\nfunction findPairingFromPairingTrigger(pairings, pairingTrigger) {\n  var foundPairing = null;\n\n  forEach(pairings, function (pairing) {\n    if (pairing.trigger === pairingTrigger) {\n      foundPairing = pairing;\n    }\n  });\n\n  return foundPairing;\n}\n\n/**\n * See {@link https://stackoverflow.com/revisions/2117523/11 Stack Overflow}\n * An RFC4122 v4 compliant uuid solution\n */\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0;\n    var v = c === 'x' ? r : r & 0x3 | 0x8;\n\n    return v.toString(16);\n  });\n}\n\nfunction init(groupedContent) {\n  var triggers = groupedContent.triggers;\n  var pairings = groupedContent.pairings;\n\n  triggers.setAttribute('role', 'tablist');\n\n  forEach(pairings, function (pairing, index) {\n    pairing.trigger.setAttribute('role', 'tab');\n    pairing.trigger.setAttribute('aria-controls', groupedContent.namespace + '-' + groupedContent.id + '-' + index + '-content');\n\n    if (pairing.trigger.children.length > 0) {\n      forEach(pairing.trigger.children, function (child) {\n        child.setAttribute('tabIndex', '-1');\n      });\n    }\n\n    if (hasClass(pairing.trigger, 'active')) {\n      pairing.trigger.setAttribute('aria-selected', 'true');\n      pairing.trigger.setAttribute('tabIndex', '0');\n    } else {\n      pairing.trigger.setAttribute('tabIndex', '-1');\n    }\n\n    pairing.content.id = groupedContent.namespace + '-' + groupedContent.id + '-' + index + '-content';\n    pairing.content.setAttribute('role', 'tabpanel');\n\n    if (!hasClass(pairing.content, 'active')) {\n      pairing.content.setAttribute('aria-hidden', 'true');\n    }\n  });\n}\n\nfunction update(groupedContent) {\n  var pairings = groupedContent.pairings;\n\n  forEach(pairings, function (pairing) {\n    pairing.trigger.removeAttribute('aria-selected');\n    pairing.content.removeAttribute('aria-hidden');\n\n    if (hasClass(pairing.trigger, 'active')) {\n      pairing.trigger.setAttribute('aria-selected', 'true');\n      pairing.trigger.setAttribute('tabIndex', '0');\n    } else {\n      pairing.trigger.setAttribute('tabIndex', '-1');\n    }\n\n    if (!hasClass(pairing.content, 'active')) {\n      pairing.content.setAttribute('aria-hidden', 'true');\n    }\n  });\n}\n\nvar a11y = {\n  init: init,\n  update: update\n};\n\nvar asyncGenerator = function () {\n  function AwaitValue(value) {\n    this.value = value;\n  }\n\n  function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function (resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n\n        if (value instanceof AwaitValue) {\n          Promise.resolve(value.value).then(function (arg) {\n            resume(\"next\", arg);\n          }, function (arg) {\n            resume(\"throw\", arg);\n          });\n        } else {\n          settle(result.done ? \"return\" : \"normal\", result.value);\n        }\n      } catch (err) {\n        settle(\"throw\", err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case \"return\":\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case \"throw\":\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== \"function\") {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  AsyncGenerator.prototype.next = function (arg) {\n    return this._invoke(\"next\", arg);\n  };\n\n  AsyncGenerator.prototype.throw = function (arg) {\n    return this._invoke(\"throw\", arg);\n  };\n\n  AsyncGenerator.prototype.return = function (arg) {\n    return this._invoke(\"return\", arg);\n  };\n\n  return {\n    wrap: function (fn) {\n      return function () {\n        return new AsyncGenerator(fn.apply(this, arguments));\n      };\n    },\n    await: function (value) {\n      return new AwaitValue(value);\n    }\n  };\n}();\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n/** A class for creating, managing, and destroying groupable content as tabs. */\n\nvar TabsLayout = function () {\n  function TabsLayout(groupedContent) {\n    classCallCheck(this, TabsLayout);\n\n    this.groupedContent = groupedContent;\n    this.pairings = groupedContent.pairings;\n    this.events = [];\n\n    this._handleKeydown = this._handleKeydown.bind(this);\n    this._handleClick = this._handleClick.bind(this);\n\n    this._init();\n    a11y.init(this.groupedContent);\n  }\n\n  createClass(TabsLayout, [{\n    key: 'unload',\n    value: function unload() {\n      forEach(this.events, function (event) {\n        event.trigger.removeEventListener(event.type, event.fn);\n      });\n    }\n  }, {\n    key: '_init',\n    value: function _init() {\n      var _this = this;\n\n      var existingActive = false;\n\n      forEach(this.pairings, function (pairing) {\n        var trigger = pairing.trigger;\n\n        if (hasClass(trigger, 'active')) {\n          existingActive = true;\n        }\n\n        trigger.addEventListener('keydown', _this._handleKeydown);\n        trigger.addEventListener('click', _this._handleClick);\n\n        _this.events.push({\n          trigger: trigger,\n          type: 'keydown',\n          fn: _this._handleKeydown\n        });\n\n        _this.events.push({\n          trigger: trigger,\n          type: 'click',\n          fn: _this._handleClick\n        });\n      });\n\n      if (!existingActive) {\n        addClass(this.pairings[0].trigger, 'active');\n        addClass(this.pairings[0].content, 'active');\n      }\n    }\n  }, {\n    key: '_handleKeydown',\n    value: function _handleKeydown(event) {\n      var trigger = event.currentTarget;\n      var pairing = findPairingFromPairingTrigger(this.pairings, trigger);\n      var pairingIndex = this.pairings.indexOf(pairing);\n      var prevIndex = pairingIndex - 1 < 0 ? this.pairings.length - 1 : pairingIndex - 1;\n      var nextIndex = pairingIndex + 1 >= this.pairings.length ? 0 : pairingIndex + 1;\n\n      var nextPairing = null;\n\n      switch (event.key) {\n        case 'ArrowLeft':\n          nextPairing = this.pairings[prevIndex];\n          break;\n        case 'ArrowRight':\n          nextPairing = this.pairings[nextIndex];\n          break;\n        default:\n          nextPairing = null;\n          break;\n      }\n\n      // Fast exit if we can't find the tab or tabs\n      if (nextPairing === null) return;\n\n      event.preventDefault();\n\n      forEach(this.pairings, function (inactivePairing) {\n        removeClass(inactivePairing.trigger, 'active');\n        removeClass(inactivePairing.content, 'active');\n      });\n\n      addClass(nextPairing.trigger, 'active');\n      addClass(nextPairing.content, 'active');\n\n      nextPairing.trigger.focus();\n\n      a11y.update(this.groupedContent);\n    }\n  }, {\n    key: '_handleClick',\n    value: function _handleClick(event) {\n      var trigger = event.currentTarget;\n      var pairing = findPairingFromPairingTrigger(this.pairings, trigger);\n\n      // Fast exit if we can't find the tab or tabs\n      if (pairing === null) return;\n\n      event.preventDefault();\n\n      forEach(this.pairings, function (inactivePairing) {\n        removeClass(inactivePairing.trigger, 'active');\n        removeClass(inactivePairing.content, 'active');\n      });\n\n      addClass(pairing.trigger, 'active');\n      addClass(pairing.content, 'active');\n\n      a11y.update(this.groupedContent);\n    }\n  }]);\n  return TabsLayout;\n}();\n\nfunction init$1(groupedContent) {\n  var pairings = groupedContent.pairings;\n\n  forEach(pairings, function (pairing, index) {\n    pairing.trigger.setAttribute('role', 'button');\n    pairing.trigger.setAttribute('aria-controls', groupedContent.namespace + '-' + groupedContent.id + '-' + index + '-content');\n    pairing.trigger.setAttribute('tabIndex', '0');\n\n    if (pairing.trigger.children.length > 0) {\n      forEach(pairing.trigger.children, function (child) {\n        child.setAttribute('tabIndex', '-1');\n      });\n    }\n\n    if (hasClass(pairing.trigger, 'active')) {\n      pairing.trigger.setAttribute('aria-expanded', 'true');\n    } else {\n      pairing.trigger.setAttribute('aria-expanded', 'false');\n    }\n\n    pairing.content.id = groupedContent.namespace + '-' + groupedContent.id + '-' + index + '-content';\n\n    if (!hasClass(pairing.content, 'active')) {\n      pairing.content.setAttribute('aria-hidden', 'true');\n    }\n  });\n}\n\nfunction update$1(groupedContent) {\n  var pairings = groupedContent.pairings;\n\n  forEach(pairings, function (pairing) {\n    pairing.content.removeAttribute('aria-hidden');\n\n    if (hasClass(pairing.trigger, 'active')) {\n      pairing.trigger.setAttribute('aria-expanded', 'true');\n    } else {\n      pairing.trigger.setAttribute('aria-expanded', 'false');\n    }\n\n    if (!hasClass(pairing.content, 'active')) {\n      pairing.content.setAttribute('aria-hidden', 'true');\n    }\n  });\n}\n\nvar a11y$1 = {\n  init: init$1,\n  update: update$1\n};\n\n/** A class for creating, managing, and destroying groupable content as an accordion. */\n\nvar AccordionLayout = function () {\n  function AccordionLayout(groupedContent) {\n    classCallCheck(this, AccordionLayout);\n\n    this.groupedContent = groupedContent;\n    this.pairings = groupedContent.pairings;\n    this.events = [];\n\n    this._handleKeydown = this._handleKeydown.bind(this);\n    this._handleClick = this._handleClick.bind(this);\n\n    this._init(this.pairings);\n    a11y$1.init(this.groupedContent);\n  }\n\n  createClass(AccordionLayout, [{\n    key: 'unload',\n    value: function unload() {\n      forEach(this.events, function (event) {\n        event.trigger.removeEventListener(event.type, event.fn);\n      });\n    }\n  }, {\n    key: '_init',\n    value: function _init() {\n      var _this = this;\n\n      forEach(this.pairings, function (pairing) {\n        var trigger = pairing.trigger;\n        var content = pairing.content;\n\n        trigger.parentNode.insertBefore(content, trigger.nextSibling);\n\n        trigger.addEventListener('keydown', _this._handleKeydown);\n        trigger.addEventListener('click', _this._handleClick);\n\n        _this.events.push({\n          trigger: trigger,\n          type: 'keydown',\n          fn: _this._handleKeydown\n        });\n\n        _this.events.push({\n          trigger: trigger,\n          type: 'click',\n          fn: _this._handleClick\n        });\n      });\n\n      this.groupedContent.contents.remove();\n    }\n  }, {\n    key: '_handleKeydown',\n    value: function _handleKeydown(event) {\n      var trigger = event.currentTarget;\n      var pairing = findPairingFromPairingTrigger(this.pairings, trigger);\n\n      // Fast exit if enter isn't pressed or we can't find the group\n      if (event.key !== 'Enter' || pairing === null) return;\n\n      event.preventDefault();\n\n      toggleClass(pairing.trigger, 'active');\n      toggleClass(pairing.content, 'active');\n      a11y$1.update(this.groupedContent);\n    }\n  }, {\n    key: '_handleClick',\n    value: function _handleClick(event) {\n      var trigger = event.currentTarget;\n      var pairing = findPairingFromPairingTrigger(this.pairings, trigger);\n\n      // Fast exit if we can't find the group\n      if (pairing === null) return;\n\n      event.preventDefault();\n\n      toggleClass(pairing.trigger, 'active');\n      toggleClass(pairing.content, 'active');\n      a11y$1.update(this.groupedContent);\n    }\n  }]);\n  return AccordionLayout;\n}();\n\n/**\n * Returns an array of nodes related to the heading node.\n * @param {node} heading - The heading node to search for content from.\n * @returns {node[]}\n */\nfunction getHeadingContent(heading) {\n  var headingTagNames = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];\n  var tagNameIndex = headingTagNames.indexOf(heading.tagName);\n  var content = [];\n\n  var sibling = heading.nextElementSibling;\n\n  while (sibling !== null && (headingTagNames.indexOf(sibling.tagName) === -1 || headingTagNames.indexOf(sibling.tagName) > tagNameIndex)) {\n    content.push(sibling);\n\n    sibling = sibling.nextElementSibling;\n  }\n\n  return content;\n}\n\n/**\n * Returns an object array representing the heading tree from a given node.\n * Root nodes are evaluated differently, and requires the evaluatingRoot flag\n * to be true.\n * @param {node} el - The node being evaluated.\n * @param {node[]} children - The children of the evaluated node.\n * @param {boolean} [evaluatingRoot] - Whether to evaluate as root node.\n * @returns {Object[]}\n */\nfunction getHeadingTree(el, children) {\n  var evaluatingRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var headingTagNames = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];\n  var tagNameIndex = headingTagNames.indexOf(el.tagName);\n  var headings = [];\n\n  var currentLowestTagNameIndex = 5;\n\n  for (var i = 0; i < children.length; i += 1) {\n    var child = children[i];\n    var childTagNameIndex = headingTagNames.indexOf(child.tagName);\n\n    if (childTagNameIndex !== -1 && childTagNameIndex < currentLowestTagNameIndex) {\n      currentLowestTagNameIndex = childTagNameIndex;\n    }\n\n    if (evaluatingRoot && childTagNameIndex !== -1 && childTagNameIndex <= currentLowestTagNameIndex || !evaluatingRoot && childTagNameIndex !== -1 && childTagNameIndex === tagNameIndex + 1) {\n      var siblings = getHeadingContent(child);\n\n      var childNode = {\n        el: child,\n        content: siblings,\n        children: getHeadingTree(child, siblings)\n      };\n\n      headings.push(childNode);\n    }\n  }\n\n  return headings;\n}\n\n/**\n * Returns groupings of headings that meet the minimum sequence value\n * and don't contain any invalid headings.\n * @param {Object[]} headings - An array of heading objects.\n * @param {int[]} invalidHeadings - An array of invalid heading integers,\n *                                  representing indexes of headings.\n * @param {*} minInSequence - Minimum headings in sequence before being considered\n *                            as a grouping.\n * @returns {Object[][]}\n */\nfunction getHeadingGroupsInSequence(headings, invalidHeadings, minInSequence) {\n  var headingGroupsInSequence = [];\n  var currentHeadingGroupInSequence = [];\n  var currentSequence = 0;\n\n  for (var i = 0; i < headings.length; i += 1) {\n    if (invalidHeadings.indexOf(i) === -1) {\n      currentHeadingGroupInSequence.push(headings[i]);\n      currentSequence += 1;\n\n      if (i !== headings.length - 1 && headings[i].el.tagName !== headings[i + 1].el.tagName && invalidHeadings.indexOf(i + 1)) {\n        currentHeadingGroupInSequence = [];\n        currentSequence = 0;\n      } else if (i !== 0 && headings[i].el.tagName !== headings[i - 1].el.tagName) {\n        currentHeadingGroupInSequence.pop();\n        currentSequence -= 1;\n\n        if (currentSequence >= minInSequence) {\n          headingGroupsInSequence.push(currentHeadingGroupInSequence);\n        }\n\n        currentHeadingGroupInSequence = [headings[i]];\n        currentSequence = 1;\n      }\n    }\n  }\n\n  if (currentSequence >= minInSequence) {\n    headingGroupsInSequence.push(currentHeadingGroupInSequence);\n  }\n\n  return headingGroupsInSequence;\n}\n\n/**\n * Generates necessary DOM elements to group related content.\n * Returns a object array representing the grouped content.\n * @param {Object[]} children - An array of objects.\n * @returns {Object[]}\n */\nfunction createGroupedContent(children) {\n  var pairings = [];\n\n  var firstChild = children[0].el;\n  var triggers = document.createElement('div');\n  var contents = document.createElement('div');\n\n  contents = firstChild.parentNode.insertBefore(contents, firstChild.nextSibling);\n  triggers = firstChild.parentNode.insertBefore(triggers, firstChild.nextSibling);\n\n  for (var i = 0; i < children.length; i += 1) {\n    var child = children[i];\n    var trigger = child.el;\n    var content = document.createElement('div');\n\n    trigger = triggers.appendChild(trigger);\n    content = contents.appendChild(content);\n\n    for (var j = 0; j < child.content.length; j += 1) {\n      content.appendChild(child.content[j]);\n    }\n\n    pairings.push({\n      trigger: trigger,\n      content: content\n    });\n  }\n\n  return {\n    triggers: triggers,\n    contents: contents,\n    pairings: pairings\n  };\n}\n\n/**\n * Returns all groupable content within the supplied node.\n * @param {node} node - A node to traverse for groupable content.\n * @returns {Object[][]}\n */\n/*\n * Recursive function:\n *  Returns all groups of headings that\n *  are elegible to become grouped content.\n */\nfunction getGroupedContentSet(node) {\n  var children = node.children;\n  var childrenWithGroupableContent = [];\n  var groupedContentSet = [];\n\n  if (children.length === 0) {\n    return [];\n  }\n\n  for (var i = 0; i < children.length; i += 1) {\n    var childGroupableContent = getGroupedContentSet(children[i]);\n\n    if (childGroupableContent.length > 0) {\n      childrenWithGroupableContent.push(i);\n      groupedContentSet = groupedContentSet.concat(childGroupableContent);\n    }\n  }\n\n  var headingGroupsInSequence = getHeadingGroupsInSequence(children, childrenWithGroupableContent, 3);\n\n  for (var _i = 0; _i < headingGroupsInSequence.length; _i += 1) {\n    groupedContentSet.push(createGroupedContent(headingGroupsInSequence[_i]));\n  }\n\n  return groupedContentSet;\n}\n\n/**\n * When static parsing isn't enough, there's intelliparse™!\n * Searches through dom content to find heading groupings that\n * are elegible to become tab groups.\n * Assumes that content is in a flattened hierarchy in the dom\n * and interprets increasing heading values as a deeper level of nesting.\n * Returns all groupable content as an array of object arrays.\n * @param {node} el - The node who's content will be searched for groupable content.\n * @returns {Object[][]}\n */\nfunction intelliParse(el) {\n  var children = el.children;\n  var heading = el.querySelector('h1, h2, h3, h4, h5, h6');\n\n  // Fast return if there's no headings\n  if (children.length === 0) return [];\n\n  var rootNode = {\n    el: el,\n    content: null,\n    children: getHeadingTree(heading, children, true)\n  };\n\n  return getGroupedContentSet(rootNode);\n}\n\n/**\n * Parses content from a given node based on a static structure.\n * The structure is as follows:\n * <ul class=\"tabs\">\n *   <li class=\"active\">Tab 1</li>\n *   <li>Tab 2</li>\n *   <li>Tab 3</li>\n * </ul>\n *\n * <ul class=\"tabs-content\">\n *   <li class=\"active\">\n *     <p>Tab 1 content goes here.</p>\n *   </li>\n *   <li>\n *     <p>Tab 2 content goes here.</p>\n *   </li>\n *   <li>\n *     <p>Tab 3 content goes here.</p>\n *   </li>\n * </ul>\n * Returns all groupable content as an array of object arrays.\n * @param {node} el - The node who's content will be searched for groupable content.\n * @returns {Object[][]}\n */\nfunction staticParse(el) {\n  var groupedContentSet = [];\n\n  var tabs = el.querySelectorAll('.tabs');\n\n  for (var i = 0; i < tabs.length; i += 1) {\n    var triggers = tabs[i].children;\n    var contents = tabs[i].nextElementSibling.children;\n\n    // Only add a tab group if equal triggers to contents\n    if (triggers.length === contents.length) {\n      var length = groupedContentSet.push({\n        triggers: tabs[i],\n        contents: tabs[i].nextElementSibling,\n        pairings: []\n      });\n      var index = length - 1;\n\n      for (var j = 0; j < triggers.length; j += 1) {\n        var trigger = triggers[j];\n        var content = contents[j];\n\n        var pairing = {\n          trigger: trigger,\n          content: content\n        };\n\n        groupedContentSet[index].pairings.push(pairing);\n      }\n    }\n  }\n\n  return groupedContentSet;\n}\n\n/**\n * Returns all groupable content as an array of object arrays.\n * @param {node} content - The node to parse for groupable content.\n * @param {boolean} intelliparse - Whether to use intelligent parsing.\n * @returns {Object[][]}\n */\nfunction parse(content) {\n  var intelliparse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var groupedContentSet = intelliparse ? intelliParse(content) : staticParse(content);\n\n  return groupedContentSet;\n}\n\n/** A class for creating, managing, and destroying groupable content. */\n\nvar GroupedContent = function () {\n  /**\n   * Create grouped content\n   * @param {node} el - The element to search for groupable content in.\n   * @param {Object}  [options] - Additional options\n   * @param {string}  [options.layout] - The layout to display groupable content in.\n   * @param {boolean} [options.intelliparse] - The parsing algorithm used to find content with.\n   */\n  function GroupedContent(el) {\n    var _this = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, GroupedContent);\n\n    this.namespace = 'grouped-content';\n    this.el = el;\n    this.groupedContentInstances = [];\n\n    var layout = options.layout || 'tabs';\n    var intelliparse = !!options.intelliparse;\n\n    forEach(parse(el, intelliparse), function (groupedContent) {\n      var id = uuidv4();\n      var instance = null;\n      var groupedContentWrapper = document.createElement('div');\n\n      groupedContentWrapper = groupedContent.triggers.parentNode.insertBefore(groupedContentWrapper, groupedContent.triggers.nextSibling);\n\n      addClass(groupedContentWrapper, _this.namespace);\n      addClass(groupedContentWrapper, _this.namespace + '-layout-' + layout);\n\n      groupedContentWrapper.appendChild(groupedContent.triggers);\n      groupedContentWrapper.appendChild(groupedContent.contents);\n\n      groupedContent.namespace = _this.namespace;\n      groupedContent.id = id;\n      groupedContent.triggers.id = _this.namespace + '-' + id + '-triggers';\n      groupedContent.contents.id = _this.namespace + '-' + id + '-contents';\n\n      addClass(groupedContent.triggers, _this.namespace + '-triggers');\n      addClass(groupedContent.contents, _this.namespace + '-contents');\n\n      forEach(groupedContent.pairings, function (pairing) {\n        addClass(pairing.trigger, _this.namespace + '-trigger');\n        addClass(pairing.content, _this.namespace + '-content');\n      });\n\n      switch (layout) {\n        case 'accordion':\n          instance = new AccordionLayout(groupedContent);\n          break;\n        case 'tabs':\n        default:\n          instance = new TabsLayout(groupedContent);\n          break;\n      }\n\n      _this.groupedContentInstances.push({\n        groupedContent: groupedContent,\n        instance: instance\n      });\n    });\n  }\n\n  /** Unload all grouped content instances */\n\n\n  createClass(GroupedContent, [{\n    key: 'unload',\n    value: function unload() {\n      forEach(this.groupedContentInstances, function (groupedContentInstance) {\n        groupedContentInstance.instance.unload();\n      });\n    }\n  }]);\n  return GroupedContent;\n}();\n\nmodule.exports = GroupedContent;\n","\n'use strict'\n\nvar selectors = [\n\t'iframe[src*=\"player.vimeo.com\"]',\n\t'iframe[src*=\"youtube.com\"]',\n\t'iframe[src*=\"youtube-nocookie.com\"]',\n\t'iframe[src*=\"kickstarter.com\"][src*=\"video.html\"]',\n\t'object'\n]\n\nvar css = '.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}'\n\nmodule.exports = function (parentSelector, opts) {\n\tparentSelector = parentSelector || 'body'\n\topts = opts || {}\n\n\tif (isObject(parentSelector)) {\n\t\topts = parentSelector\n\t\tparentSelector = 'body'\n\t}\n\n\topts.ignore = opts.ignore || ''\n\topts.players = opts.players || ''\n\n\tvar containers = queryAll(parentSelector)\n\tif (!hasLength(containers)) return\n\n\tif (!document.getElementById('fit-vids-style')) {\n\t\tvar head = document.head || document.getElementsByTagName('head')[0]\n\t\thead.appendChild(styles())\n\t}\n\n\tvar custom = toSelectorArray(opts.players) || []\n\tvar ignored = toSelectorArray(opts.ignore) || []\n\tvar selector = selectors\n\t\t.filter(notIgnored(ignored))\n\t\t.concat(custom)\n\t\t.join()\n\n\tif (!hasLength(selector)) return\n\n\tcontainers.forEach(function (container) {\n\t\tvar videos = queryAll(container, selector)\n\t\tvideos.forEach(function (video) {\n\t\t\twrap(video)\n\t\t})\n\t})\n}\n\nfunction queryAll (el, selector) {\n\tif (typeof el === 'string') {\n\t\tselector = el\n\t\tel = document\n\t}\n\treturn Array.prototype.slice.call(el.querySelectorAll(selector))\n}\n\nfunction toSelectorArray (input) {\n\tif (typeof input === 'string') {\n\t\treturn input.split(',').map(trim).filter(hasLength)\n\t} else if (isArray(input)) {\n\t\treturn flatten(input.map(toSelectorArray).filter(hasLength))\n\t}\n\treturn input || []\n}\n\nfunction wrap (el) {\n\tif (/fluid-width-video-wrapper/.test(el.parentNode.className)) return\n\n\tvar widthAttr = parseInt(el.getAttribute('width'), 10)\n\tvar heightAttr = parseInt(el.getAttribute('height'), 10)\n\n\tvar width = !isNaN(widthAttr) ? widthAttr : el.clientWidth\n\tvar height = !isNaN(heightAttr) ? heightAttr : el.clientHeight\n\tvar aspect = height / width\n\n\tel.removeAttribute('width')\n\tel.removeAttribute('height')\n\n\tvar wrapper = document.createElement('div')\n\tel.parentNode.insertBefore(wrapper, el)\n\twrapper.className = 'fluid-width-video-wrapper'\n\twrapper.style.paddingTop = (aspect * 100) + '%'\n\twrapper.appendChild(el)\n}\n\nfunction styles () {\n\tvar div = document.createElement('div')\n\tdiv.innerHTML = '<p>x</p><style id=\"fit-vids-style\">' + css + '</style>'\n\treturn div.childNodes[1]\n}\n\nfunction notIgnored (ignored) {\n\tif (ignored.length < 1) {\n\t\treturn function () {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn function (selector) {\n\t\treturn ignored.indexOf(selector) === -1\n\t}\n}\n\nfunction hasLength (input) {\n\treturn input.length > 0\n}\n\nfunction trim (str) {\n\treturn str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction flatten (input) {\n\treturn [].concat.apply([], input)\n}\n\nfunction isObject (input) {\n\treturn Object.prototype.toString.call(input) === '[object Object]'\n}\n\nfunction isArray (input) {\n\treturn Object.prototype.toString.call(input) === '[object Array]'\n}\n","import GroupedContent from 'grouped-content';\nimport fitvids from 'fitvids';\n\nexport default class RichText {\n  constructor(el, layout = 'tabs') {\n    this.el = el;\n\n    fitvids();\n    this.groupedContent = new GroupedContent(this.el, { layout, intelliparse: false });\n\n    this._initExternalLinks(el);\n  }\n\n  unload() {\n    this.groupedContent.unload();\n  }\n\n  /**\n   * Open links within an RTE field in a new window if they point to external domains\n   *\n   * @private\n   */\n  _initExternalLinks(el){\n    const anchors = $(el).find('a[href^=\"http\"]').filter((i, el) => {\n      return el.href.indexOf(location.hostname) === -1;\n    });\n\n    anchors.attr('target', '_blank');\n  }\n}\n","import RichText from '../components/RichText';\n\nexport default class Page {\n  constructor() {\n    this.rteEl = document.querySelector('[data-rte]');\n    this.rte = this.rteEl ? new RichText(this.rteEl) : false;\n  }\n}\n","import { classes } from '../Constants';\n\nexport default class ScrollLock {\n  constructor() {\n    this.body = document.body;\n    this.html = document.querySelector('html');\n    this.blockScroll = this._blockScroll.bind(this);\n  }\n\n  lock() {\n    this.html.classList.add(classes.scrollLock.locked);\n    this.body.style.top = -1 * window.pageYOffset;\n    this.body.addEventListener('scroll', this.blockScroll, false);\n  }\n\n  unlock() {\n    this.html.classList.remove(classes.scrollLock.locked);\n    this.body.style.top = '';\n    this.body.removeEventListener('scroll', this.blockScroll, false);\n  }\n\n  _blockScroll(event) {\n    event.preventDefault();\n  }\n}\n\n","(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.VanillaModal = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  var defaults = {\n    modal: '.modal',\n    modalInner: '.modal-inner',\n    modalContent: '.modal-content',\n    open: '[data-modal-open]',\n    close: '[data-modal-close]',\n    page: 'body',\n    class: 'modal-visible',\n    loadClass: 'vanilla-modal',\n    clickOutside: true,\n    closeKeys: [27],\n    transitions: true,\n    transitionEnd: null,\n    onBeforeOpen: null,\n    onBeforeClose: null,\n    onOpen: null,\n    onClose: null\n  };\n\n  function throwError(message) {\n    // eslint-disable-next-line no-console\n    console.error('VanillaModal: ' + message);\n  }\n\n  function find(arr, callback) {\n    return function (key) {\n      var filteredArray = arr.filter(callback);\n      return filteredArray[0] ? filteredArray[0][key] : undefined;\n    };\n  }\n\n  function transitionEndVendorSniff() {\n    var el = document.createElement('div');\n    var transitions = [{ key: 'transition', value: 'transitionend' }, { key: 'OTransition', value: 'otransitionend' }, { key: 'MozTransition', value: 'transitionend' }, { key: 'WebkitTransition', value: 'webkitTransitionEnd' }];\n    return find(transitions, function (_ref) {\n      var key = _ref.key;\n      return typeof el.style[key] !== 'undefined';\n    })('value');\n  }\n\n  function isPopulatedArray(arr) {\n    return Object.prototype.toString.call(arr) === '[object Array]' && arr.length;\n  }\n\n  function getNode(selector, parent) {\n    var targetNode = parent || document;\n    var node = targetNode.querySelector(selector);\n    if (!node) {\n      throwError(selector + ' not found in document.');\n    }\n    return node;\n  }\n\n  function addClass(el, className) {\n    if (!(el instanceof HTMLElement)) {\n      throwError('Not a valid HTML element.');\n    }\n    el.setAttribute('class', el.className.split(' ').filter(function (cn) {\n      return cn !== className;\n    }).concat(className).join(' '));\n  }\n\n  function removeClass(el, className) {\n    if (!(el instanceof HTMLElement)) {\n      throwError('Not a valid HTML element.');\n    }\n    el.setAttribute('class', el.className.split(' ').filter(function (cn) {\n      return cn !== className;\n    }).join(' '));\n  }\n\n  function getElementContext(e) {\n    if (e && typeof e.hash === 'string') {\n      return document.querySelector(e.hash);\n    } else if (typeof e === 'string') {\n      return document.querySelector(e);\n    }\n    throwError('No selector supplied to open()');\n    return null;\n  }\n\n  function applyUserSettings(settings) {\n    return _extends({}, defaults, settings, {\n      transitionEnd: transitionEndVendorSniff()\n    });\n  }\n\n  function matches(e, selector) {\n    var allMatches = (e.target.document || e.target.ownerDocument).querySelectorAll(selector);\n    for (var i = 0; i < allMatches.length; i += 1) {\n      var node = e.target;\n      while (node && node !== document.body) {\n        if (node === allMatches[i]) {\n          return node;\n        }\n        node = node.parentNode;\n      }\n    }\n    return null;\n  }\n\n  var VanillaModal = function () {\n    function VanillaModal(settings) {\n      _classCallCheck(this, VanillaModal);\n\n      this.isOpen = false;\n      this.current = null;\n      this.isListening = false;\n\n      this.settings = applyUserSettings(settings);\n      this.dom = this.getDomNodes();\n\n      this.open = this.open.bind(this);\n      this.close = this.close.bind(this);\n      this.closeKeyHandler = this.closeKeyHandler.bind(this);\n      this.outsideClickHandler = this.outsideClickHandler.bind(this);\n      this.delegateOpen = this.delegateOpen.bind(this);\n      this.delegateClose = this.delegateClose.bind(this);\n      this.listen = this.listen.bind(this);\n      this.destroy = this.destroy.bind(this);\n\n      this.addLoadedCssClass();\n      this.listen();\n    }\n\n    _createClass(VanillaModal, [{\n      key: 'getDomNodes',\n      value: function getDomNodes() {\n        var _settings = this.settings,\n            modal = _settings.modal,\n            page = _settings.page,\n            modalInner = _settings.modalInner,\n            modalContent = _settings.modalContent;\n\n        return {\n          modal: getNode(modal),\n          page: getNode(page),\n          modalInner: getNode(modalInner, getNode(modal)),\n          modalContent: getNode(modalContent, getNode(modal))\n        };\n      }\n    }, {\n      key: 'addLoadedCssClass',\n      value: function addLoadedCssClass() {\n        addClass(this.dom.page, this.settings.loadClass);\n      }\n    }, {\n      key: 'setOpenId',\n      value: function setOpenId(id) {\n        var page = this.dom.page;\n\n        page.setAttribute('data-current-modal', id || 'anonymous');\n      }\n    }, {\n      key: 'removeOpenId',\n      value: function removeOpenId() {\n        var page = this.dom.page;\n\n        page.removeAttribute('data-current-modal');\n      }\n    }, {\n      key: 'open',\n      value: function open(allMatches, e) {\n        var page = this.dom.page;\n        var _settings2 = this.settings,\n            onBeforeOpen = _settings2.onBeforeOpen,\n            onOpen = _settings2.onOpen;\n\n        this.closeModal(e);\n        if (!(this.current instanceof HTMLElement === false)) {\n          throwError('VanillaModal target must exist on page.');\n          return;\n        }\n        this.releaseNode(this.current);\n        this.current = getElementContext(allMatches);\n        if (typeof onBeforeOpen === 'function') {\n          onBeforeOpen.call(this, e);\n        }\n        this.captureNode(this.current);\n        addClass(page, this.settings.class);\n        this.setOpenId(this.current.id);\n        this.isOpen = true;\n        if (typeof onOpen === 'function') {\n          onOpen.call(this, e);\n        }\n      }\n    }, {\n      key: 'detectTransition',\n      value: function detectTransition() {\n        var modal = this.dom.modal;\n\n        var css = window.getComputedStyle(modal, null);\n        return Boolean(['transitionDuration', 'oTransitionDuration', 'MozTransitionDuration', 'webkitTransitionDuration'].filter(function (i) {\n          return typeof css[i] === 'string' && parseFloat(css[i]) > 0;\n        }).length);\n      }\n    }, {\n      key: 'close',\n      value: function close(e) {\n        var _settings3 = this.settings,\n            transitions = _settings3.transitions,\n            transitionEnd = _settings3.transitionEnd,\n            onBeforeClose = _settings3.onBeforeClose;\n\n        var hasTransition = this.detectTransition();\n        if (this.isOpen) {\n          this.isOpen = false;\n          if (typeof onBeforeClose === 'function') {\n            onBeforeClose.call(this, e);\n          }\n          removeClass(this.dom.page, this.settings.class);\n          if (transitions && transitionEnd && hasTransition) {\n            this.closeModalWithTransition(e);\n          } else {\n            this.closeModal(e);\n          }\n        }\n      }\n    }, {\n      key: 'closeModal',\n      value: function closeModal(e) {\n        var onClose = this.settings.onClose;\n\n        this.removeOpenId(this.dom.page);\n        this.releaseNode(this.current);\n        this.isOpen = false;\n        this.current = null;\n        if (typeof onClose === 'function') {\n          onClose.call(this, e);\n        }\n      }\n    }, {\n      key: 'closeModalWithTransition',\n      value: function closeModalWithTransition(e) {\n        var _this = this;\n\n        var modal = this.dom.modal;\n        var transitionEnd = this.settings.transitionEnd;\n\n        var closeTransitionHandler = function closeTransitionHandler() {\n          modal.removeEventListener(transitionEnd, closeTransitionHandler);\n          _this.closeModal(e);\n        };\n        modal.addEventListener(transitionEnd, closeTransitionHandler);\n      }\n    }, {\n      key: 'captureNode',\n      value: function captureNode(node) {\n        var modalContent = this.dom.modalContent;\n\n        while (node.childNodes.length) {\n          modalContent.appendChild(node.childNodes[0]);\n        }\n      }\n    }, {\n      key: 'releaseNode',\n      value: function releaseNode(node) {\n        var modalContent = this.dom.modalContent;\n\n        while (modalContent.childNodes.length) {\n          node.appendChild(modalContent.childNodes[0]);\n        }\n      }\n    }, {\n      key: 'closeKeyHandler',\n      value: function closeKeyHandler(e) {\n        var closeKeys = this.settings.closeKeys;\n\n        if (isPopulatedArray(closeKeys) && closeKeys.indexOf(e.which) > -1 && this.isOpen === true) {\n          e.preventDefault();\n          this.close(e);\n        }\n      }\n    }, {\n      key: 'outsideClickHandler',\n      value: function outsideClickHandler(e) {\n        var clickOutside = this.settings.clickOutside;\n        var modalInner = this.dom.modalInner;\n\n        if (clickOutside) {\n          var node = e.target;\n          while (node && node !== document.body) {\n            if (node === modalInner) {\n              return;\n            }\n            node = node.parentNode;\n          }\n          this.close(e);\n        }\n      }\n    }, {\n      key: 'delegateOpen',\n      value: function delegateOpen(e) {\n        var open = this.settings.open;\n\n        var matchedNode = matches(e, open);\n        if (matchedNode) {\n          e.preventDefault();\n          this.open(matchedNode, e);\n        }\n      }\n    }, {\n      key: 'delegateClose',\n      value: function delegateClose(e) {\n        var close = this.settings.close;\n\n        if (matches(e, close)) {\n          e.preventDefault();\n          this.close(e);\n        }\n      }\n    }, {\n      key: 'listen',\n      value: function listen() {\n        var modal = this.dom.modal;\n\n        if (!this.isListening) {\n          modal.addEventListener('click', this.outsideClickHandler, false);\n          document.addEventListener('keydown', this.closeKeyHandler, false);\n          document.addEventListener('click', this.delegateOpen, false);\n          document.addEventListener('click', this.delegateClose, false);\n          this.isListening = true;\n        } else {\n          throwError('Event listeners already applied.');\n        }\n      }\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        var modal = this.dom.modal;\n\n        if (this.isListening) {\n          this.close();\n          modal.removeEventListener('click', this.outsideClickHandler);\n          document.removeEventListener('keydown', this.closeKeyHandler);\n          document.removeEventListener('click', this.delegateOpen);\n          document.removeEventListener('click', this.delegateClose);\n          this.isListening = false;\n        } else {\n          throwError('Event listeners already removed.');\n        }\n      }\n    }]);\n\n    return VanillaModal;\n  }();\n\n  exports.default = VanillaModal;\n});\n","import $ from 'jquery';\nimport { selectors } from './Constants';\nimport ScrollLock from './helpers/ScrollLock';\nimport VanillaModal from 'vanilla-modal';\n\nexport default class Modal {\n  constructor(callbacks = {}) {\n    this.$body = $(document.body);\n    this.$window = $(window);\n\n    this.modal = null;\n    this.$modal = $(selectors.modal.wrapper);\n\n    this.scrollLock = new ScrollLock();\n\n    // Extend default vanilla-modal callbacks back to instantiator of Modal\n    this.defaultCallbacks = {\n      onOpen: () => {},\n      onClose: () => {},\n      onBeforeShow: () => {},\n      onBeforeOpen: () => {},\n      onBeforeClose: () => {},\n    };\n\n    this.callbacks = $.extend({}, this.defaultCallbacks, callbacks);\n\n    this._onOpen = this._onOpen.bind(this);\n    this._onBeforeOpen = this._onBeforeOpen.bind(this);\n    this._onBeforeShow = this._onBeforeShow.bind(this);\n    this._onClose = this._onClose.bind(this);\n    this._onBeforeClose = this._onBeforeClose.bind(this);\n\n    this.modalOptions = {\n      loadClass: '',\n      class: 'modal-loaded',\n      onOpen: this._onOpen,\n      onClose: this._onClose,\n      onBeforeOpen: this._onBeforeOpen,\n      onBeforeClose: this._onBeforeClose,\n      transitions: false,\n    };\n  }\n\n  unload() {\n    if (!this.modal || !this.modal.isOpen) {\n      return;\n    }\n\n    this.modal.destroy();\n  }\n\n  /**\n   * Open a modal with contents from selector\n   *\n   * @param selector\n   * @param handle\n   */\n  open(selector, handle = 'general') {\n    if (this.modal && this.modal.isOpen) {\n      return;\n    }\n\n    this._addModalClass(handle);\n    this.modal = new VanillaModal(this.modalOptions);\n    this.modal.open(selector);\n  }\n\n  close() {\n    this.modal.close();\n  }\n\n  isOpen() {\n    return this.modal && this.modal.isOpen;\n  }\n\n  /**\n   * Add a class to the modal for individual styling\n   * @param handle\n   * @private\n   */\n  _addModalClass(handle) {\n    this.$modal.addClass(`modal-${handle}`);\n  }\n\n  /**\n   * Remove modal class based on the handle\n   * @private\n   */\n  _removeModalClass() {\n    const modalClass = this.$modal.attr('class').match(/modal-[\\w-]*\\b/);\n    if (!modalClass) {\n      return;\n    }\n\n    this.$modal.removeClass(modalClass[0]);\n  }\n\n  _onClose() {\n    this._removeModalClass();\n    this.$modal.revealer('hide').one('trend', () => {\n      this.scrollLock.unlock();\n      this.callbacks.onClose();\n    });\n  }\n\n  _onOpen() {\n    this._onBeforeShow();\n    this.$modal.revealer('show').one('trend', () => {\n      this.scrollLock.lock();\n      this.callbacks.onOpen(this.$modal);\n    });\n  }\n\n  _onBeforeClose() {\n    this.callbacks.onBeforeClose();\n  }\n\n  _onBeforeShow() {\n    this.callbacks.onBeforeShow();\n  }\n\n  _onBeforeOpen() {\n    this.callbacks.onBeforeOpen();\n  }\n}\n","import $ from 'jquery';\n\nconst eventHandlers = [];\n\nfunction getBreakpoint() {\n  return window\n    .getComputedStyle(document.documentElement, ':after')\n    .getPropertyValue('content')\n    .replace(/\"/g, '');\n}\n\nlet previousBreakpoint = getBreakpoint();\n\n$(window).on('resize', (event) => {\n  const currentBreakpoint = getBreakpoint();\n\n  if (previousBreakpoint !== currentBreakpoint) {\n    eventHandlers.forEach((eventHandler) => {\n      eventHandler(event, {\n        previous: previousBreakpoint,\n        current: currentBreakpoint,\n      });\n    });\n  }\n\n  previousBreakpoint = currentBreakpoint;\n});\n\nfunction isBreakpoint(breakpoint) {\n  return getBreakpoint() === breakpoint;\n}\n\nfunction onBreakpointChange(eventHandler) {\n  if (eventHandlers.indexOf(eventHandler) === -1) {\n    eventHandlers.push(eventHandler);\n  }\n}\n\nfunction offBreakpointChange(eventHandler) {\n  const index = eventHandlers.indexOf(eventHandler);\n\n  if (index !== -1) {\n    eventHandlers.splice(index, 1);\n  }\n}\n\nfunction crossesThreshold() {\n  const previous = previousBreakpoint;\n  const current = getBreakpoint();\n\n  const mobileSizes = ['XS', 'S'];\n  const desktopSizes = ['M', 'L', 'XL'];\n\n  const desktopToMobile = desktopSizes.indexOf(previous) >= 0 && mobileSizes.indexOf(current) >= 0;\n  const mobileToDesktop = mobileSizes.indexOf(previous) >= 0 && desktopSizes.indexOf(current) >= 0;\n\n  return desktopToMobile || mobileToDesktop;\n}\n\nexport default {\n  getBreakpoint,\n  isBreakpoint,\n  onBreakpointChange,\n  offBreakpointChange,\n  crossesThreshold,\n};\n","'use strict';\n\nvar moneyFormats = {\n  USD: {\n    'money_format': '${{amount}}',\n    'money_with_currency_format': '${{amount}} USD'\n  },\n  EUR: {\n    'money_format': '&euro;{{amount}}',\n    'money_with_currency_format': '&euro;{{amount}} EUR'\n  },\n  GBP: {\n    'money_format': '&pound;{{amount}}',\n    'money_with_currency_format': '&pound;{{amount}} GBP'\n  },\n  CAD: {\n    'money_format': '${{amount}}',\n    'money_with_currency_format': '${{amount}} CAD'\n  },\n  ALL: {\n    'money_format': 'Lek {{amount}}',\n    'money_with_currency_format': 'Lek {{amount}} ALL'\n  },\n  DZD: {\n    'money_format': 'DA {{amount}}',\n    'money_with_currency_format': 'DA {{amount}} DZD'\n  },\n  AOA: {\n    'money_format': 'Kz{{amount}}',\n    'money_with_currency_format': 'Kz{{amount}} AOA'\n  },\n  ARS: {\n    'money_format': '${{amount_with_comma_separator}}',\n    'money_with_currency_format': '${{amount_with_comma_separator}} ARS'\n  },\n  AMD: {\n    'money_format': '{{amount}} AMD',\n    'money_with_currency_format': '{{amount}} AMD'\n  },\n  AWG: {\n    'money_format': 'Afl{{amount}}',\n    'money_with_currency_format': 'Afl{{amount}} AWG'\n  },\n  AUD: {\n    'money_format': '${{amount}}',\n    'money_with_currency_format': '${{amount}} AUD'\n  },\n  BBD: {\n    'money_format': '${{amount}}',\n    'money_with_currency_format': '${{amount}} Bds'\n  },\n  AZN: {\n    'money_format': 'm.{{amount}}',\n    'money_with_currency_format': 'm.{{amount}} AZN'\n  },\n  BDT: {\n    'money_format': 'Tk {{amount}}',\n    'money_with_currency_format': 'Tk {{amount}} BDT'\n  },\n  BSD: {\n    'money_format': 'BS${{amount}}',\n    'money_with_currency_format': 'BS${{amount}} BSD'\n  },\n  BHD: {\n    'money_format': '{{amount}}0 BD',\n    'money_with_currency_format': '{{amount}}0 BHD'\n  },\n  BYR: {\n    'money_format': 'Br {{amount}}',\n    'money_with_currency_format': 'Br {{amount}} BYR'\n  },\n  BZD: {\n    'money_format': 'BZ${{amount}}',\n    'money_with_currency_format': 'BZ${{amount}} BZD'\n  },\n  BTN: {\n    'money_format': 'Nu {{amount}}',\n    'money_with_currency_format': 'Nu {{amount}} BTN'\n  },\n  BAM: {\n    'money_format': 'KM {{amount_with_comma_separator}}',\n    'money_with_currency_format': 'KM {{amount_with_comma_separator}} BAM'\n  },\n  BRL: {\n    'money_format': 'R$ {{amount_with_comma_separator}}',\n    'money_with_currency_format': 'R$ {{amount_with_comma_separator}} BRL'\n  },\n  BOB: {\n    'money_format': 'Bs{{amount_with_comma_separator}}',\n    'money_with_currency_format': 'Bs{{amount_with_comma_separator}} BOB'\n  },\n  BWP: {\n    'money_format': 'P{{amount}}',\n    'money_with_currency_format': 'P{{amount}} BWP'\n  },\n  BND: {\n    'money_format': '${{amount}}',\n    'money_with_currency_format': '${{amount}} BND'\n  },\n  BGN: {\n    'money_format': '{{amount}} лв',\n    'money_with_currency_format': '{{amount}} лв BGN'\n  },\n  MMK: {\n    'money_format': 'K{{amount}}',\n    'money_with_currency_format': 'K{{amount}} MMK'\n  },\n  KHR: {\n    'money_format': 'KHR{{amount}}',\n    'money_with_currency_format': 'KHR{{amount}}'\n  },\n  KYD: {\n    'money_format': '${{amount}}',\n    'money_with_currency_format': '${{amount}} KYD'\n  },\n  XAF: {\n    'money_format': 'FCFA{{amount}}',\n    'money_with_currency_format': 'FCFA{{amount}} XAF'\n  },\n  CLP: {\n    'money_format': '${{amount_no_decimals}}',\n    'money_with_currency_format': '${{amount_no_decimals}} CLP'\n  },\n  CNY: {\n    'money_format': '&#165;{{amount}}',\n    'money_with_currency_format': '&#165;{{amount}} CNY'\n  },\n  COP: {\n    'money_format': '${{amount_with_comma_separator}}',\n    'money_with_currency_format': '${{amount_with_comma_separator}} COP'\n  },\n  CRC: {\n    'money_format': '&#8353; {{amount_with_comma_separator}}',\n    'money_with_currency_format': '&#8353; {{amount_with_comma_separator}} CRC'\n  },\n  HRK: {\n    'money_format': '{{amount_with_comma_separator}} kn',\n    'money_with_currency_format': '{{amount_with_comma_separator}} kn HRK'\n  },\n  CZK: {\n    'money_format': '{{amount_with_comma_separator}} K&#269;',\n    'money_with_currency_format': '{{amount_with_comma_separator}} K&#269;'\n  },\n  DKK: {\n    'money_format': '{{amount_with_comma_separator}}',\n    'money_with_currency_format': 'kr.{{amount_with_comma_separator}}'\n  },\n  DOP: {\n    'money_format': 'RD$ {{amount}}',\n    'money_with_currency_format': 'RD$ {{amount}}'\n  },\n  XCD: {\n    'money_format': '${{amount}}',\n    'money_with_currency_format': 'EC${{amount}}'\n  },\n  EGP: {\n    'money_format': 'LE {{amount}}',\n    'money_with_currency_format': 'LE {{amount}} EGP'\n  },\n  ETB: {\n    'money_format': 'Br{{amount}}',\n    'money_with_currency_format': 'Br{{amount}} ETB'\n  },\n  XPF: {\n    'money_format': '{{amount_no_decimals_with_comma_separator}} XPF',\n    'money_with_currency_format': '{{amount_no_decimals_with_comma_separator}} XPF'\n  },\n  FJD: {\n    'money_format': '${{amount}}',\n    'money_with_currency_format': 'FJ${{amount}}'\n  },\n  GMD: {\n    'money_format': 'D {{amount}}',\n    'money_with_currency_format': 'D {{amount}} GMD'\n  },\n  GHS: {\n    'money_format': 'GH&#8373;{{amount}}',\n    'money_with_currency_format': 'GH&#8373;{{amount}}'\n  },\n  GTQ: {\n    'money_format': 'Q{{amount}}',\n    'money_with_currency_format': '{{amount}} GTQ'\n  },\n  GYD: {\n    'money_format': 'G${{amount}}',\n    'money_with_currency_format': '${{amount}} GYD'\n  },\n  GEL: {\n    'money_format': '{{amount}} GEL',\n    'money_with_currency_format': '{{amount}} GEL'\n  },\n  HNL: {\n    'money_format': 'L {{amount}}',\n    'money_with_currency_format': 'L {{amount}} HNL'\n  },\n  HKD: {\n    'money_format': '${{amount}}',\n    'money_with_currency_format': 'HK${{amount}}'\n  },\n  HUF: {\n    'money_format': '{{amount_no_decimals_with_comma_separator}}',\n    'money_with_currency_format': '{{amount_no_decimals_with_comma_separator}} Ft'\n  },\n  ISK: {\n    'money_format': '{{amount_no_decimals}} kr',\n    'money_with_currency_format': '{{amount_no_decimals}} kr ISK'\n  },\n  INR: {\n    'money_format': 'Rs. {{amount}}',\n    'money_with_currency_format': 'Rs. {{amount}}'\n  },\n  IDR: {\n    'money_format': '{{amount_with_comma_separator}}',\n    'money_with_currency_format': 'Rp {{amount_with_comma_separator}}'\n  },\n  ILS: {\n    'money_format': '{{amount}} NIS',\n    'money_with_currency_format': '{{amount}} NIS'\n  },\n  JMD: {\n    'money_format': '${{amount}}',\n    'money_with_currency_format': '${{amount}} JMD'\n  },\n  JPY: {\n    'money_format': '&#165;{{amount_no_decimals}}',\n    'money_with_currency_format': '&#165;{{amount_no_decimals}} JPY'\n  },\n  JEP: {\n    'money_format': '&pound;{{amount}}',\n    'money_with_currency_format': '&pound;{{amount}} JEP'\n  },\n  JOD: {\n    'money_format': '{{amount}}0 JD',\n    'money_with_currency_format': '{{amount}}0 JOD'\n  },\n  KZT: {\n    'money_format': '{{amount}} KZT',\n    'money_with_currency_format': '{{amount}} KZT'\n  },\n  KES: {\n    'money_format': 'KSh{{amount}}',\n    'money_with_currency_format': 'KSh{{amount}}'\n  },\n  KWD: {\n    'money_format': '{{amount}}0 KD',\n    'money_with_currency_format': '{{amount}}0 KWD'\n  },\n  KGS: {\n    'money_format': 'лв{{amount}}',\n    'money_with_currency_format': 'лв{{amount}}'\n  },\n  LVL: {\n    'money_format': 'Ls {{amount}}',\n    'money_with_currency_format': 'Ls {{amount}} LVL'\n  },\n  LBP: {\n    'money_format': 'L&pound;{{amount}}',\n    'money_with_currency_format': 'L&pound;{{amount}} LBP'\n  },\n  LTL: {\n    'money_format': '{{amount}} Lt',\n    'money_with_currency_format': '{{amount}} Lt'\n  },\n  MGA: {\n    'money_format': 'Ar {{amount}}',\n    'money_with_currency_format': 'Ar {{amount}} MGA'\n  },\n  MKD: {\n    'money_format': 'ден {{amount}}',\n    'money_with_currency_format': 'ден {{amount}} MKD'\n  },\n  MOP: {\n    'money_format': 'MOP${{amount}}',\n    'money_with_currency_format': 'MOP${{amount}}'\n  },\n  MVR: {\n    'money_format': 'Rf{{amount}}',\n    'money_with_currency_format': 'Rf{{amount}} MRf'\n  },\n  MXN: {\n    'money_format': '$ {{amount}}',\n    'money_with_currency_format': '$ {{amount}} MXN'\n  },\n  MYR: {\n    'money_format': 'RM{{amount}} MYR',\n    'money_with_currency_format': 'RM{{amount}} MYR'\n  },\n  MUR: {\n    'money_format': 'Rs {{amount}}',\n    'money_with_currency_format': 'Rs {{amount}} MUR'\n  },\n  MDL: {\n    'money_format': '{{amount}} MDL',\n    'money_with_currency_format': '{{amount}} MDL'\n  },\n  MAD: {\n    'money_format': '{{amount}} dh',\n    'money_with_currency_format': 'Dh {{amount}} MAD'\n  },\n  MNT: {\n    'money_format': '{{amount_no_decimals}} &#8366',\n    'money_with_currency_format': '{{amount_no_decimals}} MNT'\n  },\n  MZN: {\n    'money_format': '{{amount}} Mt',\n    'money_with_currency_format': 'Mt {{amount}} MZN'\n  },\n  NAD: {\n    'money_format': 'N${{amount}}',\n    'money_with_currency_format': 'N${{amount}} NAD'\n  },\n  NPR: {\n    'money_format': 'Rs{{amount}}',\n    'money_with_currency_format': 'Rs{{amount}} NPR'\n  },\n  ANG: {\n    'money_format': '&fnof;{{amount}}',\n    'money_with_currency_format': '{{amount}} NA&fnof;'\n  },\n  NZD: {\n    'money_format': '${{amount}}',\n    'money_with_currency_format': '${{amount}} NZD'\n  },\n  NIO: {\n    'money_format': 'C${{amount}}',\n    'money_with_currency_format': 'C${{amount}} NIO'\n  },\n  NGN: {\n    'money_format': '&#8358;{{amount}}',\n    'money_with_currency_format': '&#8358;{{amount}} NGN'\n  },\n  NOK: {\n    'money_format': 'kr {{amount_with_comma_separator}}',\n    'money_with_currency_format': 'kr {{amount_with_comma_separator}} NOK'\n  },\n  OMR: {\n    'money_format': '{{amount_with_comma_separator}} OMR',\n    'money_with_currency_format': '{{amount_with_comma_separator}} OMR'\n  },\n  PKR: {\n    'money_format': 'Rs.{{amount}}',\n    'money_with_currency_format': 'Rs.{{amount}} PKR'\n  },\n  PGK: {\n    'money_format': 'K {{amount}}',\n    'money_with_currency_format': 'K {{amount}} PGK'\n  },\n  PYG: {\n    'money_format': 'Gs. {{amount_no_decimals_with_comma_separator}}',\n    'money_with_currency_format': 'Gs. {{amount_no_decimals_with_comma_separator}} PYG'\n  },\n  PEN: {\n    'money_format': 'S/. {{amount}}',\n    'money_with_currency_format': 'S/. {{amount}} PEN'\n  },\n  PHP: {\n    'money_format': '&#8369;{{amount}}',\n    'money_with_currency_format': '&#8369;{{amount}} PHP'\n  },\n  PLN: {\n    'money_format': '{{amount_with_comma_separator}} zl',\n    'money_with_currency_format': '{{amount_with_comma_separator}} zl PLN'\n  },\n  QAR: {\n    'money_format': 'QAR {{amount_with_comma_separator}}',\n    'money_with_currency_format': 'QAR {{amount_with_comma_separator}}'\n  },\n  RON: {\n    'money_format': '{{amount_with_comma_separator}} lei',\n    'money_with_currency_format': '{{amount_with_comma_separator}} lei RON'\n  },\n  RUB: {\n    'money_format': '&#1088;&#1091;&#1073;{{amount_with_comma_separator}}',\n    'money_with_currency_format': '&#1088;&#1091;&#1073;{{amount_with_comma_separator}} RUB'\n  },\n  RWF: {\n    'money_format': '{{amount_no_decimals}} RF',\n    'money_with_currency_format': '{{amount_no_decimals}} RWF'\n  },\n  WST: {\n    'money_format': 'WS$ {{amount}}',\n    'money_with_currency_format': 'WS$ {{amount}} WST'\n  },\n  SAR: {\n    'money_format': '{{amount}} SR',\n    'money_with_currency_format': '{{amount}} SAR'\n  },\n  STD: {\n    'money_format': 'Db {{amount}}',\n    'money_with_currency_format': 'Db {{amount}} STD'\n  },\n  RSD: {\n    'money_format': '{{amount}} RSD',\n    'money_with_currency_format': '{{amount}} RSD'\n  },\n  SCR: {\n    'money_format': 'Rs {{amount}}',\n    'money_with_currency_format': 'Rs {{amount}} SCR'\n  },\n  SGD: {\n    'money_format': '${{amount}}',\n    'money_with_currency_format': '${{amount}} SGD'\n  },\n  SYP: {\n    'money_format': 'S&pound;{{amount}}',\n    'money_with_currency_format': 'S&pound;{{amount}} SYP'\n  },\n  ZAR: {\n    'money_format': 'R {{amount}}',\n    'money_with_currency_format': 'R {{amount}} ZAR'\n  },\n  KRW: {\n    'money_format': '&#8361;{{amount_no_decimals}}',\n    'money_with_currency_format': '&#8361;{{amount_no_decimals}} KRW'\n  },\n  LKR: {\n    'money_format': 'Rs {{amount}}',\n    'money_with_currency_format': 'Rs {{amount}} LKR'\n  },\n  SEK: {\n    'money_format': '{{amount_no_decimals}} kr',\n    'money_with_currency_format': '{{amount_no_decimals}} kr SEK'\n  },\n  CHF: {\n    'money_format': 'SFr. {{amount}}',\n    'money_with_currency_format': 'SFr. {{amount}} CHF'\n  },\n  TWD: {\n    'money_format': '${{amount}}',\n    'money_with_currency_format': '${{amount}} TWD'\n  },\n  THB: {\n    'money_format': '{{amount}} &#xe3f;',\n    'money_with_currency_format': '{{amount}} &#xe3f; THB'\n  },\n  TZS: {\n    'money_format': '{{amount}} TZS',\n    'money_with_currency_format': '{{amount}} TZS'\n  },\n  TTD: {\n    'money_format': '${{amount}}',\n    'money_with_currency_format': '${{amount}} TTD'\n  },\n  TND: {\n    'money_format': '{{amount}}',\n    'money_with_currency_format': '{{amount}} DT'\n  },\n  TRY: {\n    'money_format': '{{amount}}TL',\n    'money_with_currency_format': '{{amount}}TL'\n  },\n  UGX: {\n    'money_format': 'Ush {{amount_no_decimals}}',\n    'money_with_currency_format': 'Ush {{amount_no_decimals}} UGX'\n  },\n  UAH: {\n    'money_format': '₴{{amount}}',\n    'money_with_currency_format': '₴{{amount}} UAH'\n  },\n  AED: {\n    'money_format': 'Dhs. {{amount}}',\n    'money_with_currency_format': 'Dhs. {{amount}} AED'\n  },\n  UYU: {\n    'money_format': '${{amount_with_comma_separator}}',\n    'money_with_currency_format': '${{amount_with_comma_separator}} UYU'\n  },\n  VUV: {\n    'money_format': '${{amount}}',\n    'money_with_currency_format': '${{amount}}VT'\n  },\n  VEF: {\n    'money_format': 'Bs. {{amount_with_comma_separator}}',\n    'money_with_currency_format': 'Bs. {{amount_with_comma_separator}} VEF'\n  },\n  VND: {\n    'money_format': '{{amount_no_decimals_with_comma_separator}}&#8363;',\n    'money_with_currency_format': '{{amount_no_decimals_with_comma_separator}} VND'\n  },\n  XBT: {\n    'money_format': '{{amount_no_decimals}} BTC',\n    'money_with_currency_format': '{{amount_no_decimals}} BTC'\n  },\n  XOF: {\n    'money_format': 'CFA{{amount}}',\n    'money_with_currency_format': 'CFA{{amount}} XOF'\n  },\n  ZMW: {\n    'money_format': 'K{{amount_no_decimals_with_comma_separator}}',\n    'money_with_currency_format': 'ZMW{{amount_no_decimals_with_comma_separator}}'\n  }\n};\n\n/**\n * Format a number to a specific format\n *\n * @param number {Number}\n * @param precision {Number}\n * @param thousands {String}\n * @param decimal {String}\n * @returns {String}\n */\nfunction formatWithDelimiters(number) {\n  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var thousands = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';\n  var decimal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '.';\n\n  if (isNaN(number) || !number) {\n    return 0;\n  }\n\n  var preciseNumber = (number / 100.0).toFixed(precision);\n\n  var parts = preciseNumber.split(thousands);\n  var dollarsAmount = parts[0].replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1' + thousands);\n  var centsAmount = parts[1] ? decimal + parts[1] : '';\n\n  return dollarsAmount + centsAmount;\n}\n\n/**\n * Convert a money value in cents to a formatted currency string\n *\n * @param cents {Number|String}\n * @param format {String}\n * @returns {String}\n */\nfunction formatMoney(cents, format) {\n  if (typeof cents === 'string') {\n    cents = cents.replace('.', '');\n  }\n\n  var value = '';\n  var placeholderRegex = /\\{\\{\\s*(\\w+)\\s*\\}\\}/;\n\n  switch (format.match(placeholderRegex)[1]) {\n    case 'amount':\n      value = formatWithDelimiters(cents, 2, ',', '.');\n      break;\n    case 'amount_with_space_separator':\n      value = formatWithDelimiters(cents, 2, ' ', '.');\n      break;\n    case 'amount_with_comma_separator':\n      value = formatWithDelimiters(cents, 2, '.', ',');\n      break;\n    case 'amount_with_apostrophe_separator':\n      value = formatWithDelimiters(cents, 2, '\\'', '.');\n      break;\n    case 'amount_no_decimals':\n      value = formatWithDelimiters(cents, 0, ',', '.');\n      break;\n    case 'amount_no_decimals_with_space_separator':\n      value = formatWithDelimiters(cents, 0, ' ', '.');\n      break;\n    case 'amount_no_decimals_with_comma_separator':\n      value = formatWithDelimiters(cents, 0, ',', '.');\n      break;\n  }\n\n  return format.replace(placeholderRegex, value);\n}\n\n/**\n * Return the value of money in cents value\n *\n * @param moneyAmount {Number}\n * @param format {String}\n * @param currency {String}\n * @returns {Number}\n * @private\n */\nfunction getCentsValue(moneyAmount, format, currency) {\n  var cents = 0;\n  // Convert prices from float values to integers if needed, then convert\n  if (format.indexOf('amount_no_decimals') !== -1) {\n    cents = moneyAmount * 100;\n  } else if (currency === 'JOD' || currency === 'KWD' || currency === 'BHD') {\n    cents = moneyAmount / 10;\n  } else {\n    cents = moneyAmount;\n  }\n\n  return cents;\n}\n\n/**\n * Converts formatted money to a number\n *\n * @param priceEl {HTMLElement}\n * @returns {Number|String}\n */\nfunction getMoneyValue(priceEl) {\n  var price = priceEl.textContent;\n  var value = parseInt(price.replace(/[^0-9]/g, ''), 10);\n\n  return !isNaN(value) ? value : '';\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar CurrencyConverter = function () {\n  function CurrencyConverter() {\n    classCallCheck(this, CurrencyConverter);\n\n    /**\n     * @property {object} defaults                       - The default configuration for CurrencyConverter\n     * @property {string} defaults.switcherSelector      - CSS Selector for dropdown which controls currency conversion\n     * @property {string} defaults.priceSelector         - CSS Selector for elements containing prices\n     * @property {string} defaults.shopCurrency          - Shop's currency (Currency which prices are printed as)\n     * @property {string} defaults.defaultCurrency       - Theme's currency setting, or initial currency to show on the page\n     * @property {string} defaults.displayFormat         - `money_with_currency_format` or `money_format`\n     * @property {string} defaults.moneyFormat           - Shop's currency formatted using the display format\n     * @property {string} defaults.moneyFormatNoCurrency - Shop's currency formatted without showing currency\n     * @property {string} defaults.moneyFormatCurrency   - Shop's currency formatted showing currency\n     */\n    this.defaults = {\n      switcherSelector: '[data-currency-converter]',\n      priceSelector: '.money',\n      shopCurrency: '',\n      defaultCurrency: '',\n      displayFormat: '',\n      moneyFormat: '',\n      moneyFormatNoCurrency: '',\n      moneyFormatCurrency: ''\n    };\n\n    this.options = {};\n    this.moneyFormats = moneyFormats;\n    this.storage = 'currency';\n    this.currentCurrency = null;\n    this.isInitialised = false;\n  }\n\n  createClass(CurrencyConverter, [{\n    key: 'init',\n    value: function init(settings) {\n      var _this = this;\n\n      if (!window.Currency || this.isInitialised) return;\n\n      Object.keys(this.defaults).forEach(function (key) {\n        _this.options[key] = settings[key] || _this.defaults[key];\n      });\n\n      this.currentCurrency = this._getStoredCurrency() || this.options.defaultCurrency;\n      this.moneyFormats[this.options.shopCurrency].money_with_currency_format = this.options.moneyFormatCurrency;\n      this.moneyFormats[this.options.shopCurrency].money_format = this.options.moneyFormatNoCurrency;\n\n      this.isInitialised = true;\n      this._current();\n    }\n\n    /**\n     * Change the currency to a new currency using an ISO currency code\n     *\n     * @param newCurrency\n     */\n\n  }, {\n    key: 'setCurrency',\n    value: function setCurrency(newCurrency) {\n      if (!this.isInitialised) return;\n\n      this._convertAll(this.currentCurrency, newCurrency);\n    }\n\n    /**\n     * Updates a price on the page to use the active Currency, and formatting\n     *\n     * @param priceEl {HTMLElement}\n     */\n\n  }, {\n    key: 'update',\n    value: function update(priceEl) {\n      if (!this.isInitialised) return;\n\n      var attributes = priceEl.attributes;\n      for (var attr = 0; attr < attributes.length; attr++) {\n        var attribute = attributes[attr];\n\n        if (attribute.name.indexOf('data-currency') === 0) {\n          priceEl.setAttribute(attribute.name, '');\n        }\n      }\n\n      var moneyValue = getMoneyValue(priceEl);\n      var centsValue = getCentsValue(moneyValue, this.options.moneyFormat, this.options.shopCurrency);\n\n      // Cents value is empty, but not 0. 0$ is a valid price, while empty is not\n      if (centsValue === '') return;\n\n      var priceFormatted = formatMoney(centsValue, this.options.moneyFormat);\n\n      priceEl.innerHTML = priceFormatted;\n      priceEl.removeAttribute('data-currency');\n      priceEl.setAttribute('data-currency-' + this.options.shopCurrency, priceFormatted);\n      priceEl.setAttribute('data-currency', this.options.shopCurrency);\n\n      this._convertEl(priceEl, this.options.shopCurrency, this.currentCurrency);\n    }\n  }, {\n    key: '_getStoredCurrency',\n    value: function _getStoredCurrency() {\n      try {\n        return localStorage.getItem(this.storage);\n      } catch (error) {\n        console.warn(error);\n        return this.options.defaultCurrency;\n      }\n    }\n  }, {\n    key: '_setStoredCurrency',\n    value: function _setStoredCurrency(currency) {\n      try {\n        localStorage.setItem(this.storage, currency);\n      } catch (error) {\n        console.warn(error);\n      }\n    }\n\n    /**\n     * Update the currency switcher to the current currency\n     * @private\n     */\n\n  }, {\n    key: '_current',\n    value: function _current() {\n      var switchers = document.querySelectorAll(this.options.switcherSelector);\n      for (var i = 0; i < switchers.length; i++) {\n        var switcher = switchers[i];\n\n        var childrenEls = switcher.querySelectorAll('option');\n\n        for (var _i = 0; _i < childrenEls.length; _i++) {\n          var optionEl = childrenEls[_i];\n\n          if (optionEl.selected && optionEl.value !== this.currentCurrency) {\n            optionEl.selected = false;\n          }\n\n          if (optionEl.value === this.currentCurrency) {\n            optionEl.selected = true;\n          }\n        }\n      }\n\n      this._convertAll(this.options.shopCurrency, this.currentCurrency);\n    }\n\n    /**\n     * Converts an individual price to the new format\n     *\n     * @param priceEl\n     * @param oldCurrency\n     * @param newCurrency\n     * @private\n     */\n\n  }, {\n    key: '_convertEl',\n    value: function _convertEl(priceEl, oldCurrency, newCurrency) {\n\n      // If the amount has already been converted, we leave it alone.\n      if (priceEl.getAttribute('data-currency') === newCurrency) {\n        return;\n      }\n\n      // If we are converting to a currency that we have saved, we will use the saved amount.\n      if (priceEl.getAttribute('data-currency-' + newCurrency)) {\n        priceEl.innerHTML = priceEl.getAttribute('data-currency-' + newCurrency);\n      } else {\n        var oldFormat = this.moneyFormats[oldCurrency][this.options.displayFormat];\n        var newFormat = this.moneyFormats[newCurrency][this.options.displayFormat];\n\n        var moneyValue = getMoneyValue(priceEl);\n        var centsValue = getCentsValue(moneyValue, oldFormat, oldCurrency);\n\n        // Cents value is empty, but not 0. 0$ is a valid price, while empty is not\n        if (centsValue === '') return;\n\n        var cents = window.Currency.convert(centsValue, oldCurrency, newCurrency);\n        var priceFormatted = formatMoney(cents, newFormat);\n\n        priceEl.setAttribute('data-currency-' + newCurrency, priceFormatted);\n        priceEl.innerHTML = priceFormatted;\n      }\n\n      priceEl.setAttribute('data-currency', newCurrency);\n    }\n\n    /**\n     * Convert all prices on the page to the new currency\n     *\n     * @param oldCurrency\n     * @param newCurrency\n     * @private\n     */\n\n  }, {\n    key: '_convertAll',\n    value: function _convertAll(oldCurrency, newCurrency) {\n      var priceEls = document.querySelectorAll(this.options.priceSelector);\n      if (!priceEls) return;\n\n      this.currentCurrency = newCurrency;\n      this._setStoredCurrency(newCurrency);\n\n      for (var i = 0; i < priceEls.length; i++) {\n        this._convertEl(priceEls[i], oldCurrency, newCurrency);\n      }\n    }\n  }]);\n  return CurrencyConverter;\n}();\n\nvar CurrencyConverter$1 = new CurrencyConverter();\n\nmodule.exports = CurrencyConverter$1;\n","import CurrencyConverter from 'shopify-currency-converter';\n\nexport default class PriceManager {\n  constructor(el, moneyFormat) {\n    this.el = el;\n    this.moneyFormat = moneyFormat || null;\n    this.prices = el.querySelectorAll('.money');\n  }\n\n  /**\n   * Update all prices within element\n   *\n   * TODO: If this needs to be used more abstractly, then change:\n   * updateAll() to updateAll(els = this.prices), and update internal references\n   */\n  updateAll() {\n    for (let i = 0; i < this.prices.length; i++) {\n      this.updateCurrency(this.prices[i]);\n    }\n  }\n\n  /**\n   * Update a price to match store formatting\n   *\n   * @param el\n   * @param price\n   * @private\n   */\n  updatePrice(el, price) {\n    el.innerHTML = Shopify.formatMoney(price, this.moneyFormat);\n    this.updateCurrency(el);\n  }\n\n  /**\n   * Update an element to match selected currency.\n   *\n   * @param el\n   */\n  updateCurrency(el) {\n    CurrencyConverter.update(el);\n  }\n}\n","/*!\n  * $script.js JS loader & dependency manager\n  * https://github.com/ded/script.js\n  * (c) Dustin Diaz 2014 | License MIT\n  */\n\n(function (name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(definition)\n  else this[name] = definition()\n})('$script', function () {\n  var doc = document\n    , head = doc.getElementsByTagName('head')[0]\n    , s = 'string'\n    , f = false\n    , push = 'push'\n    , readyState = 'readyState'\n    , onreadystatechange = 'onreadystatechange'\n    , list = {}\n    , ids = {}\n    , delay = {}\n    , scripts = {}\n    , scriptpath\n    , urlArgs\n\n  function every(ar, fn) {\n    for (var i = 0, j = ar.length; i < j; ++i) if (!fn(ar[i])) return f\n    return 1\n  }\n  function each(ar, fn) {\n    every(ar, function (el) {\n      return !fn(el)\n    })\n  }\n\n  function $script(paths, idOrDone, optDone) {\n    paths = paths[push] ? paths : [paths]\n    var idOrDoneIsDone = idOrDone && idOrDone.call\n      , done = idOrDoneIsDone ? idOrDone : optDone\n      , id = idOrDoneIsDone ? paths.join('') : idOrDone\n      , queue = paths.length\n    function loopFn(item) {\n      return item.call ? item() : list[item]\n    }\n    function callback() {\n      if (!--queue) {\n        list[id] = 1\n        done && done()\n        for (var dset in delay) {\n          every(dset.split('|'), loopFn) && !each(delay[dset], loopFn) && (delay[dset] = [])\n        }\n      }\n    }\n    setTimeout(function () {\n      each(paths, function loading(path, force) {\n        if (path === null) return callback()\n        \n        if (!force && !/^https?:\\/\\//.test(path) && scriptpath) {\n          path = (path.indexOf('.js') === -1) ? scriptpath + path + '.js' : scriptpath + path;\n        }\n        \n        if (scripts[path]) {\n          if (id) ids[id] = 1\n          return (scripts[path] == 2) ? callback() : setTimeout(function () { loading(path, true) }, 0)\n        }\n\n        scripts[path] = 1\n        if (id) ids[id] = 1\n        create(path, callback)\n      })\n    }, 0)\n    return $script\n  }\n\n  function create(path, fn) {\n    var el = doc.createElement('script'), loaded\n    el.onload = el.onerror = el[onreadystatechange] = function () {\n      if ((el[readyState] && !(/^c|loade/.test(el[readyState]))) || loaded) return;\n      el.onload = el[onreadystatechange] = null\n      loaded = 1\n      scripts[path] = 2\n      fn()\n    }\n    el.async = 1\n    el.src = urlArgs ? path + (path.indexOf('?') === -1 ? '?' : '&') + urlArgs : path;\n    head.insertBefore(el, head.lastChild)\n  }\n\n  $script.get = create\n\n  $script.order = function (scripts, id, done) {\n    (function callback(s) {\n      s = scripts.shift()\n      !scripts.length ? $script(s, id, done) : $script(s, callback)\n    }())\n  }\n\n  $script.path = function (p) {\n    scriptpath = p\n  }\n  $script.urlArgs = function (str) {\n    urlArgs = str;\n  }\n  $script.ready = function (deps, ready, req) {\n    deps = deps[push] ? deps : [deps]\n    var missing = [];\n    !each(deps, function (dep) {\n      list[dep] || missing[push](dep);\n    }) && every(deps, function (dep) {return list[dep]}) ?\n      ready() : !function (key) {\n      delay[key] = delay[key] || []\n      delay[key][push](ready)\n      req && req(missing)\n    }(deps.join('|'))\n    return $script\n  }\n\n  $script.done = function (idOrDone) {\n    $script([null], idOrDone)\n  }\n\n  return $script\n});\n","module.exports = debounce\n\nfunction debounce (fn, delay, at_start, guarantee) {\n  var timeout\n  var args\n  var self\n\n  return function debounced () {\n    self = this\n    args = Array.prototype.slice.call(arguments)\n\n    if (timeout && (at_start || guarantee)) {\n      return\n    } else if (!at_start) {\n      clear()\n\n      timeout = setTimeout(run, delay)\n      return timeout\n    }\n\n    timeout = setTimeout(clear, delay)\n    fn.apply(self, args)\n\n    function run () {\n      clear()\n      fn.apply(self, args)\n    }\n\n    function clear () {\n      clearTimeout(timeout)\n      timeout = null\n    }\n  }\n}\n","/**\n * EvEmitter v1.1.0\n * Lil' event emitter\n * MIT License\n */\n\n/* jshint unused: true, undef: true, strict: true */\n\n( function( global, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, window */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD - RequireJS\n    define( factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory();\n  } else {\n    // Browser globals\n    global.EvEmitter = factory();\n  }\n\n}( typeof window != 'undefined' ? window : this, function() {\n\n\"use strict\";\n\nfunction EvEmitter() {}\n\nvar proto = EvEmitter.prototype;\n\nproto.on = function( eventName, listener ) {\n  if ( !eventName || !listener ) {\n    return;\n  }\n  // set events hash\n  var events = this._events = this._events || {};\n  // set listeners array\n  var listeners = events[ eventName ] = events[ eventName ] || [];\n  // only add once\n  if ( listeners.indexOf( listener ) == -1 ) {\n    listeners.push( listener );\n  }\n\n  return this;\n};\n\nproto.once = function( eventName, listener ) {\n  if ( !eventName || !listener ) {\n    return;\n  }\n  // add event\n  this.on( eventName, listener );\n  // set once flag\n  // set onceEvents hash\n  var onceEvents = this._onceEvents = this._onceEvents || {};\n  // set onceListeners object\n  var onceListeners = onceEvents[ eventName ] = onceEvents[ eventName ] || {};\n  // set flag\n  onceListeners[ listener ] = true;\n\n  return this;\n};\n\nproto.off = function( eventName, listener ) {\n  var listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) {\n    return;\n  }\n  var index = listeners.indexOf( listener );\n  if ( index != -1 ) {\n    listeners.splice( index, 1 );\n  }\n\n  return this;\n};\n\nproto.emitEvent = function( eventName, args ) {\n  var listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) {\n    return;\n  }\n  // copy over to avoid interference if .off() in listener\n  listeners = listeners.slice(0);\n  args = args || [];\n  // once stuff\n  var onceListeners = this._onceEvents && this._onceEvents[ eventName ];\n\n  for ( var i=0; i < listeners.length; i++ ) {\n    var listener = listeners[i]\n    var isOnce = onceListeners && onceListeners[ listener ];\n    if ( isOnce ) {\n      // remove listener\n      // remove before trigger to prevent recursion\n      this.off( eventName, listener );\n      // unset once flag\n      delete onceListeners[ listener ];\n    }\n    // trigger listener\n    listener.apply( this, args );\n  }\n\n  return this;\n};\n\nproto.allOff = function() {\n  delete this._events;\n  delete this._onceEvents;\n};\n\nreturn EvEmitter;\n\n}));\n","/*!\n * getSize v2.0.3\n * measure size of elements\n * MIT license\n */\n\n/* jshint browser: true, strict: true, undef: true, unused: true */\n/* globals console: false */\n\n( function( window, factory ) {\n  /* jshint strict: false */ /* globals define, module */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.getSize = factory();\n  }\n\n})( window, function factory() {\n'use strict';\n\n// -------------------------- helpers -------------------------- //\n\n// get a number from a string, not a percentage\nfunction getStyleSize( value ) {\n  var num = parseFloat( value );\n  // not a percent like '100%', and a number\n  var isValid = value.indexOf('%') == -1 && !isNaN( num );\n  return isValid && num;\n}\n\nfunction noop() {}\n\nvar logError = typeof console == 'undefined' ? noop :\n  function( message ) {\n    console.error( message );\n  };\n\n// -------------------------- measurements -------------------------- //\n\nvar measurements = [\n  'paddingLeft',\n  'paddingRight',\n  'paddingTop',\n  'paddingBottom',\n  'marginLeft',\n  'marginRight',\n  'marginTop',\n  'marginBottom',\n  'borderLeftWidth',\n  'borderRightWidth',\n  'borderTopWidth',\n  'borderBottomWidth'\n];\n\nvar measurementsLength = measurements.length;\n\nfunction getZeroSize() {\n  var size = {\n    width: 0,\n    height: 0,\n    innerWidth: 0,\n    innerHeight: 0,\n    outerWidth: 0,\n    outerHeight: 0\n  };\n  for ( var i=0; i < measurementsLength; i++ ) {\n    var measurement = measurements[i];\n    size[ measurement ] = 0;\n  }\n  return size;\n}\n\n// -------------------------- getStyle -------------------------- //\n\n/**\n * getStyle, get style of element, check for Firefox bug\n * https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n */\nfunction getStyle( elem ) {\n  var style = getComputedStyle( elem );\n  if ( !style ) {\n    logError( 'Style returned ' + style +\n      '. Are you running this code in a hidden iframe on Firefox? ' +\n      'See https://bit.ly/getsizebug1' );\n  }\n  return style;\n}\n\n// -------------------------- setup -------------------------- //\n\nvar isSetup = false;\n\nvar isBoxSizeOuter;\n\n/**\n * setup\n * check isBoxSizerOuter\n * do on first getSize() rather than on page load for Firefox bug\n */\nfunction setup() {\n  // setup once\n  if ( isSetup ) {\n    return;\n  }\n  isSetup = true;\n\n  // -------------------------- box sizing -------------------------- //\n\n  /**\n   * Chrome & Safari measure the outer-width on style.width on border-box elems\n   * IE11 & Firefox<29 measures the inner-width\n   */\n  var div = document.createElement('div');\n  div.style.width = '200px';\n  div.style.padding = '1px 2px 3px 4px';\n  div.style.borderStyle = 'solid';\n  div.style.borderWidth = '1px 2px 3px 4px';\n  div.style.boxSizing = 'border-box';\n\n  var body = document.body || document.documentElement;\n  body.appendChild( div );\n  var style = getStyle( div );\n  // round value for browser zoom. desandro/masonry#928\n  isBoxSizeOuter = Math.round( getStyleSize( style.width ) ) == 200;\n  getSize.isBoxSizeOuter = isBoxSizeOuter;\n\n  body.removeChild( div );\n}\n\n// -------------------------- getSize -------------------------- //\n\nfunction getSize( elem ) {\n  setup();\n\n  // use querySeletor if elem is string\n  if ( typeof elem == 'string' ) {\n    elem = document.querySelector( elem );\n  }\n\n  // do not proceed on non-objects\n  if ( !elem || typeof elem != 'object' || !elem.nodeType ) {\n    return;\n  }\n\n  var style = getStyle( elem );\n\n  // if hidden, everything is 0\n  if ( style.display == 'none' ) {\n    return getZeroSize();\n  }\n\n  var size = {};\n  size.width = elem.offsetWidth;\n  size.height = elem.offsetHeight;\n\n  var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';\n\n  // get all measurements\n  for ( var i=0; i < measurementsLength; i++ ) {\n    var measurement = measurements[i];\n    var value = style[ measurement ];\n    var num = parseFloat( value );\n    // any 'auto', 'medium' value will be 0\n    size[ measurement ] = !isNaN( num ) ? num : 0;\n  }\n\n  var paddingWidth = size.paddingLeft + size.paddingRight;\n  var paddingHeight = size.paddingTop + size.paddingBottom;\n  var marginWidth = size.marginLeft + size.marginRight;\n  var marginHeight = size.marginTop + size.marginBottom;\n  var borderWidth = size.borderLeftWidth + size.borderRightWidth;\n  var borderHeight = size.borderTopWidth + size.borderBottomWidth;\n\n  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;\n\n  // overwrite width and height if we can get it from style\n  var styleWidth = getStyleSize( style.width );\n  if ( styleWidth !== false ) {\n    size.width = styleWidth +\n      // add padding and border unless it's already including it\n      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );\n  }\n\n  var styleHeight = getStyleSize( style.height );\n  if ( styleHeight !== false ) {\n    size.height = styleHeight +\n      // add padding and border unless it's already including it\n      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );\n  }\n\n  size.innerWidth = size.width - ( paddingWidth + borderWidth );\n  size.innerHeight = size.height - ( paddingHeight + borderHeight );\n\n  size.outerWidth = size.width + marginWidth;\n  size.outerHeight = size.height + marginHeight;\n\n  return size;\n}\n\nreturn getSize;\n\n});\n","/**\n * matchesSelector v2.0.2\n * matchesSelector( element, '.selector' )\n * MIT license\n */\n\n/*jshint browser: true, strict: true, undef: true, unused: true */\n\n( function( window, factory ) {\n  /*global define: false, module: false */\n  'use strict';\n  // universal module definition\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.matchesSelector = factory();\n  }\n\n}( window, function factory() {\n  'use strict';\n\n  var matchesMethod = ( function() {\n    var ElemProto = window.Element.prototype;\n    // check for the standard method name first\n    if ( ElemProto.matches ) {\n      return 'matches';\n    }\n    // check un-prefixed\n    if ( ElemProto.matchesSelector ) {\n      return 'matchesSelector';\n    }\n    // check vendor prefixes\n    var prefixes = [ 'webkit', 'moz', 'ms', 'o' ];\n\n    for ( var i=0; i < prefixes.length; i++ ) {\n      var prefix = prefixes[i];\n      var method = prefix + 'MatchesSelector';\n      if ( ElemProto[ method ] ) {\n        return method;\n      }\n    }\n  })();\n\n  return function matchesSelector( elem, selector ) {\n    return elem[ matchesMethod ]( selector );\n  };\n\n}));\n","/**\n * Fizzy UI utils v2.0.7\n * MIT license\n */\n\n/*jshint browser: true, undef: true, unused: true, strict: true */\n\n( function( window, factory ) {\n  // universal module definition\n  /*jshint strict: false */ /*globals define, module, require */\n\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      'desandro-matches-selector/matches-selector'\n    ], function( matchesSelector ) {\n      return factory( window, matchesSelector );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('desandro-matches-selector')\n    );\n  } else {\n    // browser global\n    window.fizzyUIUtils = factory(\n      window,\n      window.matchesSelector\n    );\n  }\n\n}( window, function factory( window, matchesSelector ) {\n\n'use strict';\n\nvar utils = {};\n\n// ----- extend ----- //\n\n// extends objects\nutils.extend = function( a, b ) {\n  for ( var prop in b ) {\n    a[ prop ] = b[ prop ];\n  }\n  return a;\n};\n\n// ----- modulo ----- //\n\nutils.modulo = function( num, div ) {\n  return ( ( num % div ) + div ) % div;\n};\n\n// ----- makeArray ----- //\n\nvar arraySlice = Array.prototype.slice;\n\n// turn element or nodeList into an array\nutils.makeArray = function( obj ) {\n  if ( Array.isArray( obj ) ) {\n    // use object if already an array\n    return obj;\n  }\n  // return empty array if undefined or null. #6\n  if ( obj === null || obj === undefined ) {\n    return [];\n  }\n\n  var isArrayLike = typeof obj == 'object' && typeof obj.length == 'number';\n  if ( isArrayLike ) {\n    // convert nodeList to array\n    return arraySlice.call( obj );\n  }\n\n  // array of single index\n  return [ obj ];\n};\n\n// ----- removeFrom ----- //\n\nutils.removeFrom = function( ary, obj ) {\n  var index = ary.indexOf( obj );\n  if ( index != -1 ) {\n    ary.splice( index, 1 );\n  }\n};\n\n// ----- getParent ----- //\n\nutils.getParent = function( elem, selector ) {\n  while ( elem.parentNode && elem != document.body ) {\n    elem = elem.parentNode;\n    if ( matchesSelector( elem, selector ) ) {\n      return elem;\n    }\n  }\n};\n\n// ----- getQueryElement ----- //\n\n// use element as selector string\nutils.getQueryElement = function( elem ) {\n  if ( typeof elem == 'string' ) {\n    return document.querySelector( elem );\n  }\n  return elem;\n};\n\n// ----- handleEvent ----- //\n\n// enable .ontype to trigger from .addEventListener( elem, 'type' )\nutils.handleEvent = function( event ) {\n  var method = 'on' + event.type;\n  if ( this[ method ] ) {\n    this[ method ]( event );\n  }\n};\n\n// ----- filterFindElements ----- //\n\nutils.filterFindElements = function( elems, selector ) {\n  // make array of elems\n  elems = utils.makeArray( elems );\n  var ffElems = [];\n\n  elems.forEach( function( elem ) {\n    // check that elem is an actual element\n    if ( !( elem instanceof HTMLElement ) ) {\n      return;\n    }\n    // add elem if no selector\n    if ( !selector ) {\n      ffElems.push( elem );\n      return;\n    }\n    // filter & find items if we have a selector\n    // filter\n    if ( matchesSelector( elem, selector ) ) {\n      ffElems.push( elem );\n    }\n    // find children\n    var childElems = elem.querySelectorAll( selector );\n    // concat childElems to filterFound array\n    for ( var i=0; i < childElems.length; i++ ) {\n      ffElems.push( childElems[i] );\n    }\n  });\n\n  return ffElems;\n};\n\n// ----- debounceMethod ----- //\n\nutils.debounceMethod = function( _class, methodName, threshold ) {\n  threshold = threshold || 100;\n  // original method\n  var method = _class.prototype[ methodName ];\n  var timeoutName = methodName + 'Timeout';\n\n  _class.prototype[ methodName ] = function() {\n    var timeout = this[ timeoutName ];\n    clearTimeout( timeout );\n\n    var args = arguments;\n    var _this = this;\n    this[ timeoutName ] = setTimeout( function() {\n      method.apply( _this, args );\n      delete _this[ timeoutName ];\n    }, threshold );\n  };\n};\n\n// ----- docReady ----- //\n\nutils.docReady = function( callback ) {\n  var readyState = document.readyState;\n  if ( readyState == 'complete' || readyState == 'interactive' ) {\n    // do async to allow for other scripts to run. metafizzy/flickity#441\n    setTimeout( callback );\n  } else {\n    document.addEventListener( 'DOMContentLoaded', callback );\n  }\n};\n\n// ----- htmlInit ----- //\n\n// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/\nutils.toDashed = function( str ) {\n  return str.replace( /(.)([A-Z])/g, function( match, $1, $2 ) {\n    return $1 + '-' + $2;\n  }).toLowerCase();\n};\n\nvar console = window.console;\n/**\n * allow user to initialize classes via [data-namespace] or .js-namespace class\n * htmlInit( Widget, 'widgetName' )\n * options are parsed from data-namespace-options\n */\nutils.htmlInit = function( WidgetClass, namespace ) {\n  utils.docReady( function() {\n    var dashedNamespace = utils.toDashed( namespace );\n    var dataAttr = 'data-' + dashedNamespace;\n    var dataAttrElems = document.querySelectorAll( '[' + dataAttr + ']' );\n    var jsDashElems = document.querySelectorAll( '.js-' + dashedNamespace );\n    var elems = utils.makeArray( dataAttrElems )\n      .concat( utils.makeArray( jsDashElems ) );\n    var dataOptionsAttr = dataAttr + '-options';\n    var jQuery = window.jQuery;\n\n    elems.forEach( function( elem ) {\n      var attr = elem.getAttribute( dataAttr ) ||\n        elem.getAttribute( dataOptionsAttr );\n      var options;\n      try {\n        options = attr && JSON.parse( attr );\n      } catch ( error ) {\n        // log error, do not initialize\n        if ( console ) {\n          console.error( 'Error parsing ' + dataAttr + ' on ' + elem.className +\n          ': ' + error );\n        }\n        return;\n      }\n      // initialize\n      var instance = new WidgetClass( elem, options );\n      // make available via $().data('namespace')\n      if ( jQuery ) {\n        jQuery.data( elem, namespace, instance );\n      }\n    });\n\n  });\n};\n\n// -----  ----- //\n\nreturn utils;\n\n}));\n","// Flickity.Cell\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      'get-size/get-size'\n    ], function( getSize ) {\n      return factory( window, getSize );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('get-size')\n    );\n  } else {\n    // browser global\n    window.Flickity = window.Flickity || {};\n    window.Flickity.Cell = factory(\n      window,\n      window.getSize\n    );\n  }\n\n}( window, function factory( window, getSize ) {\n\n'use strict';\n\nfunction Cell( elem, parent ) {\n  this.element = elem;\n  this.parent = parent;\n\n  this.create();\n}\n\nvar proto = Cell.prototype;\n\nproto.create = function() {\n  this.element.style.position = 'absolute';\n  this.element.setAttribute( 'aria-selected', 'false' );\n  this.x = 0;\n  this.shift = 0;\n};\n\nproto.destroy = function() {\n  // reset style\n  this.element.style.position = '';\n  var side = this.parent.originSide;\n  this.element.removeAttribute('aria-selected');\n  this.element.style[ side ] = '';\n};\n\nproto.getSize = function() {\n  this.size = getSize( this.element );\n};\n\nproto.setPosition = function( x ) {\n  this.x = x;\n  this.updateTarget();\n  this.renderPosition( x );\n};\n\n// setDefaultTarget v1 method, backwards compatibility, remove in v3\nproto.updateTarget = proto.setDefaultTarget = function() {\n  var marginProperty = this.parent.originSide == 'left' ? 'marginLeft' : 'marginRight';\n  this.target = this.x + this.size[ marginProperty ] +\n    this.size.width * this.parent.cellAlign;\n};\n\nproto.renderPosition = function( x ) {\n  // render position of cell with in slider\n  var side = this.parent.originSide;\n  this.element.style[ side ] = this.parent.getPositionValue( x );\n};\n\n/**\n * @param {Integer} factor - 0, 1, or -1\n**/\nproto.wrapShift = function( shift ) {\n  this.shift = shift;\n  this.renderPosition( this.x + this.parent.slideableWidth * shift );\n};\n\nproto.remove = function() {\n  this.element.parentNode.removeChild( this.element );\n};\n\nreturn Cell;\n\n}));\n","// slide\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.Flickity = window.Flickity || {};\n    window.Flickity.Slide = factory();\n  }\n\n}( window, function factory() {\n'use strict';\n\nfunction Slide( parent ) {\n  this.parent = parent;\n  this.isOriginLeft = parent.originSide == 'left';\n  this.cells = [];\n  this.outerWidth = 0;\n  this.height = 0;\n}\n\nvar proto = Slide.prototype;\n\nproto.addCell = function( cell ) {\n  this.cells.push( cell );\n  this.outerWidth += cell.size.outerWidth;\n  this.height = Math.max( cell.size.outerHeight, this.height );\n  // first cell stuff\n  if ( this.cells.length == 1 ) {\n    this.x = cell.x; // x comes from first cell\n    var beginMargin = this.isOriginLeft ? 'marginLeft' : 'marginRight';\n    this.firstMargin = cell.size[ beginMargin ];\n  }\n};\n\nproto.updateTarget = function() {\n  var endMargin = this.isOriginLeft ? 'marginRight' : 'marginLeft';\n  var lastCell = this.getLastCell();\n  var lastMargin = lastCell ? lastCell.size[ endMargin ] : 0;\n  var slideWidth = this.outerWidth - ( this.firstMargin + lastMargin );\n  this.target = this.x + this.firstMargin + slideWidth * this.parent.cellAlign;\n};\n\nproto.getLastCell = function() {\n  return this.cells[ this.cells.length - 1 ];\n};\n\nproto.select = function() {\n  this.changeSelected( true );\n};\n\nproto.unselect = function() {\n  this.changeSelected( false );\n};\n\nproto.changeSelected = function( isSelected ) {\n  var classMethod = isSelected ? 'add' : 'remove';\n  this.cells.forEach( function( cell ) {\n    cell.element.classList[ classMethod ]('is-selected');\n    cell.element.setAttribute( 'aria-selected', isSelected.toString() );\n  });\n};\n\nproto.getCellElements = function() {\n  return this.cells.map( function( cell ) {\n    return cell.element;\n  });\n};\n\nreturn Slide;\n\n}));\n","// animate\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      'fizzy-ui-utils/utils'\n    ], function( utils ) {\n      return factory( window, utils );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('fizzy-ui-utils')\n    );\n  } else {\n    // browser global\n    window.Flickity = window.Flickity || {};\n    window.Flickity.animatePrototype = factory(\n      window,\n      window.fizzyUIUtils\n    );\n  }\n\n}( window, function factory( window, utils ) {\n\n'use strict';\n\n// -------------------------- animate -------------------------- //\n\nvar proto = {};\n\nproto.startAnimation = function() {\n  if ( this.isAnimating ) {\n    return;\n  }\n\n  this.isAnimating = true;\n  this.restingFrames = 0;\n  this.animate();\n};\n\nproto.animate = function() {\n  this.applyDragForce();\n  this.applySelectedAttraction();\n\n  var previousX = this.x;\n\n  this.integratePhysics();\n  this.positionSlider();\n  this.settle( previousX );\n  // animate next frame\n  if ( this.isAnimating ) {\n    var _this = this;\n    requestAnimationFrame( function animateFrame() {\n      _this.animate();\n    });\n  }\n};\n\nproto.positionSlider = function() {\n  var x = this.x;\n  // wrap position around\n  if ( this.options.wrapAround && this.cells.length > 1 ) {\n    x = utils.modulo( x, this.slideableWidth );\n    x = x - this.slideableWidth;\n    this.shiftWrapCells( x );\n  }\n\n  x = x + this.cursorPosition;\n  // reverse if right-to-left and using transform\n  x = this.options.rightToLeft ? -x : x;\n  var value = this.getPositionValue( x );\n  // use 3D tranforms for hardware acceleration on iOS\n  // but use 2D when settled, for better font-rendering\n  this.slider.style.transform = this.isAnimating ?\n    'translate3d(' + value + ',0,0)' : 'translateX(' + value + ')';\n\n  // scroll event\n  var firstSlide = this.slides[0];\n  if ( firstSlide ) {\n    var positionX = -this.x - firstSlide.target;\n    var progress = positionX / this.slidesWidth;\n    this.dispatchEvent( 'scroll', null, [ progress, positionX ] );\n  }\n};\n\nproto.positionSliderAtSelected = function() {\n  if ( !this.cells.length ) {\n    return;\n  }\n  this.x = -this.selectedSlide.target;\n  this.velocity = 0; // stop wobble\n  this.positionSlider();\n};\n\nproto.getPositionValue = function( position ) {\n  if ( this.options.percentPosition ) {\n    // percent position, round to 2 digits, like 12.34%\n    return ( Math.round( ( position / this.size.innerWidth ) * 10000 ) * 0.01 )+ '%';\n  } else {\n    // pixel positioning\n    return Math.round( position ) + 'px';\n  }\n};\n\nproto.settle = function( previousX ) {\n  // keep track of frames where x hasn't moved\n  if ( !this.isPointerDown && Math.round( this.x * 100 ) == Math.round( previousX * 100 ) ) {\n    this.restingFrames++;\n  }\n  // stop animating if resting for 3 or more frames\n  if ( this.restingFrames > 2 ) {\n    this.isAnimating = false;\n    delete this.isFreeScrolling;\n    // render position with translateX when settled\n    this.positionSlider();\n    this.dispatchEvent( 'settle', null, [ this.selectedIndex ] );\n  }\n};\n\nproto.shiftWrapCells = function( x ) {\n  // shift before cells\n  var beforeGap = this.cursorPosition + x;\n  this._shiftCells( this.beforeShiftCells, beforeGap, -1 );\n  // shift after cells\n  var afterGap = this.size.innerWidth - ( x + this.slideableWidth + this.cursorPosition );\n  this._shiftCells( this.afterShiftCells, afterGap, 1 );\n};\n\nproto._shiftCells = function( cells, gap, shift ) {\n  for ( var i=0; i < cells.length; i++ ) {\n    var cell = cells[i];\n    var cellShift = gap > 0 ? shift : 0;\n    cell.wrapShift( cellShift );\n    gap -= cell.size.outerWidth;\n  }\n};\n\nproto._unshiftCells = function( cells ) {\n  if ( !cells || !cells.length ) {\n    return;\n  }\n  for ( var i=0; i < cells.length; i++ ) {\n    cells[i].wrapShift( 0 );\n  }\n};\n\n// -------------------------- physics -------------------------- //\n\nproto.integratePhysics = function() {\n  this.x += this.velocity;\n  this.velocity *= this.getFrictionFactor();\n};\n\nproto.applyForce = function( force ) {\n  this.velocity += force;\n};\n\nproto.getFrictionFactor = function() {\n  return 1 - this.options[ this.isFreeScrolling ? 'freeScrollFriction' : 'friction' ];\n};\n\nproto.getRestingPosition = function() {\n  // my thanks to Steven Wittens, who simplified this math greatly\n  return this.x + this.velocity / ( 1 - this.getFrictionFactor() );\n};\n\nproto.applyDragForce = function() {\n  if ( !this.isDraggable || !this.isPointerDown ) {\n    return;\n  }\n  // change the position to drag position by applying force\n  var dragVelocity = this.dragX - this.x;\n  var dragForce = dragVelocity - this.velocity;\n  this.applyForce( dragForce );\n};\n\nproto.applySelectedAttraction = function() {\n  // do not attract if pointer down or no slides\n  var dragDown = this.isDraggable && this.isPointerDown;\n  if ( dragDown || this.isFreeScrolling || !this.slides.length ) {\n    return;\n  }\n  var distance = this.selectedSlide.target * -1 - this.x;\n  var force = distance * this.options.selectedAttraction;\n  this.applyForce( force );\n};\n\nreturn proto;\n\n}));\n","// Flickity main\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      'ev-emitter/ev-emitter',\n      'get-size/get-size',\n      'fizzy-ui-utils/utils',\n      './cell',\n      './slide',\n      './animate'\n    ], function( EvEmitter, getSize, utils, Cell, Slide, animatePrototype ) {\n      return factory( window, EvEmitter, getSize, utils, Cell, Slide, animatePrototype );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('ev-emitter'),\n      require('get-size'),\n      require('fizzy-ui-utils'),\n      require('./cell'),\n      require('./slide'),\n      require('./animate')\n    );\n  } else {\n    // browser global\n    var _Flickity = window.Flickity;\n\n    window.Flickity = factory(\n      window,\n      window.EvEmitter,\n      window.getSize,\n      window.fizzyUIUtils,\n      _Flickity.Cell,\n      _Flickity.Slide,\n      _Flickity.animatePrototype\n    );\n  }\n\n}( window, function factory( window, EvEmitter, getSize,\n  utils, Cell, Slide, animatePrototype ) {\n\n'use strict';\n\n// vars\nvar jQuery = window.jQuery;\nvar getComputedStyle = window.getComputedStyle;\nvar console = window.console;\n\nfunction moveElements( elems, toElem ) {\n  elems = utils.makeArray( elems );\n  while ( elems.length ) {\n    toElem.appendChild( elems.shift() );\n  }\n}\n\n// -------------------------- Flickity -------------------------- //\n\n// globally unique identifiers\nvar GUID = 0;\n// internal store of all Flickity intances\nvar instances = {};\n\nfunction Flickity( element, options ) {\n  var queryElement = utils.getQueryElement( element );\n  if ( !queryElement ) {\n    if ( console ) {\n      console.error( 'Bad element for Flickity: ' + ( queryElement || element ) );\n    }\n    return;\n  }\n  this.element = queryElement;\n  // do not initialize twice on same element\n  if ( this.element.flickityGUID ) {\n    var instance = instances[ this.element.flickityGUID ];\n    instance.option( options );\n    return instance;\n  }\n\n  // add jQuery\n  if ( jQuery ) {\n    this.$element = jQuery( this.element );\n  }\n  // options\n  this.options = utils.extend( {}, this.constructor.defaults );\n  this.option( options );\n\n  // kick things off\n  this._create();\n}\n\nFlickity.defaults = {\n  accessibility: true,\n  // adaptiveHeight: false,\n  cellAlign: 'center',\n  // cellSelector: undefined,\n  // contain: false,\n  freeScrollFriction: 0.075, // friction when free-scrolling\n  friction: 0.28, // friction when selecting\n  namespaceJQueryEvents: true,\n  // initialIndex: 0,\n  percentPosition: true,\n  resize: true,\n  selectedAttraction: 0.025,\n  setGallerySize: true\n  // watchCSS: false,\n  // wrapAround: false\n};\n\n// hash of methods triggered on _create()\nFlickity.createMethods = [];\n\nvar proto = Flickity.prototype;\n// inherit EventEmitter\nutils.extend( proto, EvEmitter.prototype );\n\nproto._create = function() {\n  // add id for Flickity.data\n  var id = this.guid = ++GUID;\n  this.element.flickityGUID = id; // expando\n  instances[ id ] = this; // associate via id\n  // initial properties\n  this.selectedIndex = 0;\n  // how many frames slider has been in same position\n  this.restingFrames = 0;\n  // initial physics properties\n  this.x = 0;\n  this.velocity = 0;\n  this.originSide = this.options.rightToLeft ? 'right' : 'left';\n  // create viewport & slider\n  this.viewport = document.createElement('div');\n  this.viewport.className = 'flickity-viewport';\n  this._createSlider();\n\n  if ( this.options.resize || this.options.watchCSS ) {\n    window.addEventListener( 'resize', this );\n  }\n\n  // add listeners from on option\n  for ( var eventName in this.options.on ) {\n    var listener = this.options.on[ eventName ];\n    this.on( eventName, listener );\n  }\n\n  Flickity.createMethods.forEach( function( method ) {\n    this[ method ]();\n  }, this );\n\n  if ( this.options.watchCSS ) {\n    this.watchCSS();\n  } else {\n    this.activate();\n  }\n\n};\n\n/**\n * set options\n * @param {Object} opts\n */\nproto.option = function( opts ) {\n  utils.extend( this.options, opts );\n};\n\nproto.activate = function() {\n  if ( this.isActive ) {\n    return;\n  }\n  this.isActive = true;\n  this.element.classList.add('flickity-enabled');\n  if ( this.options.rightToLeft ) {\n    this.element.classList.add('flickity-rtl');\n  }\n\n  this.getSize();\n  // move initial cell elements so they can be loaded as cells\n  var cellElems = this._filterFindCellElements( this.element.children );\n  moveElements( cellElems, this.slider );\n  this.viewport.appendChild( this.slider );\n  this.element.appendChild( this.viewport );\n  // get cells from children\n  this.reloadCells();\n\n  if ( this.options.accessibility ) {\n    // allow element to focusable\n    this.element.tabIndex = 0;\n    // listen for key presses\n    this.element.addEventListener( 'keydown', this );\n  }\n\n  this.emitEvent('activate');\n\n  var index;\n  var initialIndex = this.options.initialIndex;\n  if ( this.isInitActivated ) {\n    index = this.selectedIndex;\n  } else if ( initialIndex !== undefined ) {\n    index = this.cells[ initialIndex ] ? initialIndex : 0;\n  } else {\n    index = 0;\n  }\n  // select instantly\n  this.select( index, false, true );\n  // flag for initial activation, for using initialIndex\n  this.isInitActivated = true;\n  // ready event. #493\n  this.dispatchEvent('ready');\n};\n\n// slider positions the cells\nproto._createSlider = function() {\n  // slider element does all the positioning\n  var slider = document.createElement('div');\n  slider.className = 'flickity-slider';\n  slider.style[ this.originSide ] = 0;\n  this.slider = slider;\n};\n\nproto._filterFindCellElements = function( elems ) {\n  return utils.filterFindElements( elems, this.options.cellSelector );\n};\n\n// goes through all children\nproto.reloadCells = function() {\n  // collection of item elements\n  this.cells = this._makeCells( this.slider.children );\n  this.positionCells();\n  this._getWrapShiftCells();\n  this.setGallerySize();\n};\n\n/**\n * turn elements into Flickity.Cells\n * @param {Array or NodeList or HTMLElement} elems\n * @returns {Array} items - collection of new Flickity Cells\n */\nproto._makeCells = function( elems ) {\n  var cellElems = this._filterFindCellElements( elems );\n\n  // create new Flickity for collection\n  var cells = cellElems.map( function( cellElem ) {\n    return new Cell( cellElem, this );\n  }, this );\n\n  return cells;\n};\n\nproto.getLastCell = function() {\n  return this.cells[ this.cells.length - 1 ];\n};\n\nproto.getLastSlide = function() {\n  return this.slides[ this.slides.length - 1 ];\n};\n\n// positions all cells\nproto.positionCells = function() {\n  // size all cells\n  this._sizeCells( this.cells );\n  // position all cells\n  this._positionCells( 0 );\n};\n\n/**\n * position certain cells\n * @param {Integer} index - which cell to start with\n */\nproto._positionCells = function( index ) {\n  index = index || 0;\n  // also measure maxCellHeight\n  // start 0 if positioning all cells\n  this.maxCellHeight = index ? this.maxCellHeight || 0 : 0;\n  var cellX = 0;\n  // get cellX\n  if ( index > 0 ) {\n    var startCell = this.cells[ index - 1 ];\n    cellX = startCell.x + startCell.size.outerWidth;\n  }\n  var len = this.cells.length;\n  for ( var i=index; i < len; i++ ) {\n    var cell = this.cells[i];\n    cell.setPosition( cellX );\n    cellX += cell.size.outerWidth;\n    this.maxCellHeight = Math.max( cell.size.outerHeight, this.maxCellHeight );\n  }\n  // keep track of cellX for wrap-around\n  this.slideableWidth = cellX;\n  // slides\n  this.updateSlides();\n  // contain slides target\n  this._containSlides();\n  // update slidesWidth\n  this.slidesWidth = len ? this.getLastSlide().target - this.slides[0].target : 0;\n};\n\n/**\n * cell.getSize() on multiple cells\n * @param {Array} cells\n */\nproto._sizeCells = function( cells ) {\n  cells.forEach( function( cell ) {\n    cell.getSize();\n  });\n};\n\n// --------------------------  -------------------------- //\n\nproto.updateSlides = function() {\n  this.slides = [];\n  if ( !this.cells.length ) {\n    return;\n  }\n\n  var slide = new Slide( this );\n  this.slides.push( slide );\n  var isOriginLeft = this.originSide == 'left';\n  var nextMargin = isOriginLeft ? 'marginRight' : 'marginLeft';\n\n  var canCellFit = this._getCanCellFit();\n\n  this.cells.forEach( function( cell, i ) {\n    // just add cell if first cell in slide\n    if ( !slide.cells.length ) {\n      slide.addCell( cell );\n      return;\n    }\n\n    var slideWidth = ( slide.outerWidth - slide.firstMargin ) +\n      ( cell.size.outerWidth - cell.size[ nextMargin ] );\n\n    if ( canCellFit.call( this, i, slideWidth ) ) {\n      slide.addCell( cell );\n    } else {\n      // doesn't fit, new slide\n      slide.updateTarget();\n\n      slide = new Slide( this );\n      this.slides.push( slide );\n      slide.addCell( cell );\n    }\n  }, this );\n  // last slide\n  slide.updateTarget();\n  // update .selectedSlide\n  this.updateSelectedSlide();\n};\n\nproto._getCanCellFit = function() {\n  var groupCells = this.options.groupCells;\n  if ( !groupCells ) {\n    return function() {\n      return false;\n    };\n  } else if ( typeof groupCells == 'number' ) {\n    // group by number. 3 -> [0,1,2], [3,4,5], ...\n    var number = parseInt( groupCells, 10 );\n    return function( i ) {\n      return ( i % number ) !== 0;\n    };\n  }\n  // default, group by width of slide\n  // parse '75%\n  var percentMatch = typeof groupCells == 'string' &&\n    groupCells.match(/^(\\d+)%$/);\n  var percent = percentMatch ? parseInt( percentMatch[1], 10 ) / 100 : 1;\n  return function( i, slideWidth ) {\n    return slideWidth <= ( this.size.innerWidth + 1 ) * percent;\n  };\n};\n\n// alias _init for jQuery plugin .flickity()\nproto._init =\nproto.reposition = function() {\n  this.positionCells();\n  this.positionSliderAtSelected();\n};\n\nproto.getSize = function() {\n  this.size = getSize( this.element );\n  this.setCellAlign();\n  this.cursorPosition = this.size.innerWidth * this.cellAlign;\n};\n\nvar cellAlignShorthands = {\n  // cell align, then based on origin side\n  center: {\n    left: 0.5,\n    right: 0.5\n  },\n  left: {\n    left: 0,\n    right: 1\n  },\n  right: {\n    right: 0,\n    left: 1\n  }\n};\n\nproto.setCellAlign = function() {\n  var shorthand = cellAlignShorthands[ this.options.cellAlign ];\n  this.cellAlign = shorthand ? shorthand[ this.originSide ] : this.options.cellAlign;\n};\n\nproto.setGallerySize = function() {\n  if ( this.options.setGallerySize ) {\n    var height = this.options.adaptiveHeight && this.selectedSlide ?\n      this.selectedSlide.height : this.maxCellHeight;\n    this.viewport.style.height = height + 'px';\n  }\n};\n\nproto._getWrapShiftCells = function() {\n  // only for wrap-around\n  if ( !this.options.wrapAround ) {\n    return;\n  }\n  // unshift previous cells\n  this._unshiftCells( this.beforeShiftCells );\n  this._unshiftCells( this.afterShiftCells );\n  // get before cells\n  // initial gap\n  var gapX = this.cursorPosition;\n  var cellIndex = this.cells.length - 1;\n  this.beforeShiftCells = this._getGapCells( gapX, cellIndex, -1 );\n  // get after cells\n  // ending gap between last cell and end of gallery viewport\n  gapX = this.size.innerWidth - this.cursorPosition;\n  // start cloning at first cell, working forwards\n  this.afterShiftCells = this._getGapCells( gapX, 0, 1 );\n};\n\nproto._getGapCells = function( gapX, cellIndex, increment ) {\n  // keep adding cells until the cover the initial gap\n  var cells = [];\n  while ( gapX > 0 ) {\n    var cell = this.cells[ cellIndex ];\n    if ( !cell ) {\n      break;\n    }\n    cells.push( cell );\n    cellIndex += increment;\n    gapX -= cell.size.outerWidth;\n  }\n  return cells;\n};\n\n// ----- contain ----- //\n\n// contain cell targets so no excess sliding\nproto._containSlides = function() {\n  if ( !this.options.contain || this.options.wrapAround || !this.cells.length ) {\n    return;\n  }\n  var isRightToLeft = this.options.rightToLeft;\n  var beginMargin = isRightToLeft ? 'marginRight' : 'marginLeft';\n  var endMargin = isRightToLeft ? 'marginLeft' : 'marginRight';\n  var contentWidth = this.slideableWidth - this.getLastCell().size[ endMargin ];\n  // content is less than gallery size\n  var isContentSmaller = contentWidth < this.size.innerWidth;\n  // bounds\n  var beginBound = this.cursorPosition + this.cells[0].size[ beginMargin ];\n  var endBound = contentWidth - this.size.innerWidth * ( 1 - this.cellAlign );\n  // contain each cell target\n  this.slides.forEach( function( slide ) {\n    if ( isContentSmaller ) {\n      // all cells fit inside gallery\n      slide.target = contentWidth * this.cellAlign;\n    } else {\n      // contain to bounds\n      slide.target = Math.max( slide.target, beginBound );\n      slide.target = Math.min( slide.target, endBound );\n    }\n  }, this );\n};\n\n// -----  ----- //\n\n/**\n * emits events via eventEmitter and jQuery events\n * @param {String} type - name of event\n * @param {Event} event - original event\n * @param {Array} args - extra arguments\n */\nproto.dispatchEvent = function( type, event, args ) {\n  var emitArgs = event ? [ event ].concat( args ) : args;\n  this.emitEvent( type, emitArgs );\n\n  if ( jQuery && this.$element ) {\n    // default trigger with type if no event\n    type += this.options.namespaceJQueryEvents ? '.flickity' : '';\n    var $event = type;\n    if ( event ) {\n      // create jQuery event\n      var jQEvent = jQuery.Event( event );\n      jQEvent.type = type;\n      $event = jQEvent;\n    }\n    this.$element.trigger( $event, args );\n  }\n};\n\n// -------------------------- select -------------------------- //\n\n/**\n * @param {Integer} index - index of the slide\n * @param {Boolean} isWrap - will wrap-around to last/first if at the end\n * @param {Boolean} isInstant - will immediately set position at selected cell\n */\nproto.select = function( index, isWrap, isInstant ) {\n  if ( !this.isActive ) {\n    return;\n  }\n  index = parseInt( index, 10 );\n  this._wrapSelect( index );\n\n  if ( this.options.wrapAround || isWrap ) {\n    index = utils.modulo( index, this.slides.length );\n  }\n  // bail if invalid index\n  if ( !this.slides[ index ] ) {\n    return;\n  }\n  var prevIndex = this.selectedIndex;\n  this.selectedIndex = index;\n  this.updateSelectedSlide();\n  if ( isInstant ) {\n    this.positionSliderAtSelected();\n  } else {\n    this.startAnimation();\n  }\n  if ( this.options.adaptiveHeight ) {\n    this.setGallerySize();\n  }\n  // events\n  this.dispatchEvent( 'select', null, [ index ] );\n  // change event if new index\n  if ( index != prevIndex ) {\n    this.dispatchEvent( 'change', null, [ index ] );\n  }\n  // old v1 event name, remove in v3\n  this.dispatchEvent('cellSelect');\n};\n\n// wraps position for wrapAround, to move to closest slide. #113\nproto._wrapSelect = function( index ) {\n  var len = this.slides.length;\n  var isWrapping = this.options.wrapAround && len > 1;\n  if ( !isWrapping ) {\n    return index;\n  }\n  var wrapIndex = utils.modulo( index, len );\n  // go to shortest\n  var delta = Math.abs( wrapIndex - this.selectedIndex );\n  var backWrapDelta = Math.abs( ( wrapIndex + len ) - this.selectedIndex );\n  var forewardWrapDelta = Math.abs( ( wrapIndex - len ) - this.selectedIndex );\n  if ( !this.isDragSelect && backWrapDelta < delta ) {\n    index += len;\n  } else if ( !this.isDragSelect && forewardWrapDelta < delta ) {\n    index -= len;\n  }\n  // wrap position so slider is within normal area\n  if ( index < 0 ) {\n    this.x -= this.slideableWidth;\n  } else if ( index >= len ) {\n    this.x += this.slideableWidth;\n  }\n};\n\nproto.previous = function( isWrap, isInstant ) {\n  this.select( this.selectedIndex - 1, isWrap, isInstant );\n};\n\nproto.next = function( isWrap, isInstant ) {\n  this.select( this.selectedIndex + 1, isWrap, isInstant );\n};\n\nproto.updateSelectedSlide = function() {\n  var slide = this.slides[ this.selectedIndex ];\n  // selectedIndex could be outside of slides, if triggered before resize()\n  if ( !slide ) {\n    return;\n  }\n  // unselect previous selected slide\n  this.unselectSelectedSlide();\n  // update new selected slide\n  this.selectedSlide = slide;\n  slide.select();\n  this.selectedCells = slide.cells;\n  this.selectedElements = slide.getCellElements();\n  // HACK: selectedCell & selectedElement is first cell in slide, backwards compatibility\n  // Remove in v3?\n  this.selectedCell = slide.cells[0];\n  this.selectedElement = this.selectedElements[0];\n};\n\nproto.unselectSelectedSlide = function() {\n  if ( this.selectedSlide ) {\n    this.selectedSlide.unselect();\n  }\n};\n\n/**\n * select slide from number or cell element\n * @param {Element or Number} elem\n */\nproto.selectCell = function( value, isWrap, isInstant ) {\n  // get cell\n  var cell = this.queryCell( value );\n  if ( !cell ) {\n    return;\n  }\n\n  var index = this.getCellSlideIndex( cell );\n  this.select( index, isWrap, isInstant );\n};\n\nproto.getCellSlideIndex = function( cell ) {\n  // get index of slides that has cell\n  for ( var i=0; i < this.slides.length; i++ ) {\n    var slide = this.slides[i];\n    var index = slide.cells.indexOf( cell );\n    if ( index != -1 ) {\n      return i;\n    }\n  }\n};\n\n// -------------------------- get cells -------------------------- //\n\n/**\n * get Flickity.Cell, given an Element\n * @param {Element} elem\n * @returns {Flickity.Cell} item\n */\nproto.getCell = function( elem ) {\n  // loop through cells to get the one that matches\n  for ( var i=0; i < this.cells.length; i++ ) {\n    var cell = this.cells[i];\n    if ( cell.element == elem ) {\n      return cell;\n    }\n  }\n};\n\n/**\n * get collection of Flickity.Cells, given Elements\n * @param {Element, Array, NodeList} elems\n * @returns {Array} cells - Flickity.Cells\n */\nproto.getCells = function( elems ) {\n  elems = utils.makeArray( elems );\n  var cells = [];\n  elems.forEach( function( elem ) {\n    var cell = this.getCell( elem );\n    if ( cell ) {\n      cells.push( cell );\n    }\n  }, this );\n  return cells;\n};\n\n/**\n * get cell elements\n * @returns {Array} cellElems\n */\nproto.getCellElements = function() {\n  return this.cells.map( function( cell ) {\n    return cell.element;\n  });\n};\n\n/**\n * get parent cell from an element\n * @param {Element} elem\n * @returns {Flickit.Cell} cell\n */\nproto.getParentCell = function( elem ) {\n  // first check if elem is cell\n  var cell = this.getCell( elem );\n  if ( cell ) {\n    return cell;\n  }\n  // try to get parent cell elem\n  elem = utils.getParent( elem, '.flickity-slider > *' );\n  return this.getCell( elem );\n};\n\n/**\n * get cells adjacent to a slide\n * @param {Integer} adjCount - number of adjacent slides\n * @param {Integer} index - index of slide to start\n * @returns {Array} cells - array of Flickity.Cells\n */\nproto.getAdjacentCellElements = function( adjCount, index ) {\n  if ( !adjCount ) {\n    return this.selectedSlide.getCellElements();\n  }\n  index = index === undefined ? this.selectedIndex : index;\n\n  var len = this.slides.length;\n  if ( 1 + ( adjCount * 2 ) >= len ) {\n    return this.getCellElements();\n  }\n\n  var cellElems = [];\n  for ( var i = index - adjCount; i <= index + adjCount ; i++ ) {\n    var slideIndex = this.options.wrapAround ? utils.modulo( i, len ) : i;\n    var slide = this.slides[ slideIndex ];\n    if ( slide ) {\n      cellElems = cellElems.concat( slide.getCellElements() );\n    }\n  }\n  return cellElems;\n};\n\n/**\n * select slide from number or cell element\n * @param {Element, Selector String, or Number} selector\n */\nproto.queryCell = function( selector ) {\n  if ( typeof selector == 'number' ) {\n    // use number as index\n    return this.cells[ selector ];\n  }\n  if ( typeof selector == 'string' ) {\n    // use string as selector, get element\n    selector = this.element.querySelector( selector );\n  }\n  // get cell from element\n  return this.getCell( selector );\n};\n\n// -------------------------- events -------------------------- //\n\nproto.uiChange = function() {\n  this.emitEvent('uiChange');\n};\n\nproto.childUIPointerDown = function( event ) {\n  this.emitEvent( 'childUIPointerDown', [ event ] );\n};\n\n// ----- resize ----- //\n\nproto.onresize = function() {\n  this.watchCSS();\n  this.resize();\n};\n\nutils.debounceMethod( Flickity, 'onresize', 150 );\n\nproto.resize = function() {\n  if ( !this.isActive ) {\n    return;\n  }\n  this.getSize();\n  // wrap values\n  if ( this.options.wrapAround ) {\n    this.x = utils.modulo( this.x, this.slideableWidth );\n  }\n  this.positionCells();\n  this._getWrapShiftCells();\n  this.setGallerySize();\n  this.emitEvent('resize');\n  // update selected index for group slides, instant\n  // TODO: position can be lost between groups of various numbers\n  var selectedElement = this.selectedElements && this.selectedElements[0];\n  this.selectCell( selectedElement, false, true );\n};\n\n// watches the :after property, activates/deactivates\nproto.watchCSS = function() {\n  var watchOption = this.options.watchCSS;\n  if ( !watchOption ) {\n    return;\n  }\n\n  var afterContent = getComputedStyle( this.element, ':after' ).content;\n  // activate if :after { content: 'flickity' }\n  if ( afterContent.indexOf('flickity') != -1 ) {\n    this.activate();\n  } else {\n    this.deactivate();\n  }\n};\n\n// ----- keydown ----- //\n\n// go previous/next if left/right keys pressed\nproto.onkeydown = function( event ) {\n  // only work if element is in focus\n  var isNotFocused = document.activeElement && document.activeElement != this.element;\n  if ( !this.options.accessibility ||isNotFocused ) {\n    return;\n  }\n\n  var handler = Flickity.keyboardHandlers[ event.keyCode ];\n  if ( handler ) {\n    handler.call( this );\n  }\n};\n\nFlickity.keyboardHandlers = {\n  // left arrow\n  37: function() {\n    var leftMethod = this.options.rightToLeft ? 'next' : 'previous';\n    this.uiChange();\n    this[ leftMethod ]();\n  },\n  // right arrow\n  39: function() {\n    var rightMethod = this.options.rightToLeft ? 'previous' : 'next';\n    this.uiChange();\n    this[ rightMethod ]();\n  },\n};\n\n// ----- focus ----- //\n\nproto.focus = function() {\n  var prevScrollY = window.pageYOffset;\n  this.element.focus();\n  // hack to fix scroll jump after focus, #76\n  if ( window.pageYOffset != prevScrollY ) {\n    window.scrollTo( window.pageXOffset, prevScrollY );\n  }\n};\n\n// -------------------------- destroy -------------------------- //\n\n// deactivate all Flickity functionality, but keep stuff available\nproto.deactivate = function() {\n  if ( !this.isActive ) {\n    return;\n  }\n  this.element.classList.remove('flickity-enabled');\n  this.element.classList.remove('flickity-rtl');\n  this.unselectSelectedSlide();\n  // destroy cells\n  this.cells.forEach( function( cell ) {\n    cell.destroy();\n  });\n  this.element.removeChild( this.viewport );\n  // move child elements back into element\n  moveElements( this.slider.children, this.element );\n  if ( this.options.accessibility ) {\n    this.element.removeAttribute('tabIndex');\n    this.element.removeEventListener( 'keydown', this );\n  }\n  // set flags\n  this.isActive = false;\n  this.emitEvent('deactivate');\n};\n\nproto.destroy = function() {\n  this.deactivate();\n  window.removeEventListener( 'resize', this );\n  this.emitEvent('destroy');\n  if ( jQuery && this.$element ) {\n    jQuery.removeData( this.element, 'flickity' );\n  }\n  delete this.element.flickityGUID;\n  delete instances[ this.guid ];\n};\n\n// -------------------------- prototype -------------------------- //\n\nutils.extend( proto, animatePrototype );\n\n// -------------------------- extras -------------------------- //\n\n/**\n * get Flickity instance from element\n * @param {Element} elem\n * @returns {Flickity}\n */\nFlickity.data = function( elem ) {\n  elem = utils.getQueryElement( elem );\n  var id = elem && elem.flickityGUID;\n  return id && instances[ id ];\n};\n\nutils.htmlInit( Flickity, 'flickity' );\n\nif ( jQuery && jQuery.bridget ) {\n  jQuery.bridget( 'flickity', Flickity );\n}\n\n// set internal jQuery, for Webpack + jQuery v3, #478\nFlickity.setJQuery = function( jq ) {\n  jQuery = jq;\n};\n\nFlickity.Cell = Cell;\n\nreturn Flickity;\n\n}));\n","/*!\n * Unipointer v2.3.0\n * base class for doing one thing with pointer event\n * MIT license\n */\n\n/*jshint browser: true, undef: true, unused: true, strict: true */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*global define, module, require */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      'ev-emitter/ev-emitter'\n    ], function( EvEmitter ) {\n      return factory( window, EvEmitter );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('ev-emitter')\n    );\n  } else {\n    // browser global\n    window.Unipointer = factory(\n      window,\n      window.EvEmitter\n    );\n  }\n\n}( window, function factory( window, EvEmitter ) {\n\n'use strict';\n\nfunction noop() {}\n\nfunction Unipointer() {}\n\n// inherit EvEmitter\nvar proto = Unipointer.prototype = Object.create( EvEmitter.prototype );\n\nproto.bindStartEvent = function( elem ) {\n  this._bindStartEvent( elem, true );\n};\n\nproto.unbindStartEvent = function( elem ) {\n  this._bindStartEvent( elem, false );\n};\n\n/**\n * Add or remove start event\n * @param {Boolean} isAdd - remove if falsey\n */\nproto._bindStartEvent = function( elem, isAdd ) {\n  // munge isAdd, default to true\n  isAdd = isAdd === undefined ? true : isAdd;\n  var bindMethod = isAdd ? 'addEventListener' : 'removeEventListener';\n\n  // default to mouse events\n  var startEvent = 'mousedown';\n  if ( window.PointerEvent ) {\n    // Pointer Events\n    startEvent = 'pointerdown';\n  } else if ( 'ontouchstart' in window ) {\n    // Touch Events. iOS Safari\n    startEvent = 'touchstart';\n  }\n  elem[ bindMethod ]( startEvent, this );\n};\n\n// trigger handler methods for events\nproto.handleEvent = function( event ) {\n  var method = 'on' + event.type;\n  if ( this[ method ] ) {\n    this[ method ]( event );\n  }\n};\n\n// returns the touch that we're keeping track of\nproto.getTouch = function( touches ) {\n  for ( var i=0; i < touches.length; i++ ) {\n    var touch = touches[i];\n    if ( touch.identifier == this.pointerIdentifier ) {\n      return touch;\n    }\n  }\n};\n\n// ----- start event ----- //\n\nproto.onmousedown = function( event ) {\n  // dismiss clicks from right or middle buttons\n  var button = event.button;\n  if ( button && ( button !== 0 && button !== 1 ) ) {\n    return;\n  }\n  this._pointerDown( event, event );\n};\n\nproto.ontouchstart = function( event ) {\n  this._pointerDown( event, event.changedTouches[0] );\n};\n\nproto.onpointerdown = function( event ) {\n  this._pointerDown( event, event );\n};\n\n/**\n * pointer start\n * @param {Event} event\n * @param {Event or Touch} pointer\n */\nproto._pointerDown = function( event, pointer ) {\n  // dismiss right click and other pointers\n  // button = 0 is okay, 1-4 not\n  if ( event.button || this.isPointerDown ) {\n    return;\n  }\n\n  this.isPointerDown = true;\n  // save pointer identifier to match up touch events\n  this.pointerIdentifier = pointer.pointerId !== undefined ?\n    // pointerId for pointer events, touch.indentifier for touch events\n    pointer.pointerId : pointer.identifier;\n\n  this.pointerDown( event, pointer );\n};\n\nproto.pointerDown = function( event, pointer ) {\n  this._bindPostStartEvents( event );\n  this.emitEvent( 'pointerDown', [ event, pointer ] );\n};\n\n// hash of events to be bound after start event\nvar postStartEvents = {\n  mousedown: [ 'mousemove', 'mouseup' ],\n  touchstart: [ 'touchmove', 'touchend', 'touchcancel' ],\n  pointerdown: [ 'pointermove', 'pointerup', 'pointercancel' ],\n};\n\nproto._bindPostStartEvents = function( event ) {\n  if ( !event ) {\n    return;\n  }\n  // get proper events to match start event\n  var events = postStartEvents[ event.type ];\n  // bind events to node\n  events.forEach( function( eventName ) {\n    window.addEventListener( eventName, this );\n  }, this );\n  // save these arguments\n  this._boundPointerEvents = events;\n};\n\nproto._unbindPostStartEvents = function() {\n  // check for _boundEvents, in case dragEnd triggered twice (old IE8 bug)\n  if ( !this._boundPointerEvents ) {\n    return;\n  }\n  this._boundPointerEvents.forEach( function( eventName ) {\n    window.removeEventListener( eventName, this );\n  }, this );\n\n  delete this._boundPointerEvents;\n};\n\n// ----- move event ----- //\n\nproto.onmousemove = function( event ) {\n  this._pointerMove( event, event );\n};\n\nproto.onpointermove = function( event ) {\n  if ( event.pointerId == this.pointerIdentifier ) {\n    this._pointerMove( event, event );\n  }\n};\n\nproto.ontouchmove = function( event ) {\n  var touch = this.getTouch( event.changedTouches );\n  if ( touch ) {\n    this._pointerMove( event, touch );\n  }\n};\n\n/**\n * pointer move\n * @param {Event} event\n * @param {Event or Touch} pointer\n * @private\n */\nproto._pointerMove = function( event, pointer ) {\n  this.pointerMove( event, pointer );\n};\n\n// public\nproto.pointerMove = function( event, pointer ) {\n  this.emitEvent( 'pointerMove', [ event, pointer ] );\n};\n\n// ----- end event ----- //\n\n\nproto.onmouseup = function( event ) {\n  this._pointerUp( event, event );\n};\n\nproto.onpointerup = function( event ) {\n  if ( event.pointerId == this.pointerIdentifier ) {\n    this._pointerUp( event, event );\n  }\n};\n\nproto.ontouchend = function( event ) {\n  var touch = this.getTouch( event.changedTouches );\n  if ( touch ) {\n    this._pointerUp( event, touch );\n  }\n};\n\n/**\n * pointer up\n * @param {Event} event\n * @param {Event or Touch} pointer\n * @private\n */\nproto._pointerUp = function( event, pointer ) {\n  this._pointerDone();\n  this.pointerUp( event, pointer );\n};\n\n// public\nproto.pointerUp = function( event, pointer ) {\n  this.emitEvent( 'pointerUp', [ event, pointer ] );\n};\n\n// ----- pointer done ----- //\n\n// triggered on pointer up & pointer cancel\nproto._pointerDone = function() {\n  this._pointerReset();\n  this._unbindPostStartEvents();\n  this.pointerDone();\n};\n\nproto._pointerReset = function() {\n  // reset properties\n  this.isPointerDown = false;\n  delete this.pointerIdentifier;\n};\n\nproto.pointerDone = noop;\n\n// ----- pointer cancel ----- //\n\nproto.onpointercancel = function( event ) {\n  if ( event.pointerId == this.pointerIdentifier ) {\n    this._pointerCancel( event, event );\n  }\n};\n\nproto.ontouchcancel = function( event ) {\n  var touch = this.getTouch( event.changedTouches );\n  if ( touch ) {\n    this._pointerCancel( event, touch );\n  }\n};\n\n/**\n * pointer cancel\n * @param {Event} event\n * @param {Event or Touch} pointer\n * @private\n */\nproto._pointerCancel = function( event, pointer ) {\n  this._pointerDone();\n  this.pointerCancel( event, pointer );\n};\n\n// public\nproto.pointerCancel = function( event, pointer ) {\n  this.emitEvent( 'pointerCancel', [ event, pointer ] );\n};\n\n// -----  ----- //\n\n// utility function for getting x/y coords from event\nUnipointer.getPointerPoint = function( pointer ) {\n  return {\n    x: pointer.pageX,\n    y: pointer.pageY\n  };\n};\n\n// -----  ----- //\n\nreturn Unipointer;\n\n}));\n","/*!\n * Unidragger v2.3.0\n * Draggable base class\n * MIT license\n */\n\n/*jshint browser: true, unused: true, undef: true, strict: true */\n\n( function( window, factory ) {\n  // universal module definition\n  /*jshint strict: false */ /*globals define, module, require */\n\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      'unipointer/unipointer'\n    ], function( Unipointer ) {\n      return factory( window, Unipointer );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('unipointer')\n    );\n  } else {\n    // browser global\n    window.Unidragger = factory(\n      window,\n      window.Unipointer\n    );\n  }\n\n}( window, function factory( window, Unipointer ) {\n\n'use strict';\n\n// -------------------------- Unidragger -------------------------- //\n\nfunction Unidragger() {}\n\n// inherit Unipointer & EvEmitter\nvar proto = Unidragger.prototype = Object.create( Unipointer.prototype );\n\n// ----- bind start ----- //\n\nproto.bindHandles = function() {\n  this._bindHandles( true );\n};\n\nproto.unbindHandles = function() {\n  this._bindHandles( false );\n};\n\n/**\n * Add or remove start event\n * @param {Boolean} isAdd\n */\nproto._bindHandles = function( isAdd ) {\n  // munge isAdd, default to true\n  isAdd = isAdd === undefined ? true : isAdd;\n  // bind each handle\n  var bindMethod = isAdd ? 'addEventListener' : 'removeEventListener';\n  var touchAction = isAdd ? this._touchActionValue : '';\n  for ( var i=0; i < this.handles.length; i++ ) {\n    var handle = this.handles[i];\n    this._bindStartEvent( handle, isAdd );\n    handle[ bindMethod ]( 'click', this );\n    // touch-action: none to override browser touch gestures. metafizzy/flickity#540\n    if ( window.PointerEvent ) {\n      handle.style.touchAction = touchAction;\n    }\n  }\n};\n\n// prototype so it can be overwriteable by Flickity\nproto._touchActionValue = 'none';\n\n// ----- start event ----- //\n\n/**\n * pointer start\n * @param {Event} event\n * @param {Event or Touch} pointer\n */\nproto.pointerDown = function( event, pointer ) {\n  var isOkay = this.okayPointerDown( event );\n  if ( !isOkay ) {\n    return;\n  }\n  // track start event position\n  this.pointerDownPointer = pointer;\n\n  event.preventDefault();\n  this.pointerDownBlur();\n  // bind move and end events\n  this._bindPostStartEvents( event );\n  this.emitEvent( 'pointerDown', [ event, pointer ] );\n};\n\n// nodes that have text fields\nvar cursorNodes = {\n  TEXTAREA: true,\n  INPUT: true,\n  SELECT: true,\n  OPTION: true,\n};\n\n// input types that do not have text fields\nvar clickTypes = {\n  radio: true,\n  checkbox: true,\n  button: true,\n  submit: true,\n  image: true,\n  file: true,\n};\n\n// dismiss inputs with text fields. flickity#403, flickity#404\nproto.okayPointerDown = function( event ) {\n  var isCursorNode = cursorNodes[ event.target.nodeName ];\n  var isClickType = clickTypes[ event.target.type ];\n  var isOkay = !isCursorNode || isClickType;\n  if ( !isOkay ) {\n    this._pointerReset();\n  }\n  return isOkay;\n};\n\n// kludge to blur previously focused input\nproto.pointerDownBlur = function() {\n  var focused = document.activeElement;\n  // do not blur body for IE10, metafizzy/flickity#117\n  var canBlur = focused && focused.blur && focused != document.body;\n  if ( canBlur ) {\n    focused.blur();\n  }\n};\n\n// ----- move event ----- //\n\n/**\n * drag move\n * @param {Event} event\n * @param {Event or Touch} pointer\n */\nproto.pointerMove = function( event, pointer ) {\n  var moveVector = this._dragPointerMove( event, pointer );\n  this.emitEvent( 'pointerMove', [ event, pointer, moveVector ] );\n  this._dragMove( event, pointer, moveVector );\n};\n\n// base pointer move logic\nproto._dragPointerMove = function( event, pointer ) {\n  var moveVector = {\n    x: pointer.pageX - this.pointerDownPointer.pageX,\n    y: pointer.pageY - this.pointerDownPointer.pageY\n  };\n  // start drag if pointer has moved far enough to start drag\n  if ( !this.isDragging && this.hasDragStarted( moveVector ) ) {\n    this._dragStart( event, pointer );\n  }\n  return moveVector;\n};\n\n// condition if pointer has moved far enough to start drag\nproto.hasDragStarted = function( moveVector ) {\n  return Math.abs( moveVector.x ) > 3 || Math.abs( moveVector.y ) > 3;\n};\n\n// ----- end event ----- //\n\n/**\n * pointer up\n * @param {Event} event\n * @param {Event or Touch} pointer\n */\nproto.pointerUp = function( event, pointer ) {\n  this.emitEvent( 'pointerUp', [ event, pointer ] );\n  this._dragPointerUp( event, pointer );\n};\n\nproto._dragPointerUp = function( event, pointer ) {\n  if ( this.isDragging ) {\n    this._dragEnd( event, pointer );\n  } else {\n    // pointer didn't move enough for drag to start\n    this._staticClick( event, pointer );\n  }\n};\n\n// -------------------------- drag -------------------------- //\n\n// dragStart\nproto._dragStart = function( event, pointer ) {\n  this.isDragging = true;\n  // prevent clicks\n  this.isPreventingClicks = true;\n  this.dragStart( event, pointer );\n};\n\nproto.dragStart = function( event, pointer ) {\n  this.emitEvent( 'dragStart', [ event, pointer ] );\n};\n\n// dragMove\nproto._dragMove = function( event, pointer, moveVector ) {\n  // do not drag if not dragging yet\n  if ( !this.isDragging ) {\n    return;\n  }\n\n  this.dragMove( event, pointer, moveVector );\n};\n\nproto.dragMove = function( event, pointer, moveVector ) {\n  event.preventDefault();\n  this.emitEvent( 'dragMove', [ event, pointer, moveVector ] );\n};\n\n// dragEnd\nproto._dragEnd = function( event, pointer ) {\n  // set flags\n  this.isDragging = false;\n  // re-enable clicking async\n  setTimeout( function() {\n    delete this.isPreventingClicks;\n  }.bind( this ) );\n\n  this.dragEnd( event, pointer );\n};\n\nproto.dragEnd = function( event, pointer ) {\n  this.emitEvent( 'dragEnd', [ event, pointer ] );\n};\n\n// ----- onclick ----- //\n\n// handle all clicks and prevent clicks when dragging\nproto.onclick = function( event ) {\n  if ( this.isPreventingClicks ) {\n    event.preventDefault();\n  }\n};\n\n// ----- staticClick ----- //\n\n// triggered after pointer down & up with no/tiny movement\nproto._staticClick = function( event, pointer ) {\n  // ignore emulated mouse up clicks\n  if ( this.isIgnoringMouseUp && event.type == 'mouseup' ) {\n    return;\n  }\n\n  this.staticClick( event, pointer );\n\n  // set flag for emulated clicks 300ms after touchend\n  if ( event.type != 'mouseup' ) {\n    this.isIgnoringMouseUp = true;\n    // reset flag after 300ms\n    setTimeout( function() {\n      delete this.isIgnoringMouseUp;\n    }.bind( this ), 400 );\n  }\n};\n\nproto.staticClick = function( event, pointer ) {\n  this.emitEvent( 'staticClick', [ event, pointer ] );\n};\n\n// ----- utils ----- //\n\nUnidragger.getPointerPoint = Unipointer.getPointerPoint;\n\n// -----  ----- //\n\nreturn Unidragger;\n\n}));\n","// drag\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      './flickity',\n      'unidragger/unidragger',\n      'fizzy-ui-utils/utils'\n    ], function( Flickity, Unidragger, utils ) {\n      return factory( window, Flickity, Unidragger, utils );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('./flickity'),\n      require('unidragger'),\n      require('fizzy-ui-utils')\n    );\n  } else {\n    // browser global\n    window.Flickity = factory(\n      window,\n      window.Flickity,\n      window.Unidragger,\n      window.fizzyUIUtils\n    );\n  }\n\n}( window, function factory( window, Flickity, Unidragger, utils ) {\n\n'use strict';\n\n// ----- defaults ----- //\n\nutils.extend( Flickity.defaults, {\n  draggable: '>1',\n  dragThreshold: 3,\n});\n\n// ----- create ----- //\n\nFlickity.createMethods.push('_createDrag');\n\n// -------------------------- drag prototype -------------------------- //\n\nvar proto = Flickity.prototype;\nutils.extend( proto, Unidragger.prototype );\nproto._touchActionValue = 'pan-y';\n\n// --------------------------  -------------------------- //\n\nvar isTouch = 'createTouch' in document;\nvar isTouchmoveScrollCanceled = false;\n\nproto._createDrag = function() {\n  this.on( 'activate', this.onActivateDrag );\n  this.on( 'uiChange', this._uiChangeDrag );\n  this.on( 'childUIPointerDown', this._childUIPointerDownDrag );\n  this.on( 'deactivate', this.unbindDrag );\n  this.on( 'cellChange', this.updateDraggable );\n  // TODO updateDraggable on resize? if groupCells & slides change\n  // HACK - add seemingly innocuous handler to fix iOS 10 scroll behavior\n  // #457, RubaXa/Sortable#973\n  if ( isTouch && !isTouchmoveScrollCanceled ) {\n    window.addEventListener( 'touchmove', function() {});\n    isTouchmoveScrollCanceled = true;\n  }\n};\n\nproto.onActivateDrag = function() {\n  this.handles = [ this.viewport ];\n  this.bindHandles();\n  this.updateDraggable();\n};\n\nproto.onDeactivateDrag = function() {\n  this.unbindHandles();\n  this.element.classList.remove('is-draggable');\n};\n\nproto.updateDraggable = function() {\n  // disable dragging if less than 2 slides. #278\n  if ( this.options.draggable == '>1' ) {\n    this.isDraggable = this.slides.length > 1;\n  } else {\n    this.isDraggable = this.options.draggable;\n  }\n  if ( this.isDraggable ) {\n    this.element.classList.add('is-draggable');\n  } else {\n    this.element.classList.remove('is-draggable');\n  }\n};\n\n// backwards compatibility\nproto.bindDrag = function() {\n  this.options.draggable = true;\n  this.updateDraggable();\n};\n\nproto.unbindDrag = function() {\n  this.options.draggable = false;\n  this.updateDraggable();\n};\n\nproto._uiChangeDrag = function() {\n  delete this.isFreeScrolling;\n};\n\nproto._childUIPointerDownDrag = function( event ) {\n  // allow focus & preventDefault even when not draggable\n  // so child UI elements keep focus on carousel. #721\n  event.preventDefault();\n  this.pointerDownFocus( event );\n};\n\n// -------------------------- pointer events -------------------------- //\n\nproto.pointerDown = function( event, pointer ) {\n  if ( !this.isDraggable ) {\n    this._pointerDownDefault( event, pointer );\n    return;\n  }\n  var isOkay = this.okayPointerDown( event );\n  if ( !isOkay ) {\n    return;\n  }\n\n  this._pointerDownPreventDefault( event );\n  this.pointerDownFocus( event );\n  // blur\n  if ( document.activeElement != this.element ) {\n    // do not blur if already focused\n    this.pointerDownBlur();\n  }\n\n  // stop if it was moving\n  this.dragX = this.x;\n  this.viewport.classList.add('is-pointer-down');\n  // track scrolling\n  this.pointerDownScroll = getScrollPosition();\n  window.addEventListener( 'scroll', this );\n\n  this._pointerDownDefault( event, pointer );\n};\n\n// default pointerDown logic, used for staticClick\nproto._pointerDownDefault = function( event, pointer ) {\n  // track start event position\n  this.pointerDownPointer = pointer;\n  // bind move and end events\n  this._bindPostStartEvents( event );\n  this.dispatchEvent( 'pointerDown', event, [ pointer ] );\n};\n\nvar focusNodes = {\n  INPUT: true,\n  TEXTAREA: true,\n  SELECT: true,\n};\n\nproto.pointerDownFocus = function( event ) {\n  var isFocusNode = focusNodes[ event.target.nodeName ];\n  if ( !isFocusNode ) {\n    this.focus();\n  }\n};\n\nproto._pointerDownPreventDefault = function( event ) {\n  var isTouchStart = event.type == 'touchstart';\n  var isTouchPointer = event.pointerType == 'touch';\n  var isFocusNode = focusNodes[ event.target.nodeName ];\n  if ( !isTouchStart && !isTouchPointer && !isFocusNode ) {\n    event.preventDefault();\n  }\n};\n\n// ----- move ----- //\n\nproto.hasDragStarted = function( moveVector ) {\n  return Math.abs( moveVector.x ) > this.options.dragThreshold;\n};\n\n// ----- up ----- //\n\nproto.pointerUp = function( event, pointer ) {\n  delete this.isTouchScrolling;\n  this.viewport.classList.remove('is-pointer-down');\n  this.dispatchEvent( 'pointerUp', event, [ pointer ] );\n  this._dragPointerUp( event, pointer );\n};\n\nproto.pointerDone = function() {\n  window.removeEventListener( 'scroll', this );\n  delete this.pointerDownScroll;\n};\n\n// -------------------------- dragging -------------------------- //\n\nproto.dragStart = function( event, pointer ) {\n  if ( !this.isDraggable ) {\n    return;\n  }\n  this.dragStartPosition = this.x;\n  this.startAnimation();\n  window.removeEventListener( 'scroll', this );\n  this.dispatchEvent( 'dragStart', event, [ pointer ] );\n};\n\nproto.pointerMove = function( event, pointer ) {\n  var moveVector = this._dragPointerMove( event, pointer );\n  this.dispatchEvent( 'pointerMove', event, [ pointer, moveVector ] );\n  this._dragMove( event, pointer, moveVector );\n};\n\nproto.dragMove = function( event, pointer, moveVector ) {\n  if ( !this.isDraggable ) {\n    return;\n  }\n  event.preventDefault();\n\n  this.previousDragX = this.dragX;\n  // reverse if right-to-left\n  var direction = this.options.rightToLeft ? -1 : 1;\n  if ( this.options.wrapAround ) {\n    // wrap around move. #589\n    moveVector.x = moveVector.x % this.slideableWidth;\n  }\n  var dragX = this.dragStartPosition + moveVector.x * direction;\n\n  if ( !this.options.wrapAround && this.slides.length ) {\n    // slow drag\n    var originBound = Math.max( -this.slides[0].target, this.dragStartPosition );\n    dragX = dragX > originBound ? ( dragX + originBound ) * 0.5 : dragX;\n    var endBound = Math.min( -this.getLastSlide().target, this.dragStartPosition );\n    dragX = dragX < endBound ? ( dragX + endBound ) * 0.5 : dragX;\n  }\n\n  this.dragX = dragX;\n\n  this.dragMoveTime = new Date();\n  this.dispatchEvent( 'dragMove', event, [ pointer, moveVector ] );\n};\n\nproto.dragEnd = function( event, pointer ) {\n  if ( !this.isDraggable ) {\n    return;\n  }\n  if ( this.options.freeScroll ) {\n    this.isFreeScrolling = true;\n  }\n  // set selectedIndex based on where flick will end up\n  var index = this.dragEndRestingSelect();\n\n  if ( this.options.freeScroll && !this.options.wrapAround ) {\n    // if free-scroll & not wrap around\n    // do not free-scroll if going outside of bounding slides\n    // so bounding slides can attract slider, and keep it in bounds\n    var restingX = this.getRestingPosition();\n    this.isFreeScrolling = -restingX > this.slides[0].target &&\n      -restingX < this.getLastSlide().target;\n  } else if ( !this.options.freeScroll && index == this.selectedIndex ) {\n    // boost selection if selected index has not changed\n    index += this.dragEndBoostSelect();\n  }\n  delete this.previousDragX;\n  // apply selection\n  // TODO refactor this, selecting here feels weird\n  // HACK, set flag so dragging stays in correct direction\n  this.isDragSelect = this.options.wrapAround;\n  this.select( index );\n  delete this.isDragSelect;\n  this.dispatchEvent( 'dragEnd', event, [ pointer ] );\n};\n\nproto.dragEndRestingSelect = function() {\n  var restingX = this.getRestingPosition();\n  // how far away from selected slide\n  var distance = Math.abs( this.getSlideDistance( -restingX, this.selectedIndex ) );\n  // get closet resting going up and going down\n  var positiveResting = this._getClosestResting( restingX, distance, 1 );\n  var negativeResting = this._getClosestResting( restingX, distance, -1 );\n  // use closer resting for wrap-around\n  var index = positiveResting.distance < negativeResting.distance ?\n    positiveResting.index : negativeResting.index;\n  return index;\n};\n\n/**\n * given resting X and distance to selected cell\n * get the distance and index of the closest cell\n * @param {Number} restingX - estimated post-flick resting position\n * @param {Number} distance - distance to selected cell\n * @param {Integer} increment - +1 or -1, going up or down\n * @returns {Object} - { distance: {Number}, index: {Integer} }\n */\nproto._getClosestResting = function( restingX, distance, increment ) {\n  var index = this.selectedIndex;\n  var minDistance = Infinity;\n  var condition = this.options.contain && !this.options.wrapAround ?\n    // if contain, keep going if distance is equal to minDistance\n    function( d, md ) { return d <= md; } : function( d, md ) { return d < md; };\n  while ( condition( distance, minDistance ) ) {\n    // measure distance to next cell\n    index += increment;\n    minDistance = distance;\n    distance = this.getSlideDistance( -restingX, index );\n    if ( distance === null ) {\n      break;\n    }\n    distance = Math.abs( distance );\n  }\n  return {\n    distance: minDistance,\n    // selected was previous index\n    index: index - increment\n  };\n};\n\n/**\n * measure distance between x and a slide target\n * @param {Number} x\n * @param {Integer} index - slide index\n */\nproto.getSlideDistance = function( x, index ) {\n  var len = this.slides.length;\n  // wrap around if at least 2 slides\n  var isWrapAround = this.options.wrapAround && len > 1;\n  var slideIndex = isWrapAround ? utils.modulo( index, len ) : index;\n  var slide = this.slides[ slideIndex ];\n  if ( !slide ) {\n    return null;\n  }\n  // add distance for wrap-around slides\n  var wrap = isWrapAround ? this.slideableWidth * Math.floor( index / len ) : 0;\n  return x - ( slide.target + wrap );\n};\n\nproto.dragEndBoostSelect = function() {\n  // do not boost if no previousDragX or dragMoveTime\n  if ( this.previousDragX === undefined || !this.dragMoveTime ||\n    // or if drag was held for 100 ms\n    new Date() - this.dragMoveTime > 100 ) {\n    return 0;\n  }\n\n  var distance = this.getSlideDistance( -this.dragX, this.selectedIndex );\n  var delta = this.previousDragX - this.dragX;\n  if ( distance > 0 && delta > 0 ) {\n    // boost to next if moving towards the right, and positive velocity\n    return 1;\n  } else if ( distance < 0 && delta < 0 ) {\n    // boost to previous if moving towards the left, and negative velocity\n    return -1;\n  }\n  return 0;\n};\n\n// ----- staticClick ----- //\n\nproto.staticClick = function( event, pointer ) {\n  // get clickedCell, if cell was clicked\n  var clickedCell = this.getParentCell( event.target );\n  var cellElem = clickedCell && clickedCell.element;\n  var cellIndex = clickedCell && this.cells.indexOf( clickedCell );\n  this.dispatchEvent( 'staticClick', event, [ pointer, cellElem, cellIndex ] );\n};\n\n// ----- scroll ----- //\n\nproto.onscroll = function() {\n  var scroll = getScrollPosition();\n  var scrollMoveX = this.pointerDownScroll.x - scroll.x;\n  var scrollMoveY = this.pointerDownScroll.y - scroll.y;\n  // cancel click/tap if scroll is too much\n  if ( Math.abs( scrollMoveX ) > 3 || Math.abs( scrollMoveY ) > 3 ) {\n    this._pointerDone();\n  }\n};\n\n// ----- utils ----- //\n\nfunction getScrollPosition() {\n  return {\n    x: window.pageXOffset,\n    y: window.pageYOffset\n  };\n}\n\n// -----  ----- //\n\nreturn Flickity;\n\n}));\n","/*!\n * Tap listener v2.0.0\n * listens to taps\n * MIT license\n */\n\n/*jshint browser: true, unused: true, undef: true, strict: true */\n\n( function( window, factory ) {\n  // universal module definition\n  /*jshint strict: false*/ /*globals define, module, require */\n\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      'unipointer/unipointer'\n    ], function( Unipointer ) {\n      return factory( window, Unipointer );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('unipointer')\n    );\n  } else {\n    // browser global\n    window.TapListener = factory(\n      window,\n      window.Unipointer\n    );\n  }\n\n}( window, function factory( window, Unipointer ) {\n\n'use strict';\n\n// --------------------------  TapListener -------------------------- //\n\nfunction TapListener( elem ) {\n  this.bindTap( elem );\n}\n\n// inherit Unipointer & EventEmitter\nvar proto = TapListener.prototype = Object.create( Unipointer.prototype );\n\n/**\n * bind tap event to element\n * @param {Element} elem\n */\nproto.bindTap = function( elem ) {\n  if ( !elem ) {\n    return;\n  }\n  this.unbindTap();\n  this.tapElement = elem;\n  this._bindStartEvent( elem, true );\n};\n\nproto.unbindTap = function() {\n  if ( !this.tapElement ) {\n    return;\n  }\n  this._bindStartEvent( this.tapElement, true );\n  delete this.tapElement;\n};\n\n/**\n * pointer up\n * @param {Event} event\n * @param {Event or Touch} pointer\n */\nproto.pointerUp = function( event, pointer ) {\n  // ignore emulated mouse up clicks\n  if ( this.isIgnoringMouseUp && event.type == 'mouseup' ) {\n    return;\n  }\n\n  var pointerPoint = Unipointer.getPointerPoint( pointer );\n  var boundingRect = this.tapElement.getBoundingClientRect();\n  var scrollX = window.pageXOffset;\n  var scrollY = window.pageYOffset;\n  // calculate if pointer is inside tapElement\n  var isInside = pointerPoint.x >= boundingRect.left + scrollX &&\n    pointerPoint.x <= boundingRect.right + scrollX &&\n    pointerPoint.y >= boundingRect.top + scrollY &&\n    pointerPoint.y <= boundingRect.bottom + scrollY;\n  // trigger callback if pointer is inside element\n  if ( isInside ) {\n    this.emitEvent( 'tap', [ event, pointer ] );\n  }\n\n  // set flag for emulated clicks 300ms after touchend\n  if ( event.type != 'mouseup' ) {\n    this.isIgnoringMouseUp = true;\n    // reset flag after 300ms\n    var _this = this;\n    setTimeout( function() {\n      delete _this.isIgnoringMouseUp;\n    }, 400 );\n  }\n};\n\nproto.destroy = function() {\n  this.pointerDone();\n  this.unbindTap();\n};\n\n// -----  ----- //\n\nreturn TapListener;\n\n}));\n","// prev/next buttons\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      './flickity',\n      'tap-listener/tap-listener',\n      'fizzy-ui-utils/utils'\n    ], function( Flickity, TapListener, utils ) {\n      return factory( window, Flickity, TapListener, utils );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('./flickity'),\n      require('tap-listener'),\n      require('fizzy-ui-utils')\n    );\n  } else {\n    // browser global\n    factory(\n      window,\n      window.Flickity,\n      window.TapListener,\n      window.fizzyUIUtils\n    );\n  }\n\n}( window, function factory( window, Flickity, TapListener, utils ) {\n'use strict';\n\nvar svgURI = 'http://www.w3.org/2000/svg';\n\n// -------------------------- PrevNextButton -------------------------- //\n\nfunction PrevNextButton( direction, parent ) {\n  this.direction = direction;\n  this.parent = parent;\n  this._create();\n}\n\nPrevNextButton.prototype = Object.create( TapListener.prototype );\n\nPrevNextButton.prototype._create = function() {\n  // properties\n  this.isEnabled = true;\n  this.isPrevious = this.direction == -1;\n  var leftDirection = this.parent.options.rightToLeft ? 1 : -1;\n  this.isLeft = this.direction == leftDirection;\n\n  var element = this.element = document.createElement('button');\n  element.className = 'flickity-button flickity-prev-next-button';\n  element.className += this.isPrevious ? ' previous' : ' next';\n  // prevent button from submitting form http://stackoverflow.com/a/10836076/182183\n  element.setAttribute( 'type', 'button' );\n  // init as disabled\n  this.disable();\n\n  element.setAttribute( 'aria-label', this.isPrevious ? 'Previous' : 'Next' );\n\n  // create arrow\n  var svg = this.createSVG();\n  element.appendChild( svg );\n  // events\n  this.on( 'tap', this.onTap );\n  this.parent.on( 'select', this.update.bind( this ) );\n  this.on( 'pointerDown', this.parent.childUIPointerDown.bind( this.parent ) );\n};\n\nPrevNextButton.prototype.activate = function() {\n  this.bindTap( this.element );\n  // click events from keyboard\n  this.element.addEventListener( 'click', this );\n  // add to DOM\n  this.parent.element.appendChild( this.element );\n};\n\nPrevNextButton.prototype.deactivate = function() {\n  // remove from DOM\n  this.parent.element.removeChild( this.element );\n  // do regular TapListener destroy\n  TapListener.prototype.destroy.call( this );\n  // click events from keyboard\n  this.element.removeEventListener( 'click', this );\n};\n\nPrevNextButton.prototype.createSVG = function() {\n  var svg = document.createElementNS( svgURI, 'svg');\n  svg.setAttribute( 'class', 'flickity-button-icon' );\n  svg.setAttribute( 'viewBox', '0 0 100 100' );\n  var path = document.createElementNS( svgURI, 'path');\n  var pathMovements = getArrowMovements( this.parent.options.arrowShape );\n  path.setAttribute( 'd', pathMovements );\n  path.setAttribute( 'class', 'arrow' );\n  // rotate arrow\n  if ( !this.isLeft ) {\n    path.setAttribute( 'transform', 'translate(100, 100) rotate(180) ' );\n  }\n  svg.appendChild( path );\n  return svg;\n};\n\n// get SVG path movmement\nfunction getArrowMovements( shape ) {\n  // use shape as movement if string\n  if ( typeof shape == 'string' ) {\n    return shape;\n  }\n  // create movement string\n  return 'M ' + shape.x0 + ',50' +\n    ' L ' + shape.x1 + ',' + ( shape.y1 + 50 ) +\n    ' L ' + shape.x2 + ',' + ( shape.y2 + 50 ) +\n    ' L ' + shape.x3 + ',50 ' +\n    ' L ' + shape.x2 + ',' + ( 50 - shape.y2 ) +\n    ' L ' + shape.x1 + ',' + ( 50 - shape.y1 ) +\n    ' Z';\n}\n\nPrevNextButton.prototype.onTap = function() {\n  if ( !this.isEnabled ) {\n    return;\n  }\n  this.parent.uiChange();\n  var method = this.isPrevious ? 'previous' : 'next';\n  this.parent[ method ]();\n};\n\nPrevNextButton.prototype.handleEvent = utils.handleEvent;\n\nPrevNextButton.prototype.onclick = function( event ) {\n  // only allow clicks from keyboard\n  var focused = document.activeElement;\n  if ( focused && focused == this.element ) {\n    this.onTap( event, event );\n  }\n};\n\n// -----  ----- //\n\nPrevNextButton.prototype.enable = function() {\n  if ( this.isEnabled ) {\n    return;\n  }\n  this.element.disabled = false;\n  this.isEnabled = true;\n};\n\nPrevNextButton.prototype.disable = function() {\n  if ( !this.isEnabled ) {\n    return;\n  }\n  this.element.disabled = true;\n  this.isEnabled = false;\n};\n\nPrevNextButton.prototype.update = function() {\n  // index of first or last slide, if previous or next\n  var slides = this.parent.slides;\n  // enable is wrapAround and at least 2 slides\n  if ( this.parent.options.wrapAround && slides.length > 1 ) {\n    this.enable();\n    return;\n  }\n  var lastIndex = slides.length ? slides.length - 1 : 0;\n  var boundIndex = this.isPrevious ? 0 : lastIndex;\n  var method = this.parent.selectedIndex == boundIndex ? 'disable' : 'enable';\n  this[ method ]();\n};\n\nPrevNextButton.prototype.destroy = function() {\n  this.deactivate();\n};\n\n// -------------------------- Flickity prototype -------------------------- //\n\nutils.extend( Flickity.defaults, {\n  prevNextButtons: true,\n  arrowShape: {\n    x0: 10,\n    x1: 60, y1: 50,\n    x2: 70, y2: 40,\n    x3: 30\n  }\n});\n\nFlickity.createMethods.push('_createPrevNextButtons');\nvar proto = Flickity.prototype;\n\nproto._createPrevNextButtons = function() {\n  if ( !this.options.prevNextButtons ) {\n    return;\n  }\n\n  this.prevButton = new PrevNextButton( -1, this );\n  this.nextButton = new PrevNextButton( 1, this );\n\n  this.on( 'activate', this.activatePrevNextButtons );\n};\n\nproto.activatePrevNextButtons = function() {\n  this.prevButton.activate();\n  this.nextButton.activate();\n  this.on( 'deactivate', this.deactivatePrevNextButtons );\n};\n\nproto.deactivatePrevNextButtons = function() {\n  this.prevButton.deactivate();\n  this.nextButton.deactivate();\n  this.off( 'deactivate', this.deactivatePrevNextButtons );\n};\n\n// --------------------------  -------------------------- //\n\nFlickity.PrevNextButton = PrevNextButton;\n\nreturn Flickity;\n\n}));\n","// page dots\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      './flickity',\n      'tap-listener/tap-listener',\n      'fizzy-ui-utils/utils'\n    ], function( Flickity, TapListener, utils ) {\n      return factory( window, Flickity, TapListener, utils );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('./flickity'),\n      require('tap-listener'),\n      require('fizzy-ui-utils')\n    );\n  } else {\n    // browser global\n    factory(\n      window,\n      window.Flickity,\n      window.TapListener,\n      window.fizzyUIUtils\n    );\n  }\n\n}( window, function factory( window, Flickity, TapListener, utils ) {\n\n// -------------------------- PageDots -------------------------- //\n\n'use strict';\n\nfunction PageDots( parent ) {\n  this.parent = parent;\n  this._create();\n}\n\nPageDots.prototype = new TapListener();\n\nPageDots.prototype._create = function() {\n  // create holder element\n  this.holder = document.createElement('ol');\n  this.holder.className = 'flickity-page-dots';\n  // create dots, array of elements\n  this.dots = [];\n  // events\n  this.on( 'tap', this.onTap );\n  this.on( 'pointerDown', this.parent.childUIPointerDown.bind( this.parent ) );\n};\n\nPageDots.prototype.activate = function() {\n  this.setDots();\n  this.bindTap( this.holder );\n  // add to DOM\n  this.parent.element.appendChild( this.holder );\n};\n\nPageDots.prototype.deactivate = function() {\n  // remove from DOM\n  this.parent.element.removeChild( this.holder );\n  TapListener.prototype.destroy.call( this );\n};\n\nPageDots.prototype.setDots = function() {\n  // get difference between number of slides and number of dots\n  var delta = this.parent.slides.length - this.dots.length;\n  if ( delta > 0 ) {\n    this.addDots( delta );\n  } else if ( delta < 0 ) {\n    this.removeDots( -delta );\n  }\n};\n\nPageDots.prototype.addDots = function( count ) {\n  var fragment = document.createDocumentFragment();\n  var newDots = [];\n  var length = this.dots.length;\n  var max = length + count;\n\n  for ( var i = length; i < max; i++ ) {\n    var dot = document.createElement('li');\n    dot.className = 'dot';\n    dot.setAttribute( 'aria-label', 'Page dot ' + ( i + 1 ) );\n    fragment.appendChild( dot );\n    newDots.push( dot );\n  }\n\n  this.holder.appendChild( fragment );\n  this.dots = this.dots.concat( newDots );\n};\n\nPageDots.prototype.removeDots = function( count ) {\n  // remove from this.dots collection\n  var removeDots = this.dots.splice( this.dots.length - count, count );\n  // remove from DOM\n  removeDots.forEach( function( dot ) {\n    this.holder.removeChild( dot );\n  }, this );\n};\n\nPageDots.prototype.updateSelected = function() {\n  // remove selected class on previous\n  if ( this.selectedDot ) {\n    this.selectedDot.className = 'dot';\n    this.selectedDot.removeAttribute('aria-current');\n  }\n  // don't proceed if no dots\n  if ( !this.dots.length ) {\n    return;\n  }\n  this.selectedDot = this.dots[ this.parent.selectedIndex ];\n  this.selectedDot.className = 'dot is-selected';\n  this.selectedDot.setAttribute( 'aria-current', 'step' );\n};\n\nPageDots.prototype.onTap = function( event ) {\n  var target = event.target;\n  // only care about dot clicks\n  if ( target.nodeName != 'LI' ) {\n    return;\n  }\n\n  this.parent.uiChange();\n  var index = this.dots.indexOf( target );\n  this.parent.select( index );\n};\n\nPageDots.prototype.destroy = function() {\n  this.deactivate();\n};\n\nFlickity.PageDots = PageDots;\n\n// -------------------------- Flickity -------------------------- //\n\nutils.extend( Flickity.defaults, {\n  pageDots: true\n});\n\nFlickity.createMethods.push('_createPageDots');\n\nvar proto = Flickity.prototype;\n\nproto._createPageDots = function() {\n  if ( !this.options.pageDots ) {\n    return;\n  }\n  this.pageDots = new PageDots( this );\n  // events\n  this.on( 'activate', this.activatePageDots );\n  this.on( 'select', this.updateSelectedPageDots );\n  this.on( 'cellChange', this.updatePageDots );\n  this.on( 'resize', this.updatePageDots );\n  this.on( 'deactivate', this.deactivatePageDots );\n};\n\nproto.activatePageDots = function() {\n  this.pageDots.activate();\n};\n\nproto.updateSelectedPageDots = function() {\n  this.pageDots.updateSelected();\n};\n\nproto.updatePageDots = function() {\n  this.pageDots.setDots();\n};\n\nproto.deactivatePageDots = function() {\n  this.pageDots.deactivate();\n};\n\n// -----  ----- //\n\nFlickity.PageDots = PageDots;\n\nreturn Flickity;\n\n}));\n","// player & autoPlay\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      'ev-emitter/ev-emitter',\n      'fizzy-ui-utils/utils',\n      './flickity'\n    ], function( EvEmitter, utils, Flickity ) {\n      return factory( EvEmitter, utils, Flickity );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      require('ev-emitter'),\n      require('fizzy-ui-utils'),\n      require('./flickity')\n    );\n  } else {\n    // browser global\n    factory(\n      window.EvEmitter,\n      window.fizzyUIUtils,\n      window.Flickity\n    );\n  }\n\n}( window, function factory( EvEmitter, utils, Flickity ) {\n\n'use strict';\n\n// -------------------------- Player -------------------------- //\n\nfunction Player( parent ) {\n  this.parent = parent;\n  this.state = 'stopped';\n  // visibility change event handler\n  this.onVisibilityChange = this.visibilityChange.bind( this );\n  this.onVisibilityPlay = this.visibilityPlay.bind( this );\n}\n\nPlayer.prototype = Object.create( EvEmitter.prototype );\n\n// start play\nPlayer.prototype.play = function() {\n  if ( this.state == 'playing' ) {\n    return;\n  }\n  // do not play if page is hidden, start playing when page is visible\n  var isPageHidden = document.hidden;\n  if ( isPageHidden ) {\n    document.addEventListener( 'visibilitychange', this.onVisibilityPlay );\n    return;\n  }\n\n  this.state = 'playing';\n  // listen to visibility change\n  document.addEventListener( 'visibilitychange', this.onVisibilityChange );\n  // start ticking\n  this.tick();\n};\n\nPlayer.prototype.tick = function() {\n  // do not tick if not playing\n  if ( this.state != 'playing' ) {\n    return;\n  }\n\n  var time = this.parent.options.autoPlay;\n  // default to 3 seconds\n  time = typeof time == 'number' ? time : 3000;\n  var _this = this;\n  // HACK: reset ticks if stopped and started within interval\n  this.clear();\n  this.timeout = setTimeout( function() {\n    _this.parent.next( true );\n    _this.tick();\n  }, time );\n};\n\nPlayer.prototype.stop = function() {\n  this.state = 'stopped';\n  this.clear();\n  // remove visibility change event\n  document.removeEventListener( 'visibilitychange', this.onVisibilityChange );\n};\n\nPlayer.prototype.clear = function() {\n  clearTimeout( this.timeout );\n};\n\nPlayer.prototype.pause = function() {\n  if ( this.state == 'playing' ) {\n    this.state = 'paused';\n    this.clear();\n  }\n};\n\nPlayer.prototype.unpause = function() {\n  // re-start play if paused\n  if ( this.state == 'paused' ) {\n    this.play();\n  }\n};\n\n// pause if page visibility is hidden, unpause if visible\nPlayer.prototype.visibilityChange = function() {\n  var isPageHidden = document.hidden;\n  this[ isPageHidden ? 'pause' : 'unpause' ]();\n};\n\nPlayer.prototype.visibilityPlay = function() {\n  this.play();\n  document.removeEventListener( 'visibilitychange', this.onVisibilityPlay );\n};\n\n// -------------------------- Flickity -------------------------- //\n\nutils.extend( Flickity.defaults, {\n  pauseAutoPlayOnHover: true\n});\n\nFlickity.createMethods.push('_createPlayer');\nvar proto = Flickity.prototype;\n\nproto._createPlayer = function() {\n  this.player = new Player( this );\n\n  this.on( 'activate', this.activatePlayer );\n  this.on( 'uiChange', this.stopPlayer );\n  this.on( 'pointerDown', this.stopPlayer );\n  this.on( 'deactivate', this.deactivatePlayer );\n};\n\nproto.activatePlayer = function() {\n  if ( !this.options.autoPlay ) {\n    return;\n  }\n  this.player.play();\n  this.element.addEventListener( 'mouseenter', this );\n};\n\n// Player API, don't hate the ... thanks I know where the door is\n\nproto.playPlayer = function() {\n  this.player.play();\n};\n\nproto.stopPlayer = function() {\n  this.player.stop();\n};\n\nproto.pausePlayer = function() {\n  this.player.pause();\n};\n\nproto.unpausePlayer = function() {\n  this.player.unpause();\n};\n\nproto.deactivatePlayer = function() {\n  this.player.stop();\n  this.element.removeEventListener( 'mouseenter', this );\n};\n\n// ----- mouseenter/leave ----- //\n\n// pause auto-play on hover\nproto.onmouseenter = function() {\n  if ( !this.options.pauseAutoPlayOnHover ) {\n    return;\n  }\n  this.player.pause();\n  this.element.addEventListener( 'mouseleave', this );\n};\n\n// resume auto-play on hover off\nproto.onmouseleave = function() {\n  this.player.unpause();\n  this.element.removeEventListener( 'mouseleave', this );\n};\n\n// -----  ----- //\n\nFlickity.Player = Player;\n\nreturn Flickity;\n\n}));\n","// add, remove cell\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      './flickity',\n      'fizzy-ui-utils/utils'\n    ], function( Flickity, utils ) {\n      return factory( window, Flickity, utils );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('./flickity'),\n      require('fizzy-ui-utils')\n    );\n  } else {\n    // browser global\n    factory(\n      window,\n      window.Flickity,\n      window.fizzyUIUtils\n    );\n  }\n\n}( window, function factory( window, Flickity, utils ) {\n\n'use strict';\n\n// append cells to a document fragment\nfunction getCellsFragment( cells ) {\n  var fragment = document.createDocumentFragment();\n  cells.forEach( function( cell ) {\n    fragment.appendChild( cell.element );\n  });\n  return fragment;\n}\n\n// -------------------------- add/remove cell prototype -------------------------- //\n\nvar proto = Flickity.prototype;\n\n/**\n * Insert, prepend, or append cells\n * @param {Element, Array, NodeList} elems\n * @param {Integer} index\n */\nproto.insert = function( elems, index ) {\n  var cells = this._makeCells( elems );\n  if ( !cells || !cells.length ) {\n    return;\n  }\n  var len = this.cells.length;\n  // default to append\n  index = index === undefined ? len : index;\n  // add cells with document fragment\n  var fragment = getCellsFragment( cells );\n  // append to slider\n  var isAppend = index == len;\n  if ( isAppend ) {\n    this.slider.appendChild( fragment );\n  } else {\n    var insertCellElement = this.cells[ index ].element;\n    this.slider.insertBefore( fragment, insertCellElement );\n  }\n  // add to this.cells\n  if ( index === 0 ) {\n    // prepend, add to start\n    this.cells = cells.concat( this.cells );\n  } else if ( isAppend ) {\n    // append, add to end\n    this.cells = this.cells.concat( cells );\n  } else {\n    // insert in this.cells\n    var endCells = this.cells.splice( index, len - index );\n    this.cells = this.cells.concat( cells ).concat( endCells );\n  }\n\n  this._sizeCells( cells );\n  this.cellChange( index, true );\n};\n\nproto.append = function( elems ) {\n  this.insert( elems, this.cells.length );\n};\n\nproto.prepend = function( elems ) {\n  this.insert( elems, 0 );\n};\n\n/**\n * Remove cells\n * @param {Element, Array, NodeList} elems\n */\nproto.remove = function( elems ) {\n  var cells = this.getCells( elems );\n  if ( !cells || !cells.length ) {\n    return;\n  }\n\n  var minCellIndex = this.cells.length - 1;\n  // remove cells from collection & DOM\n  cells.forEach( function( cell ) {\n    cell.remove();\n    var index = this.cells.indexOf( cell );\n    minCellIndex = Math.min( index, minCellIndex );\n    utils.removeFrom( this.cells, cell );\n  }, this );\n\n  this.cellChange( minCellIndex, true );\n};\n\n/**\n * logic to be run after a cell's size changes\n * @param {Element} elem - cell's element\n */\nproto.cellSizeChange = function( elem ) {\n  var cell = this.getCell( elem );\n  if ( !cell ) {\n    return;\n  }\n  cell.getSize();\n\n  var index = this.cells.indexOf( cell );\n  this.cellChange( index );\n};\n\n/**\n * logic any time a cell is changed: added, removed, or size changed\n * @param {Integer} changedCellIndex - index of the changed cell, optional\n */\nproto.cellChange = function( changedCellIndex, isPositioningSlider ) {\n  var prevSelectedElem = this.selectedElement;\n  this._positionCells( changedCellIndex );\n  this._getWrapShiftCells();\n  this.setGallerySize();\n  // update selectedIndex\n  // try to maintain position & select previous selected element\n  var cell = this.getCell( prevSelectedElem );\n  if ( cell ) {\n    this.selectedIndex = this.getCellSlideIndex( cell );\n  }\n  this.selectedIndex = Math.min( this.slides.length - 1, this.selectedIndex );\n\n  this.emitEvent( 'cellChange', [ changedCellIndex ] );\n  // position slider\n  this.select( this.selectedIndex );\n  // do not position slider after lazy load\n  if ( isPositioningSlider ) {\n    this.positionSliderAtSelected();\n  }\n};\n\n// -----  ----- //\n\nreturn Flickity;\n\n}));\n","// lazyload\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      './flickity',\n      'fizzy-ui-utils/utils'\n    ], function( Flickity, utils ) {\n      return factory( window, Flickity, utils );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('./flickity'),\n      require('fizzy-ui-utils')\n    );\n  } else {\n    // browser global\n    factory(\n      window,\n      window.Flickity,\n      window.fizzyUIUtils\n    );\n  }\n\n}( window, function factory( window, Flickity, utils ) {\n'use strict';\n\nFlickity.createMethods.push('_createLazyload');\nvar proto = Flickity.prototype;\n\nproto._createLazyload = function() {\n  this.on( 'select', this.lazyLoad );\n};\n\nproto.lazyLoad = function() {\n  var lazyLoad = this.options.lazyLoad;\n  if ( !lazyLoad ) {\n    return;\n  }\n  // get adjacent cells, use lazyLoad option for adjacent count\n  var adjCount = typeof lazyLoad == 'number' ? lazyLoad : 0;\n  var cellElems = this.getAdjacentCellElements( adjCount );\n  // get lazy images in those cells\n  var lazyImages = [];\n  cellElems.forEach( function( cellElem ) {\n    var lazyCellImages = getCellLazyImages( cellElem );\n    lazyImages = lazyImages.concat( lazyCellImages );\n  });\n  // load lazy images\n  lazyImages.forEach( function( img ) {\n    new LazyLoader( img, this );\n  }, this );\n};\n\nfunction getCellLazyImages( cellElem ) {\n  // check if cell element is lazy image\n  if ( cellElem.nodeName == 'IMG' ) {\n    var lazyloadAttr = cellElem.getAttribute('data-flickity-lazyload');\n    var srcAttr = cellElem.getAttribute('data-flickity-lazyload-src');\n    var srcsetAttr = cellElem.getAttribute('data-flickity-lazyload-srcset');\n    if ( lazyloadAttr || srcAttr || srcsetAttr ) {\n      return [ cellElem ];\n    }\n  }\n  // select lazy images in cell\n  var lazySelector = 'img[data-flickity-lazyload], ' +\n    'img[data-flickity-lazyload-src], img[data-flickity-lazyload-srcset]';\n  var imgs = cellElem.querySelectorAll( lazySelector );\n  return utils.makeArray( imgs );\n}\n\n// -------------------------- LazyLoader -------------------------- //\n\n/**\n * class to handle loading images\n */\nfunction LazyLoader( img, flickity ) {\n  this.img = img;\n  this.flickity = flickity;\n  this.load();\n}\n\nLazyLoader.prototype.handleEvent = utils.handleEvent;\n\nLazyLoader.prototype.load = function() {\n  this.img.addEventListener( 'load', this );\n  this.img.addEventListener( 'error', this );\n  // get src & srcset\n  var src = this.img.getAttribute('data-flickity-lazyload') ||\n    this.img.getAttribute('data-flickity-lazyload-src');\n  var srcset = this.img.getAttribute('data-flickity-lazyload-srcset');\n  // set src & serset\n  this.img.src = src;\n  if ( srcset ) {\n    this.img.setAttribute( 'srcset', srcset );\n  }\n  // remove attr\n  this.img.removeAttribute('data-flickity-lazyload');\n  this.img.removeAttribute('data-flickity-lazyload-src');\n  this.img.removeAttribute('data-flickity-lazyload-srcset');\n};\n\nLazyLoader.prototype.onload = function( event ) {\n  this.complete( event, 'flickity-lazyloaded' );\n};\n\nLazyLoader.prototype.onerror = function( event ) {\n  this.complete( event, 'flickity-lazyerror' );\n};\n\nLazyLoader.prototype.complete = function( event, className ) {\n  // unbind events\n  this.img.removeEventListener( 'load', this );\n  this.img.removeEventListener( 'error', this );\n\n  var cell = this.flickity.getParentCell( this.img );\n  var cellElem = cell && cell.element;\n  this.flickity.cellSizeChange( cellElem );\n\n  this.img.classList.add( className );\n  this.flickity.dispatchEvent( 'lazyLoad', event, cellElem );\n};\n\n// -----  ----- //\n\nFlickity.LazyLoader = LazyLoader;\n\nreturn Flickity;\n\n}));\n","/*!\n * Flickity v2.1.1\n * Touch, responsive, flickable carousels\n *\n * Licensed GPLv3 for open source use\n * or Flickity Commercial License for commercial use\n *\n * https://flickity.metafizzy.co\n * Copyright 2015-2018 Metafizzy\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      './flickity',\n      './drag',\n      './prev-next-button',\n      './page-dots',\n      './player',\n      './add-remove-cell',\n      './lazyload'\n    ], factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      require('./flickity'),\n      require('./drag'),\n      require('./prev-next-button'),\n      require('./page-dots'),\n      require('./player'),\n      require('./add-remove-cell'),\n      require('./lazyload')\n    );\n  }\n\n})( window, function factory( Flickity ) {\n  /*jshint strict: false*/\n  return Flickity;\n});\n","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n","import Hammer from 'hammerjs';\nimport debounce from 'just-debounce';\nimport { classes, selectors } from '../Constants';\n\nexport default class CardsPlayer {\n  constructor(el) {\n    this.el = el;\n    this.speedThreshold = 2; // px/ms threshold before snapping off screen when released\n    this.minSpeed = 1; // Minimum px/ms to trigger snap threshold\n    this.snapThreshold = 1; // Distance percentage between card and cards container\n\n    this.hintShown = false;\n\n    this.cards = this.el.querySelectorAll(selectors.cardsPlayer.card);\n    this.deck = null;\n    this.hand = null;\n    this.mc = null;\n    this.panningCard = null;\n    this.translatingCards = [];\n    this.requestAnimationFrameId = null;\n\n    this._onResize = this._onResize.bind(this);\n    this._onScroll = this._onScroll.bind(this);\n    this._onHintRotateOut = this._onHintRotateOut.bind(this);\n    this._onHintRotateIn = this._onHintRotateIn.bind(this);\n    this._onPanStart = this._onPanStart.bind(this);\n    this._onPan = this._onPan.bind(this);\n    this._onPanEnd = this._onPanEnd.bind(this);\n    this._onTap = this._onTap.bind(this);\n    this._translateElementsOffScreen = this._translateElementsOffScreen.bind(this);\n\n    this.init();\n  }\n\n  init() {\n    this._createElements();\n    this._setCardsContainerHeight();\n\n    window.addEventListener('resize', this._onResize);\n\n    if (this.cards.length <= 1) {\n      return;\n    }\n\n    window.addEventListener('scroll', this._onScroll);\n\n    this.pan = new Hammer.Pan(\n      'pan',\n      { direction: Hammer.DIRECTION_HORIZONTAL, threshold: 0 },\n    );\n\n    this.mc = new Hammer.Manager(this.cardsContainer, {\n      touchAction: 'pan-y',\n      recognizers: [\n        [Hammer.Tap],\n      ],\n    });\n\n    this.mc.add(this.pan);\n\n    this.mc.on('panstart', this._onPanStart);\n    this.mc.on('panleft panright', this._onPan);\n    this.mc.on('panend pancancel', this._onPanEnd);\n    this.mc.on('tap', this._onTap);\n\n    this._onScroll();\n  }\n\n  getTopCardIndex() {\n    const card = this.deck.querySelector(selectors.cardsPlayer.card);\n\n    if (card) {\n      for (let i = 0; i < this.cards.length; i += 1) {\n        if (this.cards[i] === card) return i;\n      }\n    }\n\n    return false;\n  }\n\n  drawToCardIndex(index) {\n    if (index > this.cards.length - 1) {\n      return;\n    }\n\n    const card = this.cards[index];\n    const maxIterations = 1000;\n\n    for (let i = this.translatingCards.length - 1; i >= 0; i -= 1) {\n      const el = this.translatingCards[i].el;\n\n      this.translatingCards.splice(i, 1);\n      this.deck.appendChild(el);\n    }\n\n    for (let i = 0; i < this.cards.length; i += 1) {\n      const el = this.cards[i];\n      const elVisual = el.querySelector(selectors.cardsPlayer.cardVisual);\n\n      el.classList.remove(classes.cardsPlayer.repositioning);\n      el.style.transform = '';\n      elVisual.classList.remove(classes.cardsPlayer.hintingStart);\n      elVisual.classList.remove(classes.cardsPlayer.hintingEnd);\n      elVisual.classList.remove(classes.cardsPlayer.visualFirst);\n    }\n\n    let topCard = this.deck.querySelector(selectors.cardsPlayer.card);\n    let iterations = 0;\n\n    while (iterations <= maxIterations && topCard !== card) {\n      this.deck.appendChild(topCard);\n\n      iterations += 1;\n      topCard = this.deck.querySelector(selectors.cardsPlayer.card);\n    }\n  }\n\n  destroy() {\n    window.removeEventListener('resize', this._onResize);\n    window.removeEventListener('scroll', this._onScroll);\n\n    if (this.mc) {\n      this.mc.off('panstart', this._onPanStart);\n      this.mc.off('panleft panright', this._onPan);\n      this.mc.off('panend pancancel', this._onPanEnd);\n      this.mc.destroy();\n    }\n\n    if (this.requestAnimationFrameId) {\n      window.cancelAnimationFrame(this.requestAnimationFrameId);\n    }\n\n    this.drawToCardIndex(0);\n    this._destroyElements();\n  }\n\n  _createElements() {\n    this.cardsContainer = document.createElement('div');\n    this.cardsContentContainer = document.createElement('div');\n    this.deck = document.createElement('div');\n    this.hand = document.createElement('div');\n\n    for (let i = 0; i < this.cards.length; i += 1) {\n      const card = this.cards[i];\n\n      if (i === 0) {\n        const cardVisual = card.querySelector(selectors.cardsPlayer.cardVisual);\n        const cardContent = card.querySelector(selectors.cardsPlayer.cardContent);\n\n        if (cardContent) {\n          const contentClone = cardContent.cloneNode(true);\n\n          this.cardsContentContainer.appendChild(contentClone);\n        }\n\n        cardVisual.classList.add(classes.cardsPlayer.visualFirst);\n      }\n\n      this.deck.appendChild(card);\n    }\n\n    this.cardsContainer.classList.add(classes.cardsPlayer.player);\n    this.cardsContentContainer.classList.add(classes.cardsPlayer.content);\n    this.deck.classList.add(classes.cardsPlayer.deck);\n    this.hand.classList.add(classes.cardsPlayer.hand);\n\n    this.cardsContainer.appendChild(this.deck);\n    this.cardsContainer.appendChild(this.hand);\n    this.el.appendChild(this.cardsContainer);\n    this.el.appendChild(this.cardsContentContainer);\n  }\n\n  _setCardsContainerHeight() {\n    let maxHeight = 0;\n\n    for (let i = 0; i < this.cards.length; i += 1) {\n      const card = this.cards[i];\n      const height = card.getBoundingClientRect().height;\n\n      maxHeight = maxHeight < height ? height : maxHeight;\n    }\n\n    this.cardsContainer.style.paddingBottom = `${maxHeight}px`;\n  }\n\n  _onResize() {\n    this._setCardsContainerHeight();\n  }\n\n  _onScroll() {\n    const elemRect = this.cardsContainer.getBoundingClientRect();\n    const elemMiddle = elemRect.top + (elemRect.height / 2);\n\n    const isVisible = elemMiddle <= (window.innerHeight || document.documentElement.clientHeight);\n\n    if (isVisible && !this.hintShown) {\n      const card = this.cards[0];\n      const cardVisual = card.querySelector(selectors.cardsPlayer.cardVisual);\n\n      window.removeEventListener('scroll', this._onScroll);\n      card.addEventListener('transitionend', this._onHintRotateOut);\n\n      cardVisual.classList.add(classes.cardsPlayer.hintingStart);\n\n      this.hintShown = true;\n    }\n  }\n\n  _onHintRotateOut(event) {\n    const card = event.currentTarget;\n    const cardVisual = card.querySelector(selectors.cardsPlayer.cardVisual);\n\n    card.removeEventListener('transitionend', this._onHintRotateOut);\n    card.addEventListener('transitionend', this._onHintRotateIn);\n    cardVisual.classList.remove(classes.cardsPlayer.hintingStart);\n    cardVisual.classList.add(classes.cardsPlayer.hintingEnd);\n  }\n\n  _onHintRotateIn(event) {\n    const card = event.currentTarget;\n    const cardVisual = card.querySelector(selectors.cardsPlayer.cardVisual);\n\n    card.removeEventListener('transitionend', this._onHintRotateIn);\n    cardVisual.classList.remove(classes.cardsPlayer.hintingEnd);\n  }\n\n  _onPanStart() {\n    if (this.panningCard !== null) {\n      return;\n    }\n\n    const card = this.deck.querySelector(selectors.cardsPlayer.card);\n    const cardVisual = card.querySelector(selectors.cardsPlayer.cardVisual);\n\n    if (!card) {\n      return;\n    }\n\n    card.removeEventListener('transitionend', this._onHintRotateOut);\n    card.removeEventListener('transitionend', this._onHintRotateIn);\n    card.classList.remove(classes.cardsPlayer.hintingStart);\n    card.classList.remove(classes.cardsPlayer.hintingEnd);\n    cardVisual.classList.remove(classes.cardsPlayer.visualFirst);\n\n    this.panningCard = card;\n    this.hand.appendChild(this.panningCard);\n    this.panningCard.classList.remove(classes.cardsPlayer.repositioning);\n\n    const topCard = this.deck.querySelector(selectors.cardsPlayer.card);\n    const topCardVisual = topCard.querySelector(selectors.cardsPlayer.cardVisual);\n\n    topCardVisual.classList.add(classes.cardsPlayer.visualFirst);\n  }\n\n  _onPan(event) {\n    const { center, deltaX, isFinal } = event;\n\n    if (this.panningCard && isFinal) {\n      this.pan = new Hammer.Pan(\n        'pan',\n        { direction: Hammer.DIRECTION_HORIZONTAL, threshold: 0 },\n      );\n\n      this.mc.emit('panend', event);\n      this.mc.add(this.pan);\n    }\n\n    if (!this.panningCard || (center.x === 0 && center.y === 0)) {\n      return;\n    }\n\n    debounce(window.requestAnimationFrame(() => {\n      const translate = `translateX(${deltaX})`;\n\n      if (\n        !this.panningCard\n        || translate === this.panningCard.style.transform\n      ) {\n        return;\n      }\n\n      const containerRect = this.cardsContainer.getBoundingClientRect();\n      const containerWidth = containerRect.width;\n      const containerCenter = containerRect.left + (containerWidth / 2);\n\n      const panningCardRect = this.panningCard.getBoundingClientRect();\n      const panningCardWidth = panningCardRect.width;\n      const panningCardCenter = panningCardRect.left + (panningCardWidth / 2);\n\n      let threshold = 0;\n\n      if (panningCardCenter / containerCenter >= 1) {\n        const thresholdValue = ((1 + this.snapThreshold) - 1);\n        threshold = 1 - (((panningCardCenter / containerCenter) / thresholdValue) - 1);\n      } else {\n        const thresholdValue = (1 - (1 - this.snapThreshold));\n        threshold = (panningCardCenter / containerCenter) / thresholdValue;\n      }\n\n      threshold = Math.max(0, threshold) || 1;\n\n      const card = (\n        threshold === 1\n        ? this.deck.querySelector(selectors.cardsPlayer.card)\n        : this.panningCard\n      );\n      const cardContent = card.querySelector(selectors.cardsPlayer.cardContent);\n\n      if (cardContent) {\n        const contentClone = cardContent.cloneNode(true);\n\n        this.cardsContentContainer.innerHTML = '';\n        this.cardsContentContainer.appendChild(contentClone);\n        this.cardsContentContainer.style.opacity = threshold;\n      }\n\n      this.panningCard.style.transform = `translateX(${deltaX}px)`;\n    }), 16);\n  }\n\n  _onPanEnd(event) {\n    const center = event.center;\n    let { deltaX, velocity } = event;\n\n    if (!this.panningCard) {\n      return;\n    }\n\n    const isCenter = center.x === 0 && center.y === 0;\n\n    deltaX = isCenter ? 0 : deltaX;\n    velocity = isCenter ? 0 : velocity;\n\n    const containerRect = this.cardsContainer.getBoundingClientRect();\n    const containerWidth = containerRect.width;\n    const containerCenter = containerRect.left + (containerWidth / 2);\n\n    const panningCardRect = this.panningCard.getBoundingClientRect();\n    const panningCardWidth = panningCardRect.width;\n    const panningCardCenter = panningCardRect.left + (panningCardWidth / 2);\n\n    const metSpeedThreshold = Math.abs(velocity) >= this.speedThreshold;\n    const metSnapThreshold = (\n      Math.abs(velocity) <= this.minSpeed\n      && (\n        panningCardCenter / containerCenter <= 1 - this.snapThreshold\n        || panningCardCenter / containerCenter >= 1 + this.snapThreshold\n      )\n    );\n\n    if (metSpeedThreshold || metSnapThreshold) {\n      const translateVelocity = (\n        panningCardCenter / containerCenter >= 1\n        ? Math.max(velocity, 5)\n        : Math.min(velocity, -5)\n      );\n\n      const card = this.deck.querySelector(selectors.cardsPlayer.card);\n      const cardContent = card.querySelector(selectors.cardsPlayer.cardContent);\n\n      if (cardContent) {\n        const contentClone = cardContent.cloneNode(true);\n\n        this.cardsContentContainer.innerHTML = '';\n        this.cardsContentContainer.appendChild(contentClone);\n        this.cardsContentContainer.style.opacity = 1;\n      }\n\n      this.translatingCards.push({\n        el: this.panningCard,\n        offset: deltaX,\n        velocity: translateVelocity,\n        prevTimestamp: null,\n      });\n\n      this._translateElementsOffScreen();\n      this.panningCard = null;\n    } else {\n      window.requestAnimationFrame(() => {\n        const topCard = this.deck.querySelector(selectors.cardsPlayer.card);\n        const topCardVisual = topCard.querySelector(selectors.cardsPlayer.cardVisual);\n        const panningCardVisual = this.panningCard.querySelector(selectors.cardsPlayer.cardVisual);\n\n        topCardVisual.classList.remove(classes.cardsPlayer.visualFirst);\n        this.deck.insertBefore(this.panningCard, this.deck.firstChild);\n        this.panningCard.classList.add(classes.cardsPlayer.repositioning);\n        this.panningCard.style.transform = `translateX(${deltaX}px)`;\n\n        topCardVisual.classList.remove(classes.cardsPlayer.visualFirst);\n        panningCardVisual.classList.add(classes.cardsPlayer.visualFirst);\n\n        window.requestAnimationFrame(() => {\n          if (this.panningCard) {\n            const cardContent = this.panningCard.querySelector(selectors.cardsPlayer.cardContent);\n\n            if (cardContent) {\n              const contentClone = cardContent.cloneNode(true);\n\n              this.cardsContentContainer.innerHTML = '';\n              this.cardsContentContainer.appendChild(contentClone);\n              this.cardsContentContainer.style.opacity = 1;\n            }\n\n            this.panningCard.style.transform = 'translateX(0)';\n            this.panningCard = null;\n          }\n        });\n      });\n    }\n  }\n\n  _onTap() {\n    const element = this.deck.querySelector(selectors.cardsPlayer.card);\n    const url = element.getAttribute('data-cards-player-card-url');\n\n    if (url) {\n      window.location.href = url;\n    }\n  }\n\n  _translateElementsOffScreen(timestamp) {\n    for (let i = this.translatingCards.length - 1; i >= 0; i -= 1) {\n      const translatingElement = this.translatingCards[i];\n      const { el, offset, velocity, prevTimestamp } = translatingElement;\n      const elapsedTimeMilli = prevTimestamp ? timestamp - prevTimestamp : 0;\n      const distance = velocity * elapsedTimeMilli;\n      const newOffset = offset + distance;\n\n      el.style.transform = `translateX(${newOffset}px)`;\n      translatingElement.offset = newOffset;\n      translatingElement.prevTimestamp = timestamp;\n\n      if (\n        el.getBoundingClientRect().right < 0\n        || el.getBoundingClientRect().left > document.body.getBoundingClientRect().right\n      ) {\n        this.translatingCards.splice(i, 1);\n        this.deck.appendChild(el);\n        el.style.transform = 'translateX(0)';\n      }\n    }\n\n    if (this.translatingCards.length === 0) return;\n\n    this.requestAnimationFrameId = debounce(\n      window.requestAnimationFrame(this._translateElementsOffScreen),\n      16,\n    );\n  }\n\n  _destroyElements() {\n    for (let i = 0; i < this.cards.length; i += 1) {\n      const card = this.cards[i];\n\n      this.el.appendChild(card);\n    }\n\n    this.cardsContainer.remove();\n    this.cardsContentContainer.remove();\n  }\n}\n","import $ from 'jquery';\nimport debounce from 'just-debounce';\nimport Flickity from 'flickity';\nimport { classes, selectors } from '../Constants';\nimport layout from '../Layout';\nimport CardsPlayer from './CardsPlayer';\n\nexport default class ProductGallery {\n  constructor(options = {}) {\n    this.el = options.el || null;\n\n    if (!this.el) {\n      return console.warn('Unable to initiate ProductGallery.js');\n    }\n\n    this.cardsPlayer = null;\n\n    this.flickity = null;\n    this.flickitySelect = this._flickitySelect.bind(this);\n    this.flickityStaticClick = this._flickityStaticClick.bind(this);\n    this.flickityPrev = () => this.flickity.previous();\n    this.flickityNext = () => this.flickity.next();\n\n    this.staticGallery = false;\n\n    this.onThumbnailClick = this._onThumbnailClick.bind(this);\n    this.onThumbnailKeyPress = this._onThumbnailKeyPress.bind(this);\n\n    this.$thumbnailsWrapper = $(selectors.product.galleryThumbnailsWrapper, this.el);\n\n    this.imageContainer = this.el.querySelector(selectors.product.galleryImages);\n    this.thumbnailContainer = this.el.querySelector(selectors.product.galleryThumbnails);\n\n    this.$images = $(selectors.product.galleryImage, this.el);\n    this.$thumbnails = $(selectors.product.galleryThumbnail, this.el);\n\n    this.thumbnailPrev = this.el.querySelector(selectors.product.galleryThumbnailsPrev);\n    this.thumbnailNext = this.el.querySelector(selectors.product.galleryThumbnailsNext);\n\n    this.$selectedThumbnail = $(selectors.product.galleryThumbnailSelected, this.thumbnailContainer);\n    this.selectedThumbnailIndex = this.$thumbnails.index(this.$selectedThumbnail);\n\n    this.onResize = debounce(this._onResize, 15).bind(this);\n\n    this._init();\n  }\n\n  switchImage(id) {\n    const $image = $(`[data-product-gallery-image=\"${id}\"]`, this.el);\n    const $thumbnail = $(`[data-product-gallery-thumbnail=\"${id}\"]`, this.el);\n\n    this.$images.removeClass(classes.product.galleryImageSelected);\n    this.$thumbnails.removeClass(classes.product.galleryThumbnailSelected);\n\n    $image.addClass(classes.product.galleryImageSelected);\n    $thumbnail.addClass(classes.product.galleryThumbnailSelected);\n\n    this.$selectedThumbnail = $thumbnail;\n    this.selectedThumbnailIndex = this.$thumbnails.index(this.$selectedThumbnail);\n\n    if (this.cardsPlayer) {\n      this.cardsPlayer.drawToCardIndex(this.selectedThumbnailIndex);\n    }\n  }\n\n  unload() {\n    window.removeEventListener('resize', this.onResize);\n    this._destroyCardsPlayer();\n    this._destroyFlickity();\n    this._destroyStaticGallery();\n  }\n\n  _init() {\n    if (layout.isBreakpoint('XS') || layout.isBreakpoint('S')) {\n      this._initCardsPlayer();\n    } else if (this._shouldInitFlickity()) {\n      this._initFlickity();\n    } else if (this._shouldInitStaticGallery()) {\n      this._initStaticGallery();\n    }\n\n    window.addEventListener('resize', this.onResize);\n  }\n\n  _onResize() {\n    if (layout.isBreakpoint('XS') || layout.isBreakpoint('S')) {\n      if (this.cardsPlayer) {\n        return;\n      }\n\n      if (this.flickity) {\n        this._destroyFlickity();\n      }\n\n      if (this.staticGallery) {\n        this._destroyStaticGallery();\n      }\n\n      this._initCardsPlayer();\n      this.cardsPlayer.drawToCardIndex(this.selectedThumbnailIndex);\n    } else if (!(layout.isBreakpoint('XS') || layout.isBreakpoint('S'))) {\n      if (this.cardsPlayer) {\n        this.selectedThumbnailIndex = this.cardsPlayer.getTopCardIndex();\n        this.$selectedThumbnail = $(this.$thumbnails.get(this.selectedThumbnailIndex));\n        this._destroyCardsPlayer();\n      }\n\n      if (this._shouldInitFlickity()) {\n        if (this.staticGallery) {\n          this._destroyStaticGallery();\n        }\n\n        this._initFlickity();\n        this.flickity.select(this.selectedThumbnailIndex);\n      } else if (this._shouldInitStaticGallery()) {\n        if (this.flickity) {\n          this._destroyFlickity();\n        }\n\n        this._initStaticGallery();\n        this.$selectedThumbnail.trigger('click');\n      }\n    }\n  }\n\n  _initCardsPlayer() {\n    this.cardsPlayer = new CardsPlayer(this.imageContainer);\n    this.cardsPlayer.drawToCardIndex(this.selectedThumbnailIndex);\n  }\n\n  _destroyCardsPlayer() {\n    if (this.cardsPlayer) {\n      this.cardsPlayer.destroy();\n      this.cardsPlayer = null;\n    }\n  }\n\n  _shouldInitStaticGallery() {\n    return !!this.thumbnailContainer;\n  }\n\n  _shouldInitFlickity() {\n    if (!this.thumbnailContainer) {\n      return false;\n    }\n\n    const containerWidth = this.thumbnailContainer.getBoundingClientRect().width;\n\n    let thumbnailsWidth = 0;\n\n    this.$thumbnails.each((index, el) => {\n      thumbnailsWidth += $(el).outerWidth(true);\n    });\n\n    return thumbnailsWidth > containerWidth;\n  }\n\n  _initFlickity() {\n    if (this.flickity) {\n      return;\n    }\n\n    this.$selectedThumbnail = $(selectors.product.galleryThumbnailSelected, this.thumbnailContainer);\n    this.selectedThumbnailIndex = this.$thumbnails.index(this.$selectedThumbnail);\n\n    this.flickity = new Flickity(this.thumbnailContainer, {\n      cellAlign: 'left',\n      imagesLoaded: true,\n      prevNextButtons: false,\n      pageDots: false,\n      initialIndex: this.selectedThumbnailIndex,\n    });\n    this.flickity.reloadCells();\n\n    this.flickity.on('select', this.flickitySelect);\n    this.flickity.on('staticClick', this.flickityStaticClick);\n\n    this.thumbnailPrev.addEventListener('click', this.flickityPrev);\n    this.thumbnailNext.addEventListener('click', this.flickityNext);\n\n    this.$thumbnailsWrapper.addClass(classes.product.galleryThumbnailsFlickityEnabled);\n  }\n\n  _flickitySelect() {\n    const $selectedElement = $(this.flickity.selectedElement);\n    const imageId = $selectedElement.data('product-gallery-thumbnail');\n    const $image = $(`[data-product-gallery-image=\"${imageId}\"]`, this.el);\n    const $thumbnail = $(`[data-product-gallery-thumbnail=\"${imageId}\"]`, this.el);\n\n    this.$images.removeClass(classes.product.galleryImageSelected);\n    this.$thumbnails.removeClass(classes.product.galleryThumbnailSelected);\n\n    $image.addClass(classes.product.galleryImageSelected);\n    $thumbnail.addClass(classes.product.galleryThumbnailSelected);\n\n    this.$selectedThumbnail = $thumbnail;\n    this.selectedThumbnailIndex = this.$thumbnails.index(this.$selectedThumbnail);\n  }\n\n  _flickityStaticClick(event, pointer, cellElement, cellIndex) {\n    if (!cellElement) {\n      return;\n    }\n\n    this.flickity.select(cellIndex);\n  }\n\n  _destroyFlickity() {\n    if (this.flickity) {\n      this.flickity.off('select', this.flickitySelect);\n      this.flickity.off('staticClick', this.flickityStaticClick);\n      this.thumbnailPrev.removeEventListener('click', this.flickityPrev);\n      this.thumbnailNext.removeEventListener('click', this.flickityNext);\n      this.$thumbnailsWrapper.removeClass(classes.product.galleryThumbnailsFlickityEnabled);\n      this.flickity.destroy();\n      this.flickity = null;\n    }\n  }\n\n  _initStaticGallery() {\n    if (this.staticGallery) {\n      return;\n    }\n\n    this.$thumbnails.each((index, el) => el.addEventListener('click', this.onThumbnailClick));\n    this.$thumbnails.each((index, el) => el.addEventListener('keypress', this.onThumbnailKeyPress));\n    this.staticGallery = true;\n  }\n\n  _destroyStaticGallery() {\n    if (this.staticGallery) {\n      this.$thumbnails.each((index, el) => el.removeEventListener('click', this.onThumbnailClick));\n      this.$thumbnails.each((index, el) => el.removeEventListener('keypress', this.onThumbnailKeyPress));\n      this.staticGallery = false;\n    }\n  }\n\n  _onThumbnailKeyPress(event) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // Prevent the default action to stop scrolling when space is pressed\n      event.preventDefault();\n\n      const imageId = $(event.currentTarget).data('product-gallery-thumbnail');\n\n      this.switchImage(imageId);\n    }\n  }\n\n  _onThumbnailClick(event) {\n    const imageId = $(event.currentTarget).data('product-gallery-thumbnail');\n\n    this.switchImage(imageId);\n  }\n}\n","class Node {\n  constructor(variant) {\n    this.variant = variant;\n    this.optionsCount = this.variant.options.length;\n    this.neighbors = [];\n\n    for (let i = 0; i < this.optionsCount; i++) {\n      this.neighbors.push([]);\n    }\n  }\n\n  addNeighbor(variant) {\n    for (let i = 0; i < this.optionsCount; i++) {\n      if (this.variant.options[i] !== variant.options[i]) {\n        this.neighbors[i].push(variant);\n        break;\n      }\n    }\n  }\n\n  getValidOptions() {\n    const options = [];\n\n    for (let i = 0; i < this.optionsCount; i++) {\n      const variants = [this.variant, ...this.neighbors[i]];\n      options[i] = {};\n\n      variants.forEach((item) => {\n        const variant = item;\n        const option = variant.options[i];\n\n        options[i][option] = {\n          available: (options[i][option] && options[i][option].available) || variant.available,\n        };\n      });\n    }\n\n    return options;\n  }\n}\n\nexport default class ProductOptions {\n  constructor(product) {\n    this.productHandle = product.handle;\n    this.optionsCount = product.options.length;\n    this.variants = product.variants;\n    this.nodeMap = {};\n\n    this._generateNodeMap(product);\n  }\n\n  _generateNodeMap() {\n    this.variants.forEach((variant) => {\n      this.nodeMap[variant.id] = new Node(variant);\n\n      this.variants.forEach((variant2) => {\n        this.nodeMap[variant.id].addNeighbor(variant2);\n      });\n    });\n  }\n\n  _getVariant(options) {\n    for (let i = 0; i < this.variants.length; i++) {\n      const variant = this.variants[i];\n      let found = true;\n\n      for (let j = 0; j < variant.options.length; j++) {\n        if (options[j] !== variant.options[j]) {\n          found = false;\n        }\n      }\n\n      if (found) {\n        return variant;\n      }\n    }\n\n    return false;\n  }\n\n  _getClosestVariant(options) {\n    let closestVariant = null;\n    let matchingValues = 0;\n\n    this.variants.forEach((variant) => {\n      let tempMatchingValues = 0;\n\n      for (let i = 0; i < variant.options.length; i++) {\n        if (options[i] === variant.options[i]) {\n          tempMatchingValues++;\n        } else {\n          break;\n        }\n      }\n\n      if (tempMatchingValues > matchingValues) {\n        closestVariant = variant;\n        matchingValues = tempMatchingValues;\n      } else if (tempMatchingValues === matchingValues && (!closestVariant || !closestVariant.available)) {\n        closestVariant = variant;\n        matchingValues = tempMatchingValues;\n      }\n    });\n\n    return closestVariant || false;\n  }\n\n  getVariant(options) {\n    return this._getVariant(options) || this._getClosestVariant(options);\n  }\n\n  getValidOptions(variant) {\n    return this.nodeMap[variant.id].getValidOptions();\n  }\n}\n","import $ from 'jquery';\nimport ProductOptions from './ProductOptions';\n\nexport default class VariantHelper {\n  constructor(product, $variants, $options) {\n    this.product = product;\n    this.optionsCount = this.product.options.length;\n    this.$variants = $variants;\n    this.$options = $options;\n    this.productOptions = new ProductOptions(this.product);\n    this.optionsTypes = {\n      select: 'select',\n      radio: 'input[type=\"radio\"]',\n    };\n\n    this.$radioOptions = this.$options.filter((index, option) => $(option).is(this.optionsTypes.radio));\n    this.$selectOptions = this.$options.filter((index, option) => $(option).is(this.optionsTypes.select));\n\n    this._bindEvents();\n\n    if (this.$radioOptions.length === 0 && this.$selectOptions.length === 0) {\n      console.warn('Variant helper: Option set is not a valid type');\n      this._unbindEvents();\n      return;\n    }\n\n    this._switchVariant(true);\n  }\n\n  _bindEvents() {\n    this.$options.on('change.variant-helper', event => this._switchVariant(false, event));\n  }\n\n  _unbindEvents() {\n    this.$options.off('change.variant-helper');\n  }\n\n  _switchVariant(firstLoad = false, event) {\n    const options = [];\n    const product = this.product;\n    const $currentTarget = event ? $(event.currentTarget) : null;\n    let variant = null;\n    let availableOptions = null;\n\n    if (!$currentTarget || $currentTarget.is(this.optionsTypes.radio)) {\n      this.$radioOptions.filter(':checked').each((index, option) => {\n        options.push(option.value);\n      });\n    } else if ($currentTarget.is(this.optionsTypes.select)) {\n      this.$selectOptions.each((index, option) => {\n        options.push(option.value);\n      });\n    } else {\n      return;\n    }\n\n    variant = this.productOptions.getVariant(options);\n\n    if (variant) {\n      availableOptions = this.productOptions.getValidOptions(variant);\n    } else {\n      return;\n    }\n\n    this._switchVariantSelect(variant, availableOptions);\n    this._switchVariantRadio(variant, availableOptions);\n\n    this.$variants.val(variant.id);\n    $(window).trigger('product-variant-switch', { product, variant, firstLoad });\n  }\n\n  _switchVariantSelect(variant, availableOptions) {\n    // Iterate over each option type\n    for (let i = 0; i < this.product.options.length; i++) {\n      // Corresponding select dropdown\n      const $select = $(this.$selectOptions[i]);\n      const $optionEls = $select.find('option');\n\n      // Iterate over each option on dropdown\n      $optionEls.each((index, option) => {\n        const $option = $(option);\n        const { value } = option;\n        const isUnavailable = (!availableOptions[i][value] ||\n          !availableOptions[i][value].available);\n\n        // Not an available option\n        $option\n          .prop('disabled', isUnavailable)\n          .prop('selected', false);\n\n        // Dropdown option matches variant option\n        if (variant.options[i] === value) {\n          $option\n            .prop('disabled', isUnavailable)\n            .prop('selected', true);\n        }\n      });\n    }\n  }\n\n  _switchVariantRadio(variant, availableOptions) {\n    this.$radioOptions\n      .attr('disabled', true)\n      .prop('checked', false)\n      .attr('data-soldout', false);\n\n    for (let i = 0; i < this.product.options.length; i++) {\n      const $options = this.$radioOptions.filter(`[name=\"${this.product.options[i]}\"]`);\n      $options.each((index, option) => {\n        const $option = $(option);\n\n        if (variant.options[i] === $option.val()) {\n          $option\n            .prop('checked', true)\n            .attr('disabled', false);\n        }\n\n        if (availableOptions[i][$option.val()]) {\n          $option.attr('disabled', false);\n\n          if (!availableOptions[i][$option.val()].available) {\n            $option.attr('data-soldout', true);\n          }\n        }\n      });\n    }\n  }\n\n  isDefault() {\n    if (this.product.variants[0].title === 'Default Title' && this.product.variants[0].option1 === 'Default Title') {\n      return true;\n    }\n\n    return false;\n  }\n\n  getSelectedVariant() {\n    if (this.isDefault()) {\n      return this.product.variants[0];\n    }\n\n    // Read selected options from the product form\n    const options = [];\n\n    this.$options.filter(':checked').each((index, option) => {\n      options.push(option.value);\n    });\n\n    return this.productOptions.getVariant(options);\n  }\n\n  unload() {\n    this._unbindEvents();\n  }\n}\n","import $ from 'jquery';\nimport { selectors, classes } from '../Constants';\n\nexport default class Quantity {\n  constructor(el, options = {}) {\n    this.el = el;\n    this.callback = options.callback;\n    this.decrementButton = this.el.querySelector(selectors.quantity.decrement);\n    this.$formElement = $(selectors.quantity.element, this.el);\n    this.$input = $(selectors.quantity.input, this.el);\n    this.min = this.$input.attr('min') ? parseInt(this.$input.attr('min'), 10) : 0;\n    this.max = this.$input.attr('max') ? parseInt(this.$input.attr('max'), 10) : Infinity;\n    this.incrementButton = this.el.querySelector(selectors.quantity.increment);\n\n    this.decrementInput = () => this._adjustInput(-1);\n    this.incrementInput = () => this._adjustInput(+1);\n\n    this.onInputChange = (event) => this._onInputChange(event);\n\n    this.decrementButton.addEventListener('click', this.decrementInput);\n    this.$input.on('change.quantity', this.onInputChange);\n    this.incrementButton.addEventListener('click', this.incrementInput);\n  }\n\n  setDisable(disable) {\n    this.$input.prop('disabled', disable);\n  }\n\n  setQuantity(quantity, triggerEvent = true) {\n    this._setValue(quantity);\n\n    if (triggerEvent) {\n      this.$input.trigger('change');\n    }\n  }\n\n  unload() {\n    this.decrementButton.removeEventListener('click', this.decrementInput);\n    this.$input.off('change.quantity', this.onInputChange);\n    this.incrementButton.removeEventListener('click', this.incrementInput);\n  }\n\n  _onInputChange(event) {\n    const quantity = this._setValue(this.$input.val());\n\n    if (this.callback) {\n      this.callback(event, { quantity });\n    }\n  }\n\n  /**\n   * Make sure that value is a number\n   *\n   * @param {number|string} value\n   * @returns {number}\n   * @private\n   */\n  _formatValue(value) {\n    const baseValue = parseInt(value, 10);\n    return isNaN(baseValue) ? this.min : baseValue;\n  }\n\n  /**\n   * Increment or decrement input based on adjustment\n   *\n   * @param {number} adjustment\n   * @private\n   */\n  _adjustInput(adjustment) {\n    if (this.$input.prop('disabled')) {\n      return;\n    }\n\n    const value = this._formatValue(this.$input.val()) + adjustment;\n\n    this.$input.val(value);\n    this.$input.trigger('change');\n  }\n\n  /**\n   * Restrict input to be within a valid number range\n   *\n   * @param {number} value\n   * @returns {number}\n   * @private\n   */\n  _restrictValue(value) {\n    let val = Math.min(this.max, value); // Make sure value isn't larger than maximum\n    val = Math.max(this.min, val); // Make sure value isn't lower than minimum\n\n    return val;\n  }\n\n  /**\n   * Set the value of the input to a sanitized state\n   *\n   * @param {number|string} value\n   * @returns {number}\n   * @private\n   */\n  _setValue(value) {\n    const formatted = this._formatValue(value);\n    const constrainedValue = this._restrictValue(formatted);\n\n    // If value is empty, or initial value doesn't match constrained value\n    if (!value || value !== constrainedValue) {\n      this.$input.val(constrainedValue);\n    }\n\n    return constrainedValue;\n  }\n}\n","import { selectors } from '../Constants';\nimport Quantity from './Quantity';\n\nexport default class QuantitySubmit extends Quantity {\n  constructor(el, options = {}) {\n    super(el, options);\n    this.text = options.text;\n    this.disableText = options.disableText;\n    this.submit = this.el.querySelector(selectors.quantity.submitEl);\n    this.disabled = false;\n\n    this.$input.trigger('change');\n  }\n\n  setDisable(disable) {\n    if (disable) {\n      this._setText(this.disableText);\n      this.submit.setAttribute('disabled', 'disabled');\n    } else {\n      this.submit.removeAttribute('disabled');\n\n      if (this.text && this.text.indexOf('** amount **') !== -1) {\n        const text = this.text.replace('** amount **', this.$input.val());\n\n        this._setText(text);\n      }\n    }\n\n    super.setDisable(disable);\n  }\n\n  unload() {\n    super.unload();\n  }\n\n  _onInputChange(event) {\n    super._onInputChange(event);\n\n    if (this.text && this.text.indexOf('** amount **') !== -1) {\n      const text = this.text.replace('** amount **', this.$input.val());\n\n      this._setText(text);\n    }\n  }\n\n  _setText(text) {\n    this.submit.value = text;\n  }\n}\n","import $ from 'jquery';\n\nlet instance = null;\nlet target = document.body;\nlet dismissIcon = '<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M18.707 4.707a1 1 0 0 0-1.414 0l-5.585 5.586-5.586-5.586a1 1 0 1 0-1.415 1.414l5.586 5.586-5.586 5.586a1 1 0 0 0 0 1.414 1 1 0 0 0 1.415 0l5.586-5.586 5.585 5.586a1 1 0 1 0 1.415-1.414l-5.586-5.586 5.586-5.586a1 1 0 0 0 0-1.414z\"/></svg>';\nlet maxConcurrentBanners = 3;\n\nconst Type = {\n  success: 'success',\n  error: 'error',\n  warning: 'warning',\n};\n\nconst Priority = {\n  high: 0,\n  medium: 1,\n  low: 2,\n};\n\nclass Banner {\n  constructor(message, type, options) {\n    this.message = message;\n    this.type = type;\n    this.autoDismiss = (options.autoDismiss === undefined) || options.autoDismiss;\n\n    this.creationTime = Date.now();\n\n    this._dismissed = false;\n    this._dismissing = false;\n    this.dismissPromise = null;\n    this.onDismiss = this._onDismiss.bind(this);\n\n    this.onTransitionEnd = this._onTransitionEnd.bind(this);\n\n    this.bannerMessage = document.createElement('span');\n    this.bannerMessage.classList.add('banner-message');\n    this.bannerMessage.innerHTML = this.message;\n\n    this.bannerDismiss = document.createElement('button');\n    this.bannerDismiss.classList.add('banner-dismiss');\n    this.bannerDismiss.innerHTML = dismissIcon;\n\n    this.el = document.createElement('div');\n    this.el.classList.add('banner');\n    this.el.classList.add(`banner-type-${this.type}`);\n    this.el.classList.add('banner-animating');\n    this.el.classList.add('banner-animating-in');\n\n    this.el.appendChild(this.bannerMessage);\n    this.el.appendChild(this.bannerDismiss);\n\n    target.appendChild(this.el);\n\n    const hasTransition = !!window.getComputedStyle(this.el).getPropertyValue('transition');\n\n    this.el.classList.remove('banner-animating');\n    this.el.classList.remove('banner-animating-in');\n\n    if (hasTransition) {\n      this.el.addEventListener('transitionend', this.onTransitionEnd);\n\n      setTimeout(() => {\n        this.el.classList.add('banner-animating');\n        this.el.classList.add('banner-animating-in');\n      }, 10);\n    } else {\n      this.el.classList.add('banner-visible');\n    }\n\n    this.bannerDismiss.addEventListener('click', this.onDismiss);\n  }\n\n  get dismissed() {\n    return this._dismissed;\n  }\n\n  update() {\n    const deferred = $.Deferred();\n\n    if (this._dismissing || this._dismissed) {\n      deferred.resolve();\n    } else if (\n      this.autoDismiss\n      && (Date.now() - this.creationTime) / 1000 >= this.autoDismiss\n    ) {\n      this._dismiss()\n        .then(() => deferred.resolve());\n    } else {\n      deferred.resolve();\n    }\n\n    return deferred.promise();\n  }\n\n  destroy() {\n    this.bannerDismiss.removeEventListener('click', this.onDismiss);\n    target.removeChild(this.el);\n  }\n\n  _dismiss(force = false) {\n    const deferred = $.Deferred();\n\n    if (this._dismissing || (!force && !this.autoDismiss)) {\n      deferred.resolve();\n    } else {\n      this._dismissing = true;\n      this.dismissPromise = deferred.resolve;\n      this.el.classList.add('banner-animating');\n      this.el.classList.add('banner-animating-out');\n\n      const hasTransition = !!window.getComputedStyle(this.el).getPropertyValue('transition');\n\n      this.el.classList.remove('banner-animating');\n      this.el.classList.remove('banner-animating-out');\n\n      if (hasTransition) {\n        this.el.addEventListener('transitionend', this.onTransitionEnd);\n\n        setTimeout(() => {\n          this.el.classList.remove('banner-visible');\n          this.el.classList.add('banner-animating');\n          this.el.classList.add('banner-animating-out');\n        }, 10);\n      } else {\n        this._dismissed = true;\n        this.el.classList.remove('banner-visible');\n        deferred.resolve();\n      }\n    }\n\n    return deferred.promise();\n  }\n\n  _onDismiss() {\n    this._dismiss(true);\n  }\n\n  _onTransitionEnd() {\n    this.el.removeEventListener('transitionend', this.onTransitionEnd);\n    this.el.classList.remove('banner-animating');\n\n    if (this.el.classList.contains('banner-animating-in')) {\n      this.el.classList.remove('banner-animating-in');\n      this.el.classList.add('banner-visible');\n    }\n\n    if (this.el.classList.contains('banner-animating-out')) {\n      this.el.classList.remove('banner-animating-out');\n    }\n\n    if (this.dismissPromise) {\n      this._dismissed = true;\n      this.dismissPromise();\n    }\n  }\n}\n\nclass BannerManager {\n  constructor(options = {}) {\n    if (!instance) {\n      instance = this;\n    } else {\n      return instance;\n    }\n\n    target = options.target || target;\n    maxConcurrentBanners = options.maxConcurrentBanners || maxConcurrentBanners;\n    dismissIcon = options.dismissIcon || dismissIcon;\n\n    this.queue = [];\n    this.banners = [];\n    this.adjustBannerLocation = this._adjustBannerLocation.bind(this);\n\n    this.interval = setInterval(() => {\n      this._update();\n    }, 100);\n\n    $(window).on('sticky-header.banner-manager', this.adjustBannerLocation);\n\n    return instance;\n  }\n\n  add(message, type, priority, options = {}) {\n    this.queue.push(\n      {\n        message,\n        type,\n        priority,\n        options,\n      },\n    );\n    this.queue.sort((a, b) => a.priority - b.priority);\n  }\n\n  unload() {\n    $(window).off('sticky-header.banner-manager');\n    clearInterval(this.interval);\n    this.banners.forEach(banner => banner.destroy());\n  }\n\n  _update() {\n    this.banners.forEach((banner) => {\n      banner\n        .update()\n        .then(() => {\n          if (banner.dismissed) {\n            this.banners.splice(this.banners.indexOf(banner), 1);\n            banner.destroy();\n          }\n        });\n    });\n\n    if (\n      this.queue.length\n      && this.banners.length < maxConcurrentBanners\n    ) {\n      const { message, type, options } = this.queue.shift();\n\n      this.banners.push(new Banner(message, type, options));\n    }\n  }\n\n  _adjustBannerLocation(event, data) {\n    const { state, stickyOffset } = data;\n\n    if (state) {\n      target.classList.add('banners-sticky');\n    } else {\n      target.classList.remove('banners-sticky');\n    }\n\n    target.style.top = `${stickyOffset || 0}px`;\n  }\n}\n\nexport {\n  Type,\n  Priority,\n  BannerManager,\n  BannerManager as default,\n};\n","import $ from 'jquery';\nimport { events } from '../../Constants';\nimport { BannerManager, Type, Priority } from '../../components/BannerManager';\n\nlet instance = null;\n\nexport default class CartRequests {\n  constructor() {\n    if (!instance) {\n      instance = this;\n    } else {\n      return instance;\n    }\n\n    this.$window = $(window);\n    this.interval = null;\n    this.handlerHelpers = {};\n    this.postRequests = this._postRequests.bind(this);\n    this.handleResponse = this._handleResponse.bind(this);\n    this.handleError = this._handleError.bind(this);\n    \n    this.additionalHandlers = {\n      onResponse: null,\n      onError: null,\n    };\n\n    this.lastRequestTimestamp = Math.floor(Date.now());\n    this.postAfterLastRequestMillis = 1000;\n\n    this.noteRequest = null;\n    this.itemRequests = [];\n    this.inProgressItemRequests = [];\n\n    this.triggerCartReload = false;\n    this.recentItem = null;\n    this.lockSubmission = false;\n\n    this.bannerManager = new BannerManager();\n\n    this._init();\n\n    return instance;\n  }\n\n  submitItemRequest(variant, quantity, triggerCartReload = false) {\n    let itemRequest = this._findExistingItemRequest(variant);\n\n    if (itemRequest) {\n      itemRequest.quantity = quantity;\n    } else {\n      itemRequest = {\n        variant,\n        quantity,\n      };\n\n      this.itemRequests.push(itemRequest);\n    }\n\n    itemRequest.quantity = Math.max(0, itemRequest.quantity);\n\n    this.itemsRemoving = this._countItemsRemoving();\n    this.triggerCartReload = this.triggerCartReload || triggerCartReload;\n    this.recentItem = triggerCartReload ? variant : this.recentItem;\n    this.lastRequestTimestamp = Math.floor(Date.now());\n\n    this._triggerStartLoadingEvents();\n  }\n\n  submitNoteRequest(note) {\n    this.noteRequest = note;\n    this.lastRequestTimestamp = Math.floor(Date.now());\n    this._triggerStartLoadingEvents();\n  }\n\n  unload() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  setHandlers(responseHandlers) {\n    instance.handlerHelpers = $.extend({}, instance.additionalHandlers, responseHandlers);\n  }\n  \n  restoreHandlers() {\n    this.handlerHelpers = this.additionalHandlers;\n  }\n\n  _init() {\n    this.interval = setInterval(this.postRequests, this.postAfterLastRequestMillis);\n  }\n\n  _countItemsRemoving() {\n    return this.itemRequests.reduce((removing, itemRequest) => {\n      const quantity = itemRequest.quantity;\n\n      return quantity === 0 ? removing + 1 : removing;\n    }, 0);\n  }\n\n  _triggerStartLoadingEvents() {\n    this.itemRequests.forEach((itemRequest) => {\n      const request = itemRequest;\n\n      this.$window.trigger(\n        events.cart.item.loadingStart,\n        { request },\n      );\n    });\n\n    if (this.note) {\n      const request = this.note;\n\n      this.$window.trigger(\n        events.cart.note.loadingStart,\n        { request },\n      );\n    }\n\n    this.$window.trigger(\n      events.cart.loadingStart,\n      {\n        affectsTotal: this.itemRequests.length,\n        reload: this.triggerCartReload,\n        removing: this.itemsRemoving,\n      },\n    );\n  }\n\n  _triggerFinishLoadingEvent(cartResponse, itemResponses, error = false) {\n    itemResponses.forEach((itemResponse) => {\n      const response = itemResponse;\n\n      this.$window.trigger(\n        events.cart.item.loadingFinish,\n        { response },\n      );\n    });\n\n    this.$window.trigger(events.cart.note.loadingFinish);\n\n    this.$window.trigger(\n      events.cart.loadingFinish,\n      {\n        reponse: cartResponse,\n        reload: this.triggerCartReload,\n        removing: this.itemsRemoving,\n        subtotal: cartResponse.original_total_price,\n        recentItem: this.recentItem,\n        error,\n      },\n    );\n\n    this.triggerCartReload = false;\n    this.itemsRemoving = 0;\n  }\n\n  _parseItemResponses(cartResponse) {\n    const itemResponses = [];\n\n    for (let i = 0; i < this.inProgressItemRequests.length; i += 1) {\n      const itemRequest = this.inProgressItemRequests[i];\n      const itemResponse = {\n        variant: itemRequest.variant,\n        quantity: 0,\n        total: 0,\n      };\n\n      for (let j = 0; j < cartResponse.items.length; j += 1) {\n        const item = cartResponse.items[j];\n\n        if (itemRequest.variant === item.variant_id) {\n          itemResponse.variant = item.variant_id;\n          itemResponse.quantity = item.quantity;\n          itemResponse.total = item.original_line_price;\n        }\n      }\n\n      itemResponses.push(itemResponse);\n    }\n\n    return itemResponses;\n  }\n\n  _handleResponse(cartResponse) {\n    const itemResponses = this._parseItemResponses(cartResponse);\n\n    this._triggerFinishLoadingEvent(cartResponse, itemResponses);\n\n    this.inProgressItemRequests = [];\n    this.lockSubmission = false;\n\n    if (this.handlerHelpers.onResponse) {\n      this.handlerHelpers.onResponse(cartResponse);\n    }\n  }\n\n  _handleError(error) {\n    const get = $.get({\n      url: '/cart.js',\n      success: null,\n      dataType: 'json',\n    });\n\n    get.done((cartResponse) => {\n      const itemResponses = this._parseItemResponses(cartResponse);\n\n      if (this.handlerHelpers.onError) {\n        this.handlerHelpers.onError(error);\n      } else {\n        this.bannerManager.add(\n          error.responseJSON.description,\n          Type.error,\n          Priority.high,\n          { autoDismiss: 5 },\n        );\n      }\n\n      this._triggerFinishLoadingEvent(cartResponse, itemResponses, true);\n\n      this.inProgressItemRequests = [];\n      this.lockSubmission = false;\n    });\n  }\n\n  _shouldPostRequests() {\n    return (\n      !this.lockSubmission\n      && (\n        this.itemRequests.length > 0\n        || this.noteRequest !== null\n      ) && (\n        Math.floor(Date.now())\n        - this.lastRequestTimestamp\n        >= this.postAfterLastRequestMillis\n      )\n    );\n  }\n\n  _postRequests() {\n    if (!this._shouldPostRequests()) {\n      return;\n    }\n\n    let post = null;\n    const request = {\n      note: this.noteRequest,\n      updates: {},\n    };\n\n    this.itemRequests.forEach((itemRequest) => {\n      request.updates[itemRequest.variant] = itemRequest.quantity;\n    });\n\n    this.inProgressItemRequests = this.itemRequests;\n    this.lockSubmission = true;\n    this.noteRequest = null;\n    this.itemRequests = [];\n\n    post = $.post({\n      url: '/cart/update.js',\n      data: request,\n      success: () => {},\n      error: () => {},\n      dataType: 'json',\n    });\n\n    post\n      .done(this.handleResponse)\n      .fail(this.handleError);\n  }\n\n  _findExistingItemRequest(variant) {\n    let itemRequest = null;\n\n    this.itemRequests.forEach((iRequest) => {\n      if (iRequest.variant === variant) {\n        itemRequest = iRequest;\n      }\n    });\n\n    return itemRequest;\n  }\n}\n","import $ from 'jquery';\nimport { classes, selectors, events } from '../../Constants';\nimport PriceManager from '../PriceManager';\nimport Quantity from '../Quantity';\nimport CartRequests from './CartRequests';\n\nexport default class CartItem {\n  constructor(el, cart, options) {\n    this.$window = $(window);\n    this.el = el;\n    this.$el = $(el);\n    this.cart = cart;\n    this.moneyFormat = options.moneyFormat;\n    this.variant = el.getAttribute('data-cart-item') ? parseInt(el.getAttribute('data-cart-item'), 10) : null;\n    this.quantityEl = el.querySelector(selectors.quantity.el);\n    this.$removeEls = $(selectors.cart.item.remove, el);\n    this.$priceEls = $(selectors.cart.item.price, el);\n    this.totalEls = el.querySelectorAll(selectors.cart.item.total);\n    this.priceManager = null;\n    this.cartRequests = null;\n    this.slideUpComplete = false;\n\n    if (!this.variant) {\n      this.cart.removeCartItem(this);\n      this._destroy();\n    }\n\n    this.onClickRemove = this._onClickRemove.bind(this);\n    this.onQuantityChange = this._onQuantityChange.bind(this);\n    this.onCartItemLoadingStart = this._onCartItemLoadingStart.bind(this);\n    this.onCartItemLoadingFinish = this._onCartItemLoadingFinish.bind(this);\n    this.onSlideUpComplete = this._onSlideUpComplete.bind(this);\n\n    this._init();\n  }\n\n  _init() {\n    this.priceManager = new PriceManager(this.el, this.moneyFormat);\n    this.cartRequests = new CartRequests();\n    this.quantity = new Quantity(\n      this.quantityEl,\n      {\n        callback: this.onQuantityChange,\n      },\n    );\n\n    this.priceManager.updateAll();\n\n    this._bindEvents();\n  }\n\n  _bindEvents() {\n    this.$removeEls.on('click', this.onClickRemove);\n    this.$window.on(events.cart.item.loadingStart, this.onCartItemLoadingStart);\n    this.$window.on(events.cart.item.loadingFinish, this.onCartItemLoadingFinish);\n  }\n\n  _unbindEvents() {\n    this.$removeEls.off('click', this.onClickRemove);\n    this.$window.off(events.cart.item.loadingStart, this.onCartItemLoadingStart);\n    this.$window.off(events.cart.item.loadingFinish, this.onCartItemLoadingFinish);\n  }\n\n  _onClickRemove() {\n    this.cartRequests.submitItemRequest(this.variant, 0);\n  }\n\n  _onQuantityChange(event, data) {\n    const quantity = data.quantity;\n\n    this.cartRequests.submitItemRequest(this.variant, quantity);\n  }\n\n  _onCartItemLoadingStart(event, data) {\n    const { variant, quantity } = data.request;\n\n    if (this.variant === variant) {\n      // Reset visuals, in case we were already loading\n      this.$el\n        .removeClass(classes.cart.item.loading)\n        .removeClass(classes.cart.item.totalLoading);\n\n      // Fade entire cart item, or just totals depending on context\n      if (quantity === 0) {\n        this.$el.addClass(classes.cart.item.loading);\n      } else {\n        this.quantity.setQuantity(quantity, false);\n        this.$el.addClass(classes.cart.item.totalLoading);\n      }\n    }\n  }\n\n  _onCartItemLoadingFinish(event, data) {\n    const { variant, quantity, total } = data.response;\n\n    if (this.variant === variant) {\n      if (quantity === 0) {\n        // If quantity is 0, begin process of removing cart item from DOM\n        this.$el\n          .removeClass(classes.cart.item.loading)\n          .removeClass(classes.cart.item.totalLoading)\n          .addClass(classes.cart.item.sliding);\n\n        $(selectors.cart.item.slide, this.$el).slideUp(this.onSlideUpComplete);\n      } else {\n        this.quantity.setQuantity(quantity, false);\n\n        // Otherwise, update all prices with the new value and remove loading animation\n        for (let i = 0; i < this.totalEls.length; i++) {\n          const totalEl = this.totalEls[i];\n\n          this.priceManager.updatePrice(totalEl, total);\n        }\n\n        this.$el\n          .removeClass(classes.cart.item.loading)\n          .removeClass(classes.cart.item.totalLoading);\n      }\n    }\n  }\n\n  _onSlideUpComplete() {\n    if (this.slideUpComplete) {\n      return;\n    }\n\n    // Emit trigger for components to react to removal\n    this.$window.trigger(events.cart.item.removingFinished, { cart: this.cart });\n\n    this.slideUpComplete = true;\n    // Remove the item from the cart instance\n    this.cart.removeCartItem(this);\n    // Remove the item from the DOM\n    this._destroy();\n  }\n\n  _destroy() {\n    this.unload();\n    this.$el.remove();\n  }\n\n  unload() {\n    this._unbindEvents();\n    this.quantity.unload();\n  }\n}\n","import $ from 'jquery';\nimport $script from 'scriptjs';\nimport { selectors, classes, events } from '../../Constants';\nimport CartRequests from './CartRequests';\nimport CartItem from './CartItem';\nimport PriceManager from '../PriceManager';\n\n// TODO: Handle cart/vs mini-cart differences\n// TODO: Additional cart buttons\n\nexport default class Cart {\n  constructor(el, options = {}) {\n    this.el = el;\n    this.$el = $(el);\n    this.moneyFormat = options.moneyFormat;\n    this.shipping = options.shipping;\n    this.$window = $(window);\n    this.isInline = this.$el.hasClass(classes.cart.inline);\n    this.hasShipping = $(selectors.cart.shipping.el, el).length;\n\n    this.cartRequests = new CartRequests();\n\n    this.onExpandClick = this._onExpandClick.bind(this);\n    this.onOtherItemsClick = this._onOtherItemsClick.bind(this);\n    this.onNoteChange = this._onNoteChange.bind(this);\n    this.onLoadingStart = this._onLoadingStart.bind(this);\n    this.onLoadingFinish = this._onLoadingFinish.bind(this);\n    this.onShippingSubmit = this._onShippingSubmit.bind(this);\n    this.renderShippingResponse = this._renderShippingResponse.bind(this);\n\n    this.$scripts = $('[data-scripts]');\n\n    $script(this.$scripts.data('shopify-api-url'), () => {\n      if (this.hasShipping) {\n        Shopify.onError = this._onError.bind(this);\n\n        $script(this.$scripts.data('shopify-countries'), () => {\n          $script(this.$scripts.data('shopify-common'), () => {\n            $script(this.$scripts.data('shopify-jquery-cart'), () => {\n              this._initShippingCalc();\n            });\n          });\n        });\n      }\n    });\n\n\n    this._init();\n  }\n\n  removeCartItem(cartItem) {\n    const index = this.items.indexOf(cartItem);\n\n    this.items.splice(index, 1);\n  }\n\n  unload() {\n    if (this.note) {\n      this.note.removeEventListener('change', this.onNoteChange);\n    }\n\n    this.$expandButtons.off('click', this.onExpandClick);\n    this.$window.off(events.cart.loadingStart, this.onLoadingStart);\n    this.$window.off(events.cart.loadingFinish, this.onLoadingFinish);\n\n    for (let i = 0; i < this.items.length; i += 1) {\n      this.items[i].unload();\n    }\n  }\n\n  _init() {\n    this.$expandButtons = $(selectors.cart.expand, this.el);\n    this.note = this.el.querySelector(selectors.cart.note);\n    this.items = this._createItems();\n    this.hasItems = this.items.length;\n    this.$otherItemsButton = $(selectors.cart.otherItemsButton, this.el);\n    this.totals = this.el.querySelector(selectors.cart.totals);\n    this.subtotal = this.el.querySelector(selectors.cart.subtotal);\n\n    this.priceManager = new PriceManager(this.totals, this.moneyFormat);\n    this.priceManager.updateAll();\n\n    if (this.note) {\n      this.note.addEventListener('change', this.onNoteChange);\n    }\n\n    this.$expandButtons.on('click', this.onExpandClick);\n    this.$otherItemsButton.on('click', this.onOtherItemsClick);\n    this.$window.on(events.cart.loadingStart, this.onLoadingStart);\n    this.$window.on(events.cart.loadingFinish, this.onLoadingFinish);\n\n    this.$el.removeClass(classes.cart.expanded);\n    this.$el.toggleClass(classes.cart.empty, !this.hasItems);\n  }\n\n  _initShippingCalc() {\n    this.$shippingResponse = $(selectors.cart.shipping.response, this.el);\n    this.$shippingResponseMessage = $(selectors.cart.shipping.message, this.el);\n    this.$shippingResponseRates = $(selectors.cart.shipping.rates, this.el);\n    this.$shippingSubmit = $(selectors.cart.shipping.submit, this.el);\n\n    Shopify.Cart.ShippingCalculator.show({\n      submitButton: this.shipping.submitText,\n      submitButtonDisabled: this.shipping.submittingText,\n      customerIsLoggedIn: this.shipping.customerIsLoggedIn,\n      moneyFormat: this.moneyFormat,\n    });\n\n    this.$shippingSubmit.on('click', this.onShippingSubmit);\n  }\n\n  _createItems() {\n    const itemEls = this.el.querySelectorAll(selectors.cart.item.el);\n    const items = [];\n\n    for (let i = 0; i < itemEls.length; i += 1) {\n      items.push(\n        new CartItem(\n          itemEls[i],\n          this,\n          { moneyFormat: this.moneyFormat },\n        ),\n      );\n    }\n\n    return items;\n  }\n\n  _onExpandClick(event) {\n    const $target = $(event.currentTarget);\n    const $expandable = $($target.siblings(selectors.cart.expandable));\n\n    $target.toggleClass(classes.cart.expandable.expanded);\n    $expandable.slideToggle();\n  }\n\n  _onOtherItemsClick(event) {\n    event.preventDefault();\n\n    this.$otherItemsButton.remove();\n    this.$el.addClass(classes.cart.expanded);\n\n    for (let i = 0; i < this.items.length; i += 1) {\n      const $itemEl = $(`[data-cart-item=\"${this.items[i].variant}\"]`, this.el);\n      $itemEl.addClass(classes.cart.item.inlineVisible);\n    }\n\n    $(window).trigger(events.cart.inlineVisible);\n  }\n\n  _onNoteChange(event) {\n    const $target = $(event.currentTarget);\n    const note = $.trim($target.val());\n\n    this.cartRequests.submitNoteRequest(note);\n  }\n\n  _onLoadingStart(event, data) {\n    const {\n      affectsTotal,\n      reload,\n      removing,\n    } = data;\n\n    $(selectors.cart.submit, this.$el).prop('disabled', true);\n\n    this.$el.addClass(classes.cart.loading);\n\n    if (affectsTotal) {\n      this.$el.addClass(classes.cart.loadingAffectsTotal);\n    }\n\n    if (reload) {\n      this.$el.addClass(classes.cart.reloading);\n      this.$el.trigger(events.cart.reloadStart);\n    }\n\n    if (this.items.length === removing) {\n      this.$el.css('min-height', this.$el.height());\n      this.$el.addClass(classes.cart.reloading);\n    }\n  }\n\n  _onLoadingFinish(event, data) {\n    const {\n      reload,\n      removing,\n      subtotal,\n      recentItem,\n      error,\n    } = data;\n\n    this.priceManager.updatePrice(this.subtotal, subtotal);\n    this.priceManager.updateAll();\n\n    $(selectors.cart.submit, this.$el).prop('disabled', false);\n\n    this.$el.removeClass(classes.cart.loading);\n    this.$el.removeClass(classes.cart.loadingAffectsTotal);\n\n    if (reload) {\n      this.unload();\n\n      $.ajax({\n        url: `${document.location.origin}/cart`,\n        data: {\n          view: this.isInline ? 'inline' : 'mini-cart',\n        },\n        dataType: 'html',\n        method: 'GET',\n      }).done((response) => {\n        const $response = $(response);\n        const $form = $response.find(selectors.cart.form);\n\n        $form.replaceAll(this.$el.find(selectors.cart.form));\n\n        this._init();\n\n        if (this.isInline && recentItem) {\n          const $recentItemEl = $(`[data-cart-item=\"${recentItem}\"]`, this.el);\n          this.$el.find(selectors.cart.atcSuccess).show();\n\n          $recentItemEl.addClass(classes.cart.item.inlineRecentlyAdded);\n        }\n\n        this.$el.removeClass(classes.cart.reloading);\n        this.$el.trigger(events.cart.reloadFinish, { error });\n      });\n    }\n\n    if (this.items.length === removing) {\n      this.$el.css('min-height', '');\n      this.$el.removeClass(classes.cart.reloading);\n      this.$el.addClass(classes.cart.empty);\n    }\n  }\n\n  _onShippingSubmit(event) {\n    event.preventDefault();\n\n    this._disableShippingButton();\n\n    const shippingAddress = {};\n    shippingAddress.country = $('#address_country').val() || '';\n    shippingAddress.province = $('#address_province').val() || '';\n    shippingAddress.zip = $('#address_zip').val() || '';\n\n    // Creates an ajax request which returns shipping information\n    Shopify.getCartShippingRatesForDestination(shippingAddress, this.renderShippingResponse);\n  }\n\n  /**\n   * Handle Errors returned from Shopify\n   *\n   * @param xhr\n   * @private\n   */\n  _onError(xhr = null) {\n    if (!xhr) {\n      return;\n    }\n\n    const errors = $.parseJSON(xhr.responseText);\n\n    if (errors.zip.length > 0) {\n      // Hide the response so that it can be populated smoothly\n      this._hideShippingResponse();\n\n      // Empty out contents\n      this.$shippingResponseMessage.empty();\n      this.$shippingResponseRates.empty();\n\n      if (errors.zip[0].indexOf('is not valid') !== -1 || errors.zip[0].indexOf('can\\'t be blank') !== -1) {\n        this.$shippingResponseMessage.html(`${this.shipping.postalcode} ${errors.zip}`);\n      }\n\n      this._showShippingResponse();\n      this._enableShippingButton();\n    }\n  }\n\n  _renderShippingResponse(response, shippingAddress) {\n    const addressBase = [];\n\n    if (shippingAddress.zip.length) {\n      addressBase.push(shippingAddress.zip.trim());\n    }\n\n    if (shippingAddress.province.length) {\n      addressBase.push(shippingAddress.province);\n    }\n\n    if (shippingAddress.country.length) {\n      addressBase.push(shippingAddress.country);\n    }\n\n    const address = addressBase.join(', ');\n\n    // Hide the response so that it can be populated smoothly\n    this._hideShippingResponse();\n\n    // Empty out contents\n    this.$shippingResponseMessage.empty();\n    this.$shippingResponseRates.empty();\n\n    let responseText = '';\n\n    if (response.length > 1) {\n      const firstRate = Shopify.Cart.ShippingCalculator.formatRate(response[0].price);\n      responseText = this.shipping.multiple_rates\n        .replace('*address*', address)\n        .replace('*number_of_rates*', response.length)\n        .replace('*rate*', `<span class=\"money\">${firstRate}</span>`);\n    } else if (response.length === 1) {\n      responseText = this.shipping.one_rate.replace('*address*', address);\n    } else {\n      responseText = this.shipping.no_rates;\n    }\n\n    this.$shippingResponseMessage.html(responseText);\n\n    for (let i = 0; i < response.length; i++) {\n      const rate = response[i];\n      const price = Shopify.Cart.ShippingCalculator.formatRate(rate.price);\n      const rateValue = this.shipping.rate_value\n        .replace('*rate_title*', rate.name)\n        .replace('*rate*', `<span class=\"money\">${price}</span>`);\n\n      this.$shippingResponseRates.append(`<li>${rateValue}</li>`);\n    }\n\n    // Reset the calculating button so it can be used again\n    this._enableShippingButton();\n\n    // Show the response\n    this._showShippingResponse();\n  }\n\n  _enableShippingButton() {\n    this.$shippingSubmit\n      .text(this.shipping.submit_text)\n      .attr('disabled', false);\n  }\n\n  _disableShippingButton() {\n    this.$shippingSubmit\n      .text(this.shipping.submitting_text)\n      .attr('disabled', true);\n  }\n\n  _showShippingResponse() {\n    this.$shippingResponse.addClass(classes.cart.shipping.responseVisible);\n  }\n\n  _hideShippingResponse() {\n    this.$shippingResponse.removeClass(classes.cart.shipping.responseVisible);\n  }\n}\n","import $ from 'jquery';\n\nexport default class Popover {\n  constructor(reference, attachment, options = {}) {\n    const defaults = {\n      animateHeight: true,\n      fixed: true,\n      attach: 'top',\n      boundaryElement: null,\n    };\n\n    this.reference = reference;\n    this.attachment = attachment;\n    this.$attachment = $(attachment);\n    this.options = $.extend(\n      {},\n      defaults,\n      options,\n    );\n\n    this.onClick = this._onClick.bind(this);\n\n    this.deferred = {\n      action: 'none',\n      object: $.Deferred(),\n    };\n    this.isEnabled = false;\n    this.isOpen = false;\n    this.referencePoint = 0;\n    this.viewportHeight = 0;\n  }\n\n  get enabled() {\n    return this.isEnabled;\n  }\n\n  enable() {\n    if (this.isEnabled) {\n      return;\n    }\n\n    this.attachment.addEventListener('click', this.onClick);\n    this.reference.classList.add('popover-reference');\n    this.attachment.classList.add('popover-attachment');\n\n    if (this.options.fixed) {\n      this.reference.classList.add('popover-reference-fixed');\n      this.attachment.classList.add('popover-attachment-fixed');\n    }\n\n    this.isEnabled = true;\n  }\n\n  disable(force = false) {\n    if (!this.isEnabled) {\n      return $.Deferred.reject().promise();\n    }\n\n    if (this.isOpen) {\n      return this.close(force).then(() => {\n        this.attachment.removeEventListener('click', this.onClick);\n        this.reference.classList.remove('popover-reference');\n        this.attachment.classList.remove('popover-attachment');\n\n        if (this.options.fixed) {\n          this.reference.classList.remove('popover-reference-fixed');\n          this.attachment.classList.remove('popover-attachment-fixed');\n        }\n\n        this.isEnabled = false;\n      });\n    }\n\n    this.attachment.removeEventListener('click', this.onClick);\n    this.reference.classList.remove('popover-reference');\n    this.attachment.classList.remove('popover-attachment');\n\n    if (this.options.fixed) {\n      this.reference.classList.remove('popover-reference-fixed');\n      this.attachment.classList.remove('popover-attachment-fixed');\n    }\n\n    this.attachment.setAttribute('style', '');\n    this.isEnabled = false;\n\n    return $.Deferred().resolve().promise();\n  }\n\n  open(force = false) {\n    const deferred = $.Deferred();\n\n    if (!this.isEnabled) {\n      return $.Deferred().reject().promise();\n    }\n\n    if (\n      this.deferred.action === 'open'\n      && this.deferred.object.state() === 'pending'\n    ) {\n      return $.Deferred().reject().promise();\n    }\n\n    if (this.deferred.object.state() === 'pending') {\n      this.deferred.object.reject();\n    }\n\n    this.deferred = {\n      action: 'open',\n      object: deferred,\n    };\n    this.isOpen = true;\n\n    if (this.options.fixed) {\n      this._fixToReference();\n    } else {\n      this._absoluteToReference();\n    }\n\n    this.$attachment.revealer('show', force).one('transitionend', () => {\n      if (deferred.state() !== 'pending') {\n        return;\n      }\n\n      this.reference.classList.add('popover-open');\n      this.attachment.classList.add('popover-open');\n\n      if (this.options.animateHeight) {\n        const height = this.attachment.getBoundingClientRect().height;\n\n        this.attachment.style.height = `${height}px`;\n      }\n\n      deferred.resolve();\n    });\n\n    return deferred.promise();\n  }\n\n  close(force = false) {\n    const deferred = $.Deferred();\n\n    if (!this.isEnabled) {\n      return $.Deferred().reject().promise();\n    }\n\n    if (\n      this.deferred.action === 'close'\n      && this.deferred.object.state() === 'pending'\n    ) {\n      return $.Deferred().reject().promise();\n    }\n\n    if (this.deferred.object.state() === 'pending') {\n      this.deferred.object.reject();\n    }\n\n    this.deferred = {\n      action: 'close',\n      object: deferred,\n    };\n    this.isOpen = false;\n\n    this.$attachment.revealer('hide', force).one('trend', () => {\n      if (deferred.state() !== 'pending') {\n        return;\n      }\n\n      this.reference.classList.remove('popover-open');\n      this.attachment.classList.remove('popover-open');\n      this.attachment.setAttribute('style', '');\n\n      deferred.resolve();\n    });\n\n    return deferred.promise();\n  }\n\n  toggle() {\n    if (!this.isEnabled) {\n      return $.Deferred().reject().promise();\n    }\n\n    if (this.isOpen) {\n      return this.close();\n    }\n\n    return this.open();\n  }\n\n  update() {\n    if (!this.isEnabled) {\n      return $.Deferred().reject().promise();\n    }\n\n    const currentHeight = this.attachment.getBoundingClientRect().height;\n    this.attachment.style.height = '';\n\n    if (this.options.fixed) {\n      this._fixToReference();\n    } else {\n      this._absoluteToReference();\n    }\n\n    if (this.options.animateHeight) {\n      const toHeight = this.attachment.getBoundingClientRect().height;\n\n      return this._animateHeight(currentHeight, toHeight);\n    }\n\n    this.attachment.style.height = `${currentHeight}px`;\n\n    return $.Deferred().resolve().promise();\n  }\n\n  unload() {\n    this.disable();\n  }\n\n  _onClick(event) {\n    event.stopPropagation();\n  }\n\n  _fixToReference() {\n    const height = document.documentElement.getBoundingClientRect().height;\n\n    this.attachment.style.position = 'fixed';\n\n    if (!this.viewportHeight) {\n      this.referencePoint = this.options.attach === 'top'\n        ? this.reference.getBoundingClientRect().top\n        : this.reference.getBoundingClientRect().bottom;\n      this.viewportHeight = height;\n    }\n\n    // If the available document element height is still the same,\n    // the iOS or other overlay is changing, so don't change position\n    if (this.viewportHeight === height) {\n      this.attachment.style.bottom = `${height - this.referencePoint}px`;\n      return;\n    }\n\n    this.referencePoint = this.options.attach === 'top'\n      ? this.reference.getBoundingClientRect().top\n      : this.reference.getBoundingClientRect().bottom;\n    this.viewportHeight = height;\n    this.attachment.style.bottom = `${height - this.referencePoint}px`;\n  }\n\n  _absoluteToReference() {\n    this.attachment.style.position = 'absolute';\n    this.attachment.style.bottom = 0;\n\n    if (this.options.boundaryElement) {\n      this._constrainToBoundary();\n    }\n  }\n\n  _constrainToBoundary() {\n    const boundaryRect = this.options.boundaryElement.getBoundingClientRect();\n    const boundaryHeight = boundaryRect.height;\n    const boundaryTop = boundaryRect.top;\n\n    const currentBottom = this.attachment.style.bottom;\n\n    // We can't get the box shadow of elements, subtract arbitrary value\n    // to accomodate box shadows\n    this.attachment.style.maxHeight = `${boundaryHeight - 2}px`;\n    this.attachment.style.transition = 'none';\n    this.attachment.style.bottom = 0;\n    this.attachment.classList.add('popover-open');\n\n    const attachmentRect = this.attachment.getBoundingClientRect();\n    const attachmentTop = attachmentRect.top;\n\n    let offset = 0;\n\n    if (boundaryTop > attachmentTop) {\n      offset = boundaryTop - attachmentTop;\n    }\n\n    this.attachment.classList.remove('popover-open');\n    this.attachment.style.bottom = currentBottom;\n    this.attachment.style.transition = '';\n    this.attachment.style.bottom = `-${offset}px`;\n  }\n\n  _animateHeight(from, to) {\n    const deferred = $.Deferred();\n\n    if (this.deferred.object.state() === 'pending') {\n      return $.Deferred().reject().promise();\n    }\n\n    this.deferred = {\n      action: 'animate-height',\n      object: deferred,\n    };\n    this.attachment.style.height = `${from}px`;\n\n    window.requestAnimationFrame(() => {\n      if (deferred.state() !== 'pending') {\n        return;\n      }\n\n      $(this.attachment).one('transitionend', () => deferred.resolve());\n      this.attachment.style.height = `${to}px`;\n\n      // Automatically resolve after 1 second if no transition is applied\n      setTimeout(() => {\n        if (deferred.state() === 'pending') {\n          deferred.resolve();\n        }\n      }, 2500);\n    });\n\n    return deferred.promise();\n  }\n}\n","export default class ScrollHinter {\n  constructor(el) {\n    this.el = el;\n    this.parent = this.el.parentNode;\n\n    this.checkScroll = this._checkScroll.bind(this);\n    this._bindEvents();\n\n    this._checkScroll();\n  }\n\n  _checkScroll() {\n    const { scrollLeft, scrollWidth } = this.el;\n    const { width } = this.el.getBoundingClientRect();\n\n    const overflowsLeft = scrollLeft > 0;\n    const overflowsRight = scrollLeft < scrollWidth - width;\n\n    this._toggleClasses({ overflowsLeft, overflowsRight });\n  }\n\n  unload() {\n    this.el.removeEventListener('scroll', this.checkScroll);\n\n    this._toggleClasses({ overflowsLeft: false, overflowsRight: false });\n  }\n\n  _bindEvents() {\n    this.el.addEventListener('scroll', this.checkScroll);\n  }\n\n  _toggleClass(el, className, condition) {\n    if (condition) {\n      el.classList.add(className);\n    } else {\n      el.classList.remove(className);\n    }\n  }\n\n  _toggleClasses(overflows = {}) {\n    const { overflowsLeft, overflowsRight } = overflows;\n\n    this._toggleClass(this.parent, 'overflows-left', overflowsLeft);\n    this._toggleClass(this.parent, 'overflows-right', overflowsRight);\n  }\n}\n","import $ from 'jquery';\nimport layout from '../Layout';\nimport VariantHelper from '../VariantHelper';\nimport Quantity from './Quantity';\nimport QuantitySubmit from './QuantitySubmit';\nimport Cart from '../components/cart/Cart';\nimport Popover from '../helpers/Popover';\n\nimport { selectors, classes, events } from '../Constants';\nimport ScrollHinter from '../helpers/ScrollHinter';\n\nexport default class ProductAtc {\n  constructor(options = {}) {\n    this.$window = $(window);\n\n    const defaults = {\n      el: null,\n      container: null,\n      moneyFormat: null,\n      product: null,\n      cartRedirect: null,\n      variantAvailable: null,\n      textStrings: {\n        add_to_cart: '',\n        quantity_text: '',\n        quantity_disable: '',\n      },\n      onATCSubmit: () => {},\n      onATCSuccess: () => {},\n    };\n\n    this.config = $.extend(true, {}, defaults, options);\n\n    if (\n      !this.config.el\n      || !this.config.product\n      || !this.config.textStrings\n    ) {\n      return console.warn('Unable to initiate ProductAtc.js');\n    }\n\n    this.$el = $(this.config.el);\n    this.cartEl = this.config.el.querySelector(selectors.cart.el);\n    this.$cartEl = $(this.cartEl);\n    this.form = this.config.el.querySelector(selectors.product.form.el);\n    this.quantityEl = this.config.el.querySelector(selectors.quantity.input);\n    this.trigger = this.config.el.querySelector(selectors.popover.triggers.atcSteps);\n    this.triggers = this.config.el.querySelectorAll(selectors.popover.triggers.atcToggle);\n    this.contentForm = this.config.el.querySelector(selectors.popover.contents.atcStepForm);\n    this.contentCart = this.config.el.querySelector(selectors.popover.contents.atcStepCart);\n    this.dcbSubmit = this.config.el.querySelector(selectors.product.form.dcbSubmit);\n    this.$dcbSubmit = $(this.dcbSubmit);\n    this.$dcbSubmitText = this.$dcbSubmit.find(selectors.product.form.dcbSubmitText);\n\n    this.optionGroups = this.form.querySelectorAll('.option-value-group');\n    this.scrollHinters = [];\n\n    this.triggerFormPopover = new Popover(\n      this.trigger,\n      this.contentForm,\n    );\n    this.triggerCartPopover = new Popover(\n      this.trigger,\n      this.contentCart,\n    );\n    this.formCartPopoverFixed = new Popover(\n      this.contentForm,\n      this.contentCart,\n    );\n    this.formCartPopoverAbsolute = new Popover(\n      this.contentForm,\n      this.contentCart,\n      {\n        fixed: false,\n        boundaryElement: this.config.container,\n      },\n    );\n    this.activePopover = this.formCartPopoverAbsolute;\n    this.activePopover.enable();\n\n    this.formAtc = this.config.el.querySelector(selectors.product.form.atc);\n    this.isStatic = this.$el.hasClass(classes.product.atc.static);\n    this.isDefaultVariant = this.$el.hasClass(classes.product.atc.defaultVariant);\n    this.submitting = false;\n\n    this.variantHelper = null;\n    this.quantity = null;\n    this.cart = null;\n\n    this.onTriggerClick = this._onTriggerClick.bind(this);\n    this.onBodyClick = this._onBodyClick.bind(this);\n    this.onSubmit = this._onSubmit.bind(this);\n    this.onCartReloadFinish = this._onCartReloadFinish.bind(this);\n    this.onCartItemRemoveFinish = this._onCartItemRemoveFinish.bind(this);\n    this.onVariantSwitch = this._onVariantSwitch.bind(this);\n    this.updatePopper = this._updatePopper.bind(this);\n\n    this._init();\n  }\n\n  unload() {\n    if (this.variantHelper) {\n      this.variantHelper.unload();\n      this.variantHelper = null;\n    }\n\n    this.quantity.unload();\n    this.quantity = null;\n\n    this.cart.cartRequests.restoreHandlers();\n\n    if (this.triggers.length > 0) {\n      for (let i = 0; i < this.triggers.length; i++) {\n        this.triggers[i].removeEventListener('click', this.onTriggerClick);\n      }\n    }\n\n    this.scrollHinters.forEach((hinter) => {\n      hinter.unload();\n    });\n\n    if (!this.isStatic) {\n      layout.offBreakpointChange(this._onBreakpointChange);\n    }\n\n    document.body.removeEventListener('click', this.onBodyClick);\n    this.form.removeEventListener('submit', this.onSubmit);\n    this.$window.off('resize', this.updatePopper);\n    this.$window.off(events.cart.inlineVisible, this.updatePopper);\n    this.$cartEl.off(events.cart.reloadFinish, this.onCartReloadFinish);\n    this.$window.off(events.cart.item.removingFinished, this.onCartItemRemoveFinish);\n    this.$window.off('product-variant-switch', this.onVariantSwitch);\n  }\n\n  _init() {\n    const $productVariants = $(selectors.product.form.variants, this.form);\n    const $productOptions = $(selectors.product.form.productOption, this.form);\n\n    this.cart = new Cart(this.cartEl, {\n      moneyFormat: this.config.moneyFormat,\n    });\n\n    this.variantHelper = $productOptions.length\n      ? new VariantHelper(\n        this.config.product,\n        $productVariants,\n        $productOptions,\n      )\n      : null;\n\n    if (this.dcbSubmit) {\n      this.quantity = new Quantity(\n        this.form.querySelector(selectors.product.form.quantity),\n      );\n    } else {\n      this.quantity = new QuantitySubmit(\n        this.form.querySelector(selectors.product.form.quantity),\n        {\n          submitCallback: this.onSubmit,\n          text: this.config.textStrings.quantity_text,\n          disableText: this.config.textStrings.quantity_disable,\n        },\n      );\n    }\n\n    this._atcState(this.config.variantAvailable);\n\n    if (this.triggers.length > 0) {\n      for (let i = 0; i < this.triggers.length; i++) {\n        this.triggers[i].addEventListener('click', this.onTriggerClick);\n      }\n    }\n\n    if (!this.isStatic) {\n      this._onBreakpointChange = this._onBreakpointChange.bind(this);\n      layout.onBreakpointChange(this._onBreakpointChange);\n\n      this._enablePopoverByBreakpoint(layout.getBreakpoint());\n      this._addScrollHinters();\n    }\n\n    document.body.addEventListener('click', this.onBodyClick);\n    this.form.addEventListener('submit', this.onSubmit);\n    this.$window.on('resize', this.updatePopper);\n    this.$window.on(events.cart.inlineVisible, this.updatePopper);\n    this.$cartEl.on(events.cart.reloadFinish, this.onCartReloadFinish);\n    this.$window.on(events.cart.item.removingFinished, this.onCartItemRemoveFinish);\n    this.$window.on('product-variant-switch', this.onVariantSwitch);\n  }\n\n  _addScrollHinters() {\n    for (let i = 0; i < this.optionGroups.length; i += 1) {\n      this.scrollHinters.push(new ScrollHinter(this.optionGroups[i]));\n    }\n  }\n\n  _checkScrollHinters() {\n    this.scrollHinters.forEach((hinter) => {\n      hinter.checkScroll();\n    });\n  }\n\n  _onBreakpointChange(events, breakpoints = {}) {\n    this._enablePopoverByBreakpoint(breakpoints.current);\n  }\n\n  _changePopover(popover, force = false) {\n    const deferred = $.Deferred();\n\n    if (this.activePopover === popover) {\n      return deferred.resolve().promise();\n    }\n\n    this.activePopover.disable(force).then(() => {\n      this.activePopover = popover;\n      this.activePopover.enable();\n\n      deferred.resolve();\n    });\n\n    return deferred.promise();\n  }\n\n  _enablePopoverByBreakpoint(breakpoint) {\n    let popover = null;\n\n    switch (breakpoint) {\n      case 'XS':\n      case 'S':\n        popover = this.isDefaultVariant\n          ? this.formCartPopoverFixed\n          : this.triggerFormPopover;\n        break;\n      case 'M':\n      case 'L':\n      case 'XL':\n      default:\n        popover = this.formCartPopoverAbsolute;\n        break;\n    }\n\n    this._changePopover(popover, true);\n  }\n\n  _onTriggerClick(event) {\n    event.stopPropagation();\n\n    if (this.activePopover === this.triggerCartPopover) {\n      this._changePopover(this.triggerFormPopover);\n    } else {\n      this.activePopover.toggle().then(() => {\n        if (this.activePopover.attachment === this.contentForm) {\n          this._checkScrollHinters();\n        }\n      });\n    }\n  }\n\n  _onBodyClick() {\n    this.activePopover.close();\n  }\n\n  _onSubmit(event) {\n    if (this.config.cartRedirect) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (this.quantityEl.getAttribute('disabled')) {\n      return;\n    }\n\n    if (this.config.onATCSubmit) {\n      this.config.onATCSubmit();\n    }\n\n    const form = $(this.form).serializeArray();\n\n    let variant = null;\n    let quantity = null;\n\n    form.forEach((data) => {\n      switch (data.name) {\n        case 'id':\n          variant = data.value;\n          break;\n        case 'quantity':\n          quantity = data.value;\n          break;\n        default:\n          break;\n      }\n    });\n\n    if (!variant || !quantity) {\n      // TODO: Better error messaging\n      console.error('Error submitting product form.');\n      return;\n    }\n\n    this.formAtc.classList.add(classes.product.atc.loading);\n    this.cart.cartRequests.submitItemRequest(variant, quantity, true);\n\n    this.submitting = true;\n  }\n\n  _updatePopper() {\n    this.activePopover.update();\n  }\n\n  _onCartReloadFinish(event, data) {\n    if (!this.submitting) {\n      return;\n    }\n\n    const error = data.error;\n\n    this.formAtc.classList.remove(classes.product.atc.loading);\n\n    if (error) {\n      return;\n    }\n\n    if (this.triggers.length > 0) {\n      for (let i = 0; i < this.triggers.length; i++) {\n        this.triggers[i].removeEventListener('click', this.onTriggerClick);\n      }\n\n      this.triggers = this.config.el.querySelectorAll(selectors.popover.triggers.atcToggle);\n\n      for (let i = 0; i < this.triggers.length; i++) {\n        this.triggers[i].addEventListener('click', this.onTriggerClick);\n      }\n    }\n\n    if (this.config.onATCSuccess) {\n      this.config.onATCSuccess();\n    }\n\n    if (this.activePopover === this.triggerFormPopover) {\n      this._changePopover(this.triggerCartPopover).then(\n        () => this.activePopover.open(),\n      );\n    } else {\n      this.activePopover.open();\n    }\n\n    this.submitting = false;\n  }\n\n  _onCartItemRemoveFinish(event, data) {\n    const cart = data.cart;\n\n    if (this.cart !== cart) {\n      return;\n    }\n\n    this.activePopover.update();\n  }\n\n  _onVariantSwitch(event, data) {\n    const variant = data.variant;\n\n    this._atcState(variant.available);\n  }\n\n  _atcState(available) {\n    this.quantity.setDisable(!available);\n\n    if (this.$dcbSubmit.length) {\n      this.$dcbSubmit.prop('disabled', !available);\n      this.$dcbSubmitText.text(available\n        ? this.config.textStrings.add_to_cart\n        : this.config.textStrings.quantity_disable);\n    }\n  }\n}\n","import $ from 'jquery';\nimport $script from 'scriptjs';\nimport RichText from './RichText';\nimport ProductGallery from './ProductGallery';\nimport ProductAtc from './ProductAtc';\nimport PriceManager from './PriceManager';\n\nimport { selectors } from '../Constants';\n\nexport default class ProductLayout {\n  constructor(options = {}) {\n    this.$window = $(window);\n\n    const defaults = {\n      el: null,\n      moneyFormat: null,\n      product: null,\n      variantAvailable: null,\n      textStrings: null,\n      enableHistory: false,\n      onATCSubmit: () => {},\n      onATCSuccess: () => {},\n    };\n\n    this.config = $.extend({}, defaults, options);\n\n    if (\n      !this.config.el\n      || !this.config.moneyFormat\n      || !this.config.product\n      || !this.config.textStrings\n    ) {\n      return console.warn('Unable to initiate ProductLayout.js');\n    }\n\n    this.product = this.config.product;\n\n    this.description = this.config.el.querySelector(selectors.product.description);\n    this.$productEl = $(this.config.el).find(selectors.product.el).addBack(selectors.product.el);\n    this.atc = this.config.el.querySelector(selectors.product.atc);\n    this.gallery = this.config.el.querySelector(selectors.product.gallery);\n\n    this.richText = null;\n    this.productGallery = null;\n    this.productAtc = null;\n\n    this.$scripts = $('[data-scripts]');\n\n    $script(this.$scripts.data('shopify-api-url'), () => { this._init(); });\n  }\n\n  unload() {\n    if (this.richText) {\n      this.richText.unload();\n      this.richText = null;\n    }\n\n    if (this.productGallery) {\n      this.productGallery.unload();\n      this.productGallery = null;\n    }\n\n    if (this.productAtc) {\n      this.productAtc.unload();\n      this.productAtc = null;\n    }\n\n    this.$window.off(`product-variant-switch.product-layout-${this.product.id}`);\n  }\n\n  _init() {\n    if (this.description) {\n      this.richText = new RichText(this.description);\n    }\n\n    if (this.gallery) {\n      this.productGallery = new ProductGallery({\n        el: this.gallery,\n      });\n    }\n\n    if (this.atc) {\n      this.productAtc = new ProductAtc({\n        el: this.atc,\n        container: this.$productEl[0],\n        product: this.config.product,\n        cartRedirect: this.config.cartRedirect,\n        moneyFormat: this.config.moneyFormat,\n        variantAvailable: this.config.variantAvailable,\n        textStrings: this.config.textStrings,\n        onATCSubmit: this.config.onATCSubmit,\n        onATCSuccess: this.config.onATCSuccess,\n      });\n    }\n\n    this.priceManager = new PriceManager(this.config.el, this.config.moneyFormat);\n\n    this.$window.on(\n      `product-variant-switch.product-layout-${this.product.id}`,\n      (event, data) => this._switchVariant(event, data),\n    );\n  }\n\n  _switchVariant(event, data) {\n    if (data.product.id !== this.product.id) return;\n\n    const variant = data.variant;\n    const firstLoad = data.firstLoad;\n\n    if (firstLoad) {\n      return;\n    }\n\n    // Update gallery image\n    if (this.gallery && this.productGallery && variant.featured_image) {\n      this.productGallery.switchImage(variant.featured_image.id);\n    }\n\n    // Update Variant information\n    this._updatePrice(variant);\n\n    if (this.config.enableHistory) {\n      const url = `${this.config.product.handle}?${$.param({ variant: variant.id })}`;\n      history.replaceState({}, 'variant', url);\n    }\n  }\n\n  _updatePrice(variant) {\n    const $compareAtPrice = $(selectors.price.compareAt, this.config.el);\n    const $price = $(selectors.price.price, this.config.el);\n\n    const $compareAtPriceMoney = $('.money', $compareAtPrice);\n    const $priceMoney = $('.money', $price);\n\n    const hasComparePrice = (\n      !!variant.compare_at_price && variant.compare_at_price > variant.price\n    );\n\n    // Update compare at price\n    $compareAtPrice.toggleClass('visible', hasComparePrice);\n    $compareAtPriceMoney.each( (i, el) => {\n      this.priceManager.updatePrice(el, variant.compare_at_price);\n    });\n\n    // Update price\n    $priceMoney.each( (i, el) => {\n      this.priceManager.updatePrice(el, variant.price);\n    });\n  }\n}\n","import $ from 'jquery';\nimport { classes, selectors } from '../Constants';\nimport Modal from '../Modal';\nimport layout from '../Layout';\nimport PriceManager from '../components/PriceManager';\nimport ProductLayout from '../components/ProductLayout';\nimport CartRequests from './cart/CartRequests';\n\nexport default class QuickShop {\n  constructor(options) {\n    this.el = options.el || null;\n    this.productUrl = options.url || null;\n    this.productID = options.id || null;\n    this.trigger = options.trigger || null;\n    this.cartRequests = new CartRequests();\n\n    if (\n      !this.el\n      || !this.productUrl\n      || !this.productID\n      || !this.trigger\n    ) {\n      return console.warn('Unable to initiate QuickShop.js');\n    }\n\n    this.$window = $(window);\n    this.$document = $(document);\n    this.$trigger = $(this.trigger);\n\n    // Build up selectors\n    this.selectorTag = `${selectors.product.quickshop.selectorAttr}=\"${this.productID}\"`;\n    this.selector = `[${this.selectorTag}]`;\n\n    // Default out globals\n    this.productLoaded = false;\n    this.productEl = null;\n    this.$formAtc = null;\n    this.$errorMessage = $(`<div ${selectors.product.quickshop.errorAttr} class=\"${classes.product.quickshop.error}\"/>`);\n    this.data = null;\n    this.modal = null;\n    this.priceManager = null;\n\n    this._handleBeforeShow = this._handleBeforeShow.bind(this);\n    this._handleOpen = this._handleOpen.bind(this);\n    this._handleClose = this._handleClose.bind(this);\n    this._handleError = this._handleError.bind(this);\n    this._resetError = this._resetError.bind(this);\n    this._onATCSubmit = this._onATCSubmit.bind(this);\n    this._onATCSuccess = this._onATCSuccess.bind(this);\n\n    this._onBreakpointChange = this._onBreakpointChange.bind(this);\n    layout.onBreakpointChange(this._onBreakpointChange);\n  }\n\n  open() {\n    this.trigger.setAttribute('disabled', 'disabled');\n\n    if (!this.productLoaded) {\n      $.ajax({\n        url: this.productUrl,\n        data: 'view=quickshop',\n        dataType: 'html',\n        success: (data) => {\n          const $wrapper = $(`<div class=\"${classes.product.quickshop.wrapper}\" ${this.selectorTag}/>`);\n          const $contents = $wrapper.append(data);\n\n          try {\n            this.data = JSON.parse($wrapper.find(selectors.product.quickshop.data).text());\n          } catch (error) {\n            return console.warn(`Quickshop: invalid quickshop data found. ${error.message}`);\n          }\n\n          $(this.el).append($contents);\n\n          // Bind productEl to node of contents, which gets moved into Modal\n          this.productEl = this.el.querySelector(selectors.product.quickshop.contents);\n          this.productLoaded = true;\n\n          this._openQuickShop();\n        },\n        error: (jqXHR, textStatus, errorThrown) => {\n          console.warn(`Unable to Quickshop with error: ${errorThrown}`);\n        },\n      });\n    } else {\n      this._openQuickShop();\n    }\n  }\n\n  unload() {\n    this._handleClose();\n    layout.offBreakpointChange(this._onBreakpointChange);\n  }\n\n  _openQuickShop() {\n    const modalCallbacks = {\n      onBeforeShow: this._handleBeforeShow,\n      onOpen: this._handleOpen,\n      onClose: this._handleClose,\n    };\n\n    this.modal = new Modal(modalCallbacks);\n    this.modal.open(this.selector, 'quickshop');\n  }\n\n  _handleBeforeShow() {\n    // Set object fit for IE11\n    this.$document.trigger('check-object-fit', {\n      el: this.productEl,\n    });\n\n    // Update prices to current currency\n    this.priceManager = new PriceManager(this.productEl, this.data.money_format);\n    this.priceManager.updateAll();\n\n    // Set up error handling\n    this.$formAtc = $(this.productEl.querySelector(selectors.product.form.atc));\n\n    // Clear errors on variant switch\n    this.$window.on('product-variant-switch.product-quickshop', this._resetError);\n\n    // Instantiate Product JS\n    this.productLayout = new ProductLayout({\n      el: this.productEl,\n      moneyFormat: this.data.money_format,\n      product: this.data.product,\n      variantAvailable: this.data.variant_available,\n      cartRedirect: this.data.cart_redirect,\n      textStrings: this.data.text_strings,\n      onATCSubmit: this._onATCSubmit,\n      onATCSuccess: this._onATCSuccess,\n    });\n  }\n\n  _handleError(error) {\n    this.$errorMessage.text(error.responseJSON.description);\n    this.$formAtc.prepend(this.$errorMessage);\n  }\n\n  _handleOpen($modal) {\n    $modal.find('a:visible:first').eq(0).focus();\n\n    if (window.Shopify && Shopify.PaymentButton) {\n      Shopify.PaymentButton.init();\n    }\n  }\n\n  _handleClose() {\n    if (this.modal) {\n      this.productLayout.unload();\n      this.modal.unload();\n      this.$trigger.removeAttr('disabled').focus();\n      this.$window.off('product-variant-switch.product-quickshop');\n    }\n  }\n\n  _onBreakpointChange() {\n    if (layout.isBreakpoint('XS') || layout.isBreakpoint('S')) {\n      this._handleClose();\n    }\n  }\n\n  /**\n   * Actions to perform when submitting ATC to Shopify\n   *\n   * @private\n   */\n  _onATCSubmit() {\n    this._resetError();\n\n    this.cartRequests.setHandlers({\n      onError: this._handleError,\n    });\n  }\n\n  _resetError() {\n    if (this.$errorMessage.length) {\n      this.$errorMessage.remove();\n    }\n  }\n\n  /**\n   * Actions to perform on a successful ATC\n   * @private\n   */\n  _onATCSuccess() {\n    this.cartRequests.restoreHandlers();\n  }\n}\n","import { selectors } from '../Constants';\nimport QuickShop from './QuickShop';\n\nexport default class ProductItem {\n  constructor(el) {\n    // Scrape product information\n    this.productUrl = el.getAttribute(selectors.product.item.urlAttr);\n    this.productID = el.getAttribute(selectors.product.item.idAttr);\n\n    this.quickShopTrigger = el.querySelector(selectors.product.quickshop.trigger);\n    this.quickShop = null;\n    this.openQuickShop = this._onOpenQuickshop.bind(this);\n\n    if (this.quickShopTrigger) {\n      this.quickShop = new QuickShop({\n        el,\n        trigger: this.quickShopTrigger,\n        url: this.productUrl,\n        id: this.productID,\n      });\n\n      this.quickShopTrigger.addEventListener('click', this.openQuickShop);\n    }\n  }\n\n  _onOpenQuickshop() {\n    this.quickShop.open();\n  }\n\n  unload() {\n    if (this.quickShop) {\n      this.quickShop.unload();\n      this.quickShopTrigger.removeEventListener('click', this.openQuickShop);\n    }\n  }\n}\n","import { selectors } from '../Constants';\nimport ProductItem from '../components/ProductItem';\n\nexport default class SearchPage {\n  constructor() {\n    const searchPage = document.querySelector('.search-page');\n\n    if (!searchPage) {\n      return;\n    }\n\n    this.productItemEls = searchPage.querySelectorAll(selectors.product.item.el);\n\n    for (let i = 0; i < this.productItemEls.length; i += 1) {\n      new ProductItem(this.productItemEls[i]);\n    }\n  }\n}\n","import $ from 'jquery';\nimport $script from 'scriptjs';\n\nexport default function initAddresses() {\n  const deferred = $.Deferred();\n\n  if (!$('[data-account-template=\"addresses\"]').length) {\n    deferred.resolve();\n  } else {\n    const $themeScripts = $('[data-scripts]');\n\n    $script($themeScripts.data('shopify-common'), () => {\n      $script($themeScripts.data('shopify-customer'), () => {\n        const id = $('[data-address-id]').data('address-id');\n        // Initiate provinces for the New Address form\n        new Shopify.CountryProvinceSelector(\n          `customer-addr-${id}-country`,\n          `customer-addr-${id}-province`,\n          {\n            hideElement: `customer-addr-${id}-province-wrapper`,\n          },\n        );\n\n        deferred.resolve();\n      });\n    });\n  }\n\n  return deferred.promise();\n}\n","export default class Sections {\n  constructor() {\n    this.handlers = {};\n    this.instances = {};\n    this._onSectionEvent = this._onSectionEvent.bind(this);\n\n    document.addEventListener('shopify:section:load', this._onSectionEvent);\n    document.addEventListener('shopify:section:unload', this._onSectionEvent);\n    document.addEventListener('shopify:section:select', this._onSectionEvent);\n    document.addEventListener('shopify:section:deselect', this._onSectionEvent);\n    document.addEventListener('shopify:section:reorder', this._onSectionEvent);\n    document.addEventListener('shopify:block:select', this._onSectionEvent);\n    document.addEventListener('shopify:block:deselect', this._onSectionEvent);\n  }\n\n  /**\n   * Stop listening for section events, and unbind all handlers.\n   */\n  unbind() {\n    document.removeEventListener('shopify:section:load', this._onSectionEvent);\n    document.removeEventListener('shopify:section:unload', this._onSectionEvent);\n    document.removeEventListener('shopify:section:select', this._onSectionEvent);\n    document.removeEventListener('shopify:section:deselect', this._onSectionEvent);\n    document.removeEventListener('shopify:section:reorder', this._onSectionEvent);\n    document.removeEventListener('shopify:block:select', this._onSectionEvent);\n    document.removeEventListener('shopify:block:deselect', this._onSectionEvent);\n\n    // Unload all instances\n    for (let i = 0; i < this.instances.length; i++) {\n      this._triggerInstanceEvent(this.instances[i], 'onSectionUnload');\n    }\n\n    this.handlers = {};\n    this.instances = {};\n  }\n\n  /**\n   * Register a section handler.\n   *\n   * @param {string} type\n   *        The section type to handle. The handler will be called for all\n   *        sections with this type.\n   *\n   * @param {function} handler\n   *        The handler function is passed information about a specific section\n   *        instance. The handler is expected to return an object that will be\n   *        associated with the section instance.\n   *\n   *        Section handlers are passed an object with the following parameters:\n   *          {string} id\n   *          An ID that maps to a specific section instance. Typically the\n   *          section's filename for static sections, or a generated ID for\n   *          dynamic sections.\n   *\n   *          {string} type\n   *          The section type, as supplied when registered.\n   *\n   *          {Element} el\n   *          The root DOM element for the section instance.\n   *\n   *          {Object} data\n   *          Data loaded from the section script element. Defaults to an\n   *          empty object.\n   *\n   *          {Function} postMessage\n   *          A function that can be called to pass messages between sections.\n   *          The function should be called with a message \"name\", and\n   *          optionally some data.\n   */\n  register(type, handler) {\n    if (this.handlers[type]) {\n      console.warn(`Sections: section handler already exists of type '${type}'.`);\n    }\n\n    // Store the section handler\n    this.handlers[type] = handler;\n\n    // Init sections for this type\n    this._initSections(type);\n  }\n\n  /**\n   * Initialize sections already on the page.\n   */\n  _initSections(type) {\n    // Fetch all existing sections of our type on the page\n    const dataEls = document.querySelectorAll(`[data-section-type=\"${type}\"]`);\n    if (!dataEls) return;\n\n    // Create an instance for each section\n    for (let i = 0; i < dataEls.length; i++) {\n      const dataEl = dataEls[i];\n      const el = dataEl.parentNode;\n\n      // Get instance ID\n      const idEl = el.querySelector('[data-section-id]');\n\n      if (!idEl) {\n        console.warn(`Sections: unable to find section id for '${type}'.`, el);\n        continue;\n      }\n\n      const sectionId = idEl.getAttribute('data-section-id');\n      if (!sectionId) {\n        console.warn(`Sections: unable to find section id for '${type}'.`, el);\n        continue;\n      }\n\n      this._createInstance(sectionId, el);\n    }\n  }\n\n  _onSectionEvent(event) {\n    const el = event.target;\n    const sectionId = event.detail.sectionId;\n    const blockId = event.detail.blockId;\n    const instance = this.instances[sectionId];\n\n    switch (event.type) {\n      case 'shopify:section:load':\n        this._createInstance(sectionId, el);\n        break;\n\n      case 'shopify:section:unload':\n        this._triggerInstanceEvent(instance, 'onSectionUnload', { el, id: sectionId });\n        delete this.instances[sectionId];\n        break;\n\n      case 'shopify:section:select':\n        this._triggerInstanceEvent(instance, 'onSectionSelect', { el, id: sectionId });\n        break;\n\n      case 'shopify:section:deselect':\n        this._triggerInstanceEvent(instance, 'onSectionDeselect', { el, id: sectionId });\n        break;\n\n      case 'shopify:section:reorder':\n        this._triggerInstanceEvent(instance, 'onSectionReorder', { el, id: sectionId });\n        break;\n\n      case 'shopify:block:select':\n        this._triggerInstanceEvent(instance, 'onSectionBlockSelect', { el, id: blockId });\n        break;\n\n      case 'shopify:block:deselect':\n        this._triggerInstanceEvent(instance, 'onSectionBlockDeselect', { el, id: blockId });\n        break;\n    }\n  }\n\n  _triggerInstanceEvent(instance, eventName, ...args) {\n    if (instance && instance[eventName]) {\n      instance[eventName](...args);\n    }\n  }\n\n  _postMessage(name, data) {\n    Object.keys(this.instances).forEach((id) => {\n      this._triggerInstanceEvent(this.instances[id], 'onSectionMessage', name, data);\n    });\n  }\n\n  _createInstance(id, el) {\n    const typeEl = el.querySelector('[data-section-type]');\n    if (!typeEl) return;\n\n    const type = typeEl.getAttribute('data-section-type');\n    if (!type) return;\n\n    const handler = this.handlers[type];\n    if (!handler) return console.warn(`Sections: unable to find section handler for type '${type}'.`);\n\n    const data = this._loadData(el);\n    const postMessage = this._postMessage.bind(this);\n\n    this.instances[id] = handler({id, type, el, data, postMessage});\n  }\n\n  _loadData(el) {\n    const dataEl = el.querySelector('[data-section-data]');\n    if (!dataEl) return {};\n\n    // Load data from attribute, or innerHTML\n    const data = dataEl.getAttribute('data-section-data') || dataEl.innerHTML;\n\n    try {\n      return JSON.parse(data);\n    } catch(error) {\n      console.warn(`Sections: invalid section data found. ${error.message}`);\n      return {};\n    }\n  }\n}\n","import $ from 'jquery';\nimport Flickity from 'flickity';\nimport layout from '../Layout';\n\nexport default class MobileScrollers {\n  constructor(section) {\n    this.el = section.el;\n    this.flickity = null;\n    this.slider = null;\n    this.flickityDefaults = {\n      contain: true,\n      freeScroll: true,\n      cellAlign: 'left',\n      prevNextButtons: false,\n      pageDots: false,\n    };\n\n    this._onBreakpointChange = this._onBreakpointChange.bind(this);\n    layout.onBreakpointChange(this._onBreakpointChange);\n  }\n\n  /**\n   * Initialize MobileScrollers\n   *\n   * @param {String} selector - String which can be queried to find element containing slides\n   * @param {Object} flickityOptions - Options to initalize Flickity with\n   */\n  init(selector, flickityOptions = {}) {\n    this.slider = this.el.querySelector(selector);\n    this.flickityOptions = $.extend({}, this.flickityDefaults, flickityOptions);\n    this.initFlickity();\n  }\n\n  initFlickity() {\n    if (layout.isBreakpoint('L') || layout.isBreakpoint('XL')) {\n      return this.destroyFlickity();\n    }\n\n    if (this.flickity || !this.slider) {\n      return;\n    }\n\n    this.flickity = new Flickity(this.slider, this.flickityOptions);\n    this.flickity.reloadCells();\n  }\n\n  destroyFlickity() {\n    if (!this.flickity) {\n      return;\n    }\n\n    this.flickity.destroy();\n    this.flickity = null;\n  }\n\n  onSectionUnload() {\n    this.destroyFlickity();\n  }\n\n  _onBreakpointChange() {\n    this.initFlickity();\n  }\n}\n","import MobileScrollers from '../components/MobileScrollers';\n\nexport default class DynamicBlogPosts extends MobileScrollers {\n  constructor(section) {\n    super(section);\n\n    const cellAlign = this.el.querySelectorAll('.article-excerpt').length > 2\n      ? 'left'\n      : 'center';\n\n    this.init('[data-blog-posts]', {\n      cellAlign,\n    });\n  }\n}\n","import { selectors } from '../Constants';\nimport MobileScrollers from '../components/MobileScrollers';\n\nexport default class Gallery extends MobileScrollers {\n  constructor(container) {\n    super(container);\n\n    this.init(selectors.gallery.container, {\n      cellSelector: selectors.gallery.slide,\n      cellAlign: 'center',\n      imagesLoaded: true,\n    });\n  }\n}\n","import $ from 'jquery';\nimport rimg from 'rimg-shopify';\nimport { classes, selectors } from '../Constants';\nimport Gallery from './Gallery';\n\nexport default class DynamicInstagramFeed extends Gallery {\n  constructor(section) {\n    super(section);\n\n    this.settings = section.data;\n    this.accessToken = this.settings.access_token;\n    this.gallery = section.el.querySelector(selectors.instagram.container);\n    this.$gallery = $(this.gallery);\n    this.$galleryImages = this.$gallery.find(selectors.instagram.galleryImage);\n    this.$placeholders = this.$gallery.find(selectors.instagram.placeholder);\n\n    this.photos = [];\n    this.processPhotos = this._processPhotos.bind(this);\n\n    rimg.instance.track(this.gallery);\n\n    if (!this.accessToken || !this.accessToken.length) {\n      return;\n    }\n\n    this.$gallery.on('rimg:enter', () => {\n      this._processPhotos();\n    });\n\n    this._getPhotos()\n      .fail((error) => {\n        console.warn(`Instagram: ${ error }`);\n      });\n  }\n\n  onSectionUnload() {\n    rimg.instance.untrack(this.gallery);\n    this.$gallery.off('rimg:enter');\n\n    super.onSectionUnload();\n  }\n\n  _getPhotos(callback = null) {\n    const url = `https://api.instagram.com/v1/users/self/media/recent?access_token=${ this.accessToken }&count=6&callback=`;\n    const photoPromise = $.ajax(url, {\n      dataType: 'jsonp',\n    });\n\n    return photoPromise.then((response) => {\n      if (response.meta.code !== 200) {\n        const error = `${ response.meta.error_message } (${ response.meta.error_type })`;\n        return $.Deferred().reject(error).promise();\n      }\n\n      this.photos = response.data;\n\n      if (callback) {\n        return callback();\n      }\n    });\n  }\n\n  _processPhotos() {\n    if (!this.photos.length) {\n      return this._getPhotos(this.processPhotos);\n    }\n\n    const deferred = $.Deferred();\n\n    this.$galleryImages.each((i, el) => {\n      if (!this.photos[i]) {\n        return;\n      }\n\n      const photo = this.photos[i];\n\n      const $link = $(`<a \n        class=\"${classes.instagram.image} ${classes.instagram.hidden}\"\n        target=\"_blank\" \n        href=\"${ photo.link }\"></a>`);\n      const $photo = $(`<img src=\"${ photo.images.standard_resolution.url }\">`);\n\n      /*\n      TODO:\n        - Retina suppport\n          - Update pxu-instagram-squared to return large format\n          - Get appropriate size of image for if is large/small\n\n        const lowResolution = photo.images.low_resolution;\n        const standardResolution = photo.images.standard_resolution;\n        if (standardResolution.width >= (lowResolution.width * 2)) {\n          $photo.attr('srcset', `${ srcLarge } 2x`);\n        } else {\n          $photo.attr('src', `${ srcLarge }`);\n        }\n      */\n\n      $photo.one('load', () => {\n        $link.append($photo).appendTo($(el));\n\n        if (i === this.photos.length - 1) {\n          deferred.resolve();\n        }\n      });\n    });\n\n    return deferred.done(() => {\n      this._renderPhotos();\n    });\n  }\n\n  _renderPhotos() {\n    // Lock height to prevent screen jumping\n    this.$gallery.height(this.$gallery.outerHeight(true));\n\n    this.$placeholders.fadeOut().promise().then(() => {\n      this.$placeholders.each((i, el) => {\n        const $el = $(el);\n        const $imageContainer = $el.parent();\n        const $slide = $el.parents(selectors.gallery.slide);\n        const hasImage = $el.next().length;\n\n        // Remove placeholder\n        $el.remove();\n\n        // If there is no element after the placeholder, remove container\n        if (!hasImage) {\n          $imageContainer.remove();\n        }\n\n        // Remove slide if no images or placeholder\n        if (!$slide.children().length) {\n          if (this.flickity) {\n            this.flickity.remove($slide[0]);\n            this.flickity.resize();\n          } else {\n            $slide.remove();\n          }\n        }\n      });\n\n      this.$gallery\n        .css('height', '')\n        .find(`.${classes.instagram.hidden}`)\n        .removeClass(classes.instagram.hidden);\n\n      if (this.flickity) {\n        this.flickity.reloadCells();\n      }\n    });\n  }\n}\n","import layout from '../Layout';\nimport CardsPlayer from './CardsPlayer';\n\nexport default class DeckCase {\n  constructor(cardsContainer) {\n    this.cardsContainer = cardsContainer;\n    this.cardsPlayer = null;\n\n    this._onBreakpointChange = this._onBreakpointChange.bind(this);\n\n    layout.onBreakpointChange(this._onBreakpointChange);\n\n    if (layout.isBreakpoint('XS') || layout.isBreakpoint('S')) {\n      this.cardsPlayer = new CardsPlayer(this.cardsContainer);\n    }\n  }\n\n  _onBreakpointChange(events, breakpoints = {}) {\n    const current = breakpoints.current;\n\n    if ((current === 'S' || current === 'XS') && !this.cardsPlayer) {\n      this.cardsPlayer = new CardsPlayer(this.cardsContainer);\n    } else if ((current !== 'S' && current !== 'XS') && this.cardsPlayer) {\n      this.cardsPlayer.destroy();\n      this.cardsPlayer = null;\n    }\n  }\n\n  onSectionUnload() {\n    if (this.cardsPlayer) {\n      this.cardsPlayer.destroy();\n      this.cardsPlayer = null;\n    }\n  }\n}\n","import DeckCase from '../components/DeckCase';\n\nexport default class DynamicListCollections {\n  constructor(section) {\n    this.deckCase = new DeckCase(section.el.querySelector('[data-cards]'));\n  }\n\n  onSectionUnload() {\n    this.deckCase.onSectionUnload();\n  }\n}\n","import ProductLayout from '../components/ProductLayout';\nimport PriceManager from '../components/PriceManager';\n\nexport default class DynamicProduct {\n  constructor(section) {\n    const { el } = section;\n    const { product } = section.data;\n    const variantAvailable = section.data.variant_available;\n    const moneyFormat = section.data.money_format;\n    const textStrings = section.data.text_strings;\n    const cartRedirect = section.data.cart_redirect;\n\n    this.priceManager = new PriceManager(section.el);\n    this.priceManager.updateAll();\n    this.productLayout = null;\n\n    if (!product) {\n      return;\n    }\n\n    this.productLayout = new ProductLayout({\n      el,\n      moneyFormat,\n      product,\n      variantAvailable,\n      cartRedirect,\n      textStrings,\n    });\n  }\n\n  onSectionUnload() {\n    if (this.productLayout) {\n      this.productLayout.unload();\n    }\n  }\n}\n","/*!\n * imagesLoaded v4.1.3\n * JavaScript is all like \"You images are done yet or what?\"\n * MIT License\n */\n\n( function( window, factory ) { 'use strict';\n  // universal module definition\n\n  /*global define: false, module: false, require: false */\n\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      'ev-emitter/ev-emitter'\n    ], function( EvEmitter ) {\n      return factory( window, EvEmitter );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('ev-emitter')\n    );\n  } else {\n    // browser global\n    window.imagesLoaded = factory(\n      window,\n      window.EvEmitter\n    );\n  }\n\n})( typeof window !== 'undefined' ? window : this,\n\n// --------------------------  factory -------------------------- //\n\nfunction factory( window, EvEmitter ) {\n\n'use strict';\n\nvar $ = window.jQuery;\nvar console = window.console;\n\n// -------------------------- helpers -------------------------- //\n\n// extend objects\nfunction extend( a, b ) {\n  for ( var prop in b ) {\n    a[ prop ] = b[ prop ];\n  }\n  return a;\n}\n\n// turn element or nodeList into an array\nfunction makeArray( obj ) {\n  var ary = [];\n  if ( Array.isArray( obj ) ) {\n    // use object if already an array\n    ary = obj;\n  } else if ( typeof obj.length == 'number' ) {\n    // convert nodeList to array\n    for ( var i=0; i < obj.length; i++ ) {\n      ary.push( obj[i] );\n    }\n  } else {\n    // array of single index\n    ary.push( obj );\n  }\n  return ary;\n}\n\n// -------------------------- imagesLoaded -------------------------- //\n\n/**\n * @param {Array, Element, NodeList, String} elem\n * @param {Object or Function} options - if function, use as callback\n * @param {Function} onAlways - callback function\n */\nfunction ImagesLoaded( elem, options, onAlways ) {\n  // coerce ImagesLoaded() without new, to be new ImagesLoaded()\n  if ( !( this instanceof ImagesLoaded ) ) {\n    return new ImagesLoaded( elem, options, onAlways );\n  }\n  // use elem as selector string\n  if ( typeof elem == 'string' ) {\n    elem = document.querySelectorAll( elem );\n  }\n\n  this.elements = makeArray( elem );\n  this.options = extend( {}, this.options );\n\n  if ( typeof options == 'function' ) {\n    onAlways = options;\n  } else {\n    extend( this.options, options );\n  }\n\n  if ( onAlways ) {\n    this.on( 'always', onAlways );\n  }\n\n  this.getImages();\n\n  if ( $ ) {\n    // add jQuery Deferred object\n    this.jqDeferred = new $.Deferred();\n  }\n\n  // HACK check async to allow time to bind listeners\n  setTimeout( function() {\n    this.check();\n  }.bind( this ));\n}\n\nImagesLoaded.prototype = Object.create( EvEmitter.prototype );\n\nImagesLoaded.prototype.options = {};\n\nImagesLoaded.prototype.getImages = function() {\n  this.images = [];\n\n  // filter & find items if we have an item selector\n  this.elements.forEach( this.addElementImages, this );\n};\n\n/**\n * @param {Node} element\n */\nImagesLoaded.prototype.addElementImages = function( elem ) {\n  // filter siblings\n  if ( elem.nodeName == 'IMG' ) {\n    this.addImage( elem );\n  }\n  // get background image on element\n  if ( this.options.background === true ) {\n    this.addElementBackgroundImages( elem );\n  }\n\n  // find children\n  // no non-element nodes, #143\n  var nodeType = elem.nodeType;\n  if ( !nodeType || !elementNodeTypes[ nodeType ] ) {\n    return;\n  }\n  var childImgs = elem.querySelectorAll('img');\n  // concat childElems to filterFound array\n  for ( var i=0; i < childImgs.length; i++ ) {\n    var img = childImgs[i];\n    this.addImage( img );\n  }\n\n  // get child background images\n  if ( typeof this.options.background == 'string' ) {\n    var children = elem.querySelectorAll( this.options.background );\n    for ( i=0; i < children.length; i++ ) {\n      var child = children[i];\n      this.addElementBackgroundImages( child );\n    }\n  }\n};\n\nvar elementNodeTypes = {\n  1: true,\n  9: true,\n  11: true\n};\n\nImagesLoaded.prototype.addElementBackgroundImages = function( elem ) {\n  var style = getComputedStyle( elem );\n  if ( !style ) {\n    // Firefox returns null if in a hidden iframe https://bugzil.la/548397\n    return;\n  }\n  // get url inside url(\"...\")\n  var reURL = /url\\((['\"])?(.*?)\\1\\)/gi;\n  var matches = reURL.exec( style.backgroundImage );\n  while ( matches !== null ) {\n    var url = matches && matches[2];\n    if ( url ) {\n      this.addBackground( url, elem );\n    }\n    matches = reURL.exec( style.backgroundImage );\n  }\n};\n\n/**\n * @param {Image} img\n */\nImagesLoaded.prototype.addImage = function( img ) {\n  var loadingImage = new LoadingImage( img );\n  this.images.push( loadingImage );\n};\n\nImagesLoaded.prototype.addBackground = function( url, elem ) {\n  var background = new Background( url, elem );\n  this.images.push( background );\n};\n\nImagesLoaded.prototype.check = function() {\n  var _this = this;\n  this.progressedCount = 0;\n  this.hasAnyBroken = false;\n  // complete if no images\n  if ( !this.images.length ) {\n    this.complete();\n    return;\n  }\n\n  function onProgress( image, elem, message ) {\n    // HACK - Chrome triggers event before object properties have changed. #83\n    setTimeout( function() {\n      _this.progress( image, elem, message );\n    });\n  }\n\n  this.images.forEach( function( loadingImage ) {\n    loadingImage.once( 'progress', onProgress );\n    loadingImage.check();\n  });\n};\n\nImagesLoaded.prototype.progress = function( image, elem, message ) {\n  this.progressedCount++;\n  this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;\n  // progress event\n  this.emitEvent( 'progress', [ this, image, elem ] );\n  if ( this.jqDeferred && this.jqDeferred.notify ) {\n    this.jqDeferred.notify( this, image );\n  }\n  // check if completed\n  if ( this.progressedCount == this.images.length ) {\n    this.complete();\n  }\n\n  if ( this.options.debug && console ) {\n    console.log( 'progress: ' + message, image, elem );\n  }\n};\n\nImagesLoaded.prototype.complete = function() {\n  var eventName = this.hasAnyBroken ? 'fail' : 'done';\n  this.isComplete = true;\n  this.emitEvent( eventName, [ this ] );\n  this.emitEvent( 'always', [ this ] );\n  if ( this.jqDeferred ) {\n    var jqMethod = this.hasAnyBroken ? 'reject' : 'resolve';\n    this.jqDeferred[ jqMethod ]( this );\n  }\n};\n\n// --------------------------  -------------------------- //\n\nfunction LoadingImage( img ) {\n  this.img = img;\n}\n\nLoadingImage.prototype = Object.create( EvEmitter.prototype );\n\nLoadingImage.prototype.check = function() {\n  // If complete is true and browser supports natural sizes,\n  // try to check for image status manually.\n  var isComplete = this.getIsImageComplete();\n  if ( isComplete ) {\n    // report based on naturalWidth\n    this.confirm( this.img.naturalWidth !== 0, 'naturalWidth' );\n    return;\n  }\n\n  // If none of the checks above matched, simulate loading on detached element.\n  this.proxyImage = new Image();\n  this.proxyImage.addEventListener( 'load', this );\n  this.proxyImage.addEventListener( 'error', this );\n  // bind to image as well for Firefox. #191\n  this.img.addEventListener( 'load', this );\n  this.img.addEventListener( 'error', this );\n  this.proxyImage.src = this.img.src;\n};\n\nLoadingImage.prototype.getIsImageComplete = function() {\n  return this.img.complete && this.img.naturalWidth !== undefined;\n};\n\nLoadingImage.prototype.confirm = function( isLoaded, message ) {\n  this.isLoaded = isLoaded;\n  this.emitEvent( 'progress', [ this, this.img, message ] );\n};\n\n// ----- events ----- //\n\n// trigger specified handler for event type\nLoadingImage.prototype.handleEvent = function( event ) {\n  var method = 'on' + event.type;\n  if ( this[ method ] ) {\n    this[ method ]( event );\n  }\n};\n\nLoadingImage.prototype.onload = function() {\n  this.confirm( true, 'onload' );\n  this.unbindEvents();\n};\n\nLoadingImage.prototype.onerror = function() {\n  this.confirm( false, 'onerror' );\n  this.unbindEvents();\n};\n\nLoadingImage.prototype.unbindEvents = function() {\n  this.proxyImage.removeEventListener( 'load', this );\n  this.proxyImage.removeEventListener( 'error', this );\n  this.img.removeEventListener( 'load', this );\n  this.img.removeEventListener( 'error', this );\n};\n\n// -------------------------- Background -------------------------- //\n\nfunction Background( url, element ) {\n  this.url = url;\n  this.element = element;\n  this.img = new Image();\n}\n\n// inherit LoadingImage prototype\nBackground.prototype = Object.create( LoadingImage.prototype );\n\nBackground.prototype.check = function() {\n  this.img.addEventListener( 'load', this );\n  this.img.addEventListener( 'error', this );\n  this.img.src = this.url;\n  // check if image is already complete\n  var isComplete = this.getIsImageComplete();\n  if ( isComplete ) {\n    this.confirm( this.img.naturalWidth !== 0, 'naturalWidth' );\n    this.unbindEvents();\n  }\n};\n\nBackground.prototype.unbindEvents = function() {\n  this.img.removeEventListener( 'load', this );\n  this.img.removeEventListener( 'error', this );\n};\n\nBackground.prototype.confirm = function( isLoaded, message ) {\n  this.isLoaded = isLoaded;\n  this.emitEvent( 'progress', [ this, this.element, message ] );\n};\n\n// -------------------------- jQuery -------------------------- //\n\nImagesLoaded.makeJQueryPlugin = function( jQuery ) {\n  jQuery = jQuery || window.jQuery;\n  if ( !jQuery ) {\n    return;\n  }\n  // set local variable\n  $ = jQuery;\n  // $().imagesLoaded()\n  $.fn.imagesLoaded = function( options, callback ) {\n    var instance = new ImagesLoaded( this, options, callback );\n    return instance.jqDeferred.promise( $(this) );\n  };\n};\n// try making plugin\nImagesLoaded.makeJQueryPlugin();\n\n// --------------------------  -------------------------- //\n\nreturn ImagesLoaded;\n\n});\n","/*!\n * Flickity imagesLoaded v2.0.0\n * enables imagesLoaded option for Flickity\n */\n\n/*jshint browser: true, strict: true, undef: true, unused: true */\n\n( function( window, factory ) {\n  // universal module definition\n  /*jshint strict: false */ /*globals define, module, require */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      'flickity/js/index',\n      'imagesloaded/imagesloaded'\n    ], function( Flickity, imagesLoaded ) {\n      return factory( window, Flickity, imagesLoaded );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('flickity'),\n      require('imagesloaded')\n    );\n  } else {\n    // browser global\n    window.Flickity = factory(\n      window,\n      window.Flickity,\n      window.imagesLoaded\n    );\n  }\n\n}( window, function factory( window, Flickity, imagesLoaded ) {\n'use strict';\n\nFlickity.createMethods.push('_createImagesLoaded');\n\nvar proto = Flickity.prototype;\n\nproto._createImagesLoaded = function() {\n  this.on( 'activate', this.imagesLoaded );\n};\n\nproto.imagesLoaded = function() {\n  if ( !this.options.imagesLoaded ) {\n    return;\n  }\n  var _this = this;\n  function onImagesLoadedProgress( instance, image ) {\n    var cell = _this.getParentCell( image.img );\n    _this.cellSizeChange( cell && cell.element );\n    if ( !_this.options.freeScroll ) {\n      _this.positionSliderAtSelected();\n    }\n  }\n  imagesLoaded( this.slider ).on( 'progress', onImagesLoadedProgress );\n};\n\nreturn Flickity;\n\n}));\n","import $ from 'jquery';\nimport Flickity from 'flickity';\nimport 'flickity-imagesloaded';\nimport { selectors } from '../Constants';\nimport layout from '../Layout';\n\nexport default class DynamicSlideshow {\n  constructor(section) {\n    this.$el = $(section.el);\n    this.$body = $(document.body);\n    this.data = section.data;\n\n    this.$slideshow = this.$el.find(selectors.slideshow.container);\n    this.$slides = this.$el.find(selectors.slideshow.slide);\n    this.$paginationNext = this.$el.find(selectors.slideshow.paginationNext);\n    this.$paginationPrev = this.$el.find(selectors.slideshow.paginationPrev);\n\n    this._setCellHeights = this._setCellHeights.bind(this);\n    this._onSlideSettle = this._onSlideSettle.bind(this);\n    this.selectSlide = this.selectSlide.bind(this);\n\n    this.flickity = null;\n    this.events = null;\n    this.autoplay = this.data.autoplay\n      ? this.data.autoplay * 1000\n      : this.data.autoplay;\n\n    // Only start Slideshow if container exists\n    if (!this.$slideshow.length) {\n      return;\n    }\n\n    window.addEventListener('resize', this._setCellHeights);\n\n    this._initFlickity();\n  }\n\n  onSectionBlockSelect(block) {\n    if (!this.flickity) {\n      return;\n    }\n\n    const slideIndex = this._getSlideIndex(block.el);\n    this.selectSlide(slideIndex, true, false);\n\n    if (this.autoplay) {\n      this.flickity.stopPlayer();\n    }\n  }\n\n  onSectionBlockDeselect() {\n    if (!this.flickity) {\n      return;\n    }\n\n    if (this.autoplay) {\n      this.flickity.playPlayer();\n    }\n  }\n\n  onSectionUnload() {\n    if (!this.flickity) {\n      return;\n    }\n\n    if (this.events) {\n      this.events.forEach($el => $el.off('.slideshow'));\n    }\n\n    this.flickity.off('settle', this._onSlideSettle);\n    this.flickity.destroy();\n\n    window.removeEventListener('resize', this._setCellHeights);\n  }\n\n  /**\n   *  Move to the active slide\n   * @param slideIndex\n   * @param isWrap\n   * @param isInstant\n   */\n  selectSlide(slideIndex, isWrap = false, isInstant = false) {\n    if (slideIndex === this.flickity.selectedIndex) {\n      return;\n    }\n\n    this.flickity.select(slideIndex, isWrap, isInstant);\n    this.flickity.reloadCells();\n\n    const cell = this.$slides[slideIndex];\n    const $focusable = $(cell)\n      .find(`${selectors.slideshow.pagination}, ${selectors.slideshow.linkButton}`)\n      .eq(0);\n    $focusable.focus();\n  }\n\n  /**\n   * Get the index of the slide from the element\n   *\n   * @param el\n   * @returns {Number}\n   * @private\n   */\n  _getSlideIndex(el) {\n    return parseInt(el.getAttribute('data-slide'), 10);\n  }\n\n  /**\n   * Tabbing through can cause weird positioning, this makes sure active slide\n   * is always properly positioned\n   * @private\n   */\n  _onSlideSettle() {\n    const cell = this.$slides[this.flickity.selectedIndex];\n\n    this._minCellHeight(cell);\n    this.flickity.reposition();\n  }\n\n  /**\n   *\n   * @private\n   */\n  _setCellHeights() {\n    this.flickity.cells.forEach((cell) => {\n      this._minCellHeight(cell.element);\n    });\n  }\n\n  /**\n   * Set the minimum height of the cell (via the image) to be height of the\n   * content\n   *\n   * @param {Element} el\n   * @private\n   */\n  _minCellHeight(el) {\n    // Only perform on full-width slides\n    if (el.getAttribute('data-slide-layout') !== 'full-width') {\n      return;\n    }\n\n    const content = el.querySelector(selectors.slideshow.slideContent);\n    const image = el.querySelector(selectors.slideshow.slideImage);\n\n    if (!content || !image) {\n      return;\n    }\n\n    const contentHeight = content.getBoundingClientRect().height;\n    const imageHeight = image.getBoundingClientRect().height;\n\n    const $image = $(image);\n\n    if (layout.isBreakpoint('XS') || layout.isBreakpoint('S')) {\n      $image.css('min-height', '');\n\n      this.flickity.reposition();\n    } else {\n      if (contentHeight === imageHeight) {\n        return;\n      }\n\n      if (contentHeight > imageHeight) {\n        $image.css('min-height', contentHeight);\n      } else {\n        $image.css('min-height', '');\n      }\n\n      this.flickity.reposition();\n    }\n  }\n\n  _initFlickity() {\n    this.flickity = new Flickity(this.$slideshow[0], {\n      accessibility: true,\n      adaptiveHeight: true,\n      autoPlay: this.autoplay,\n      cellAlign: 'left',\n      cellSelector: selectors.slideshow.slide,\n      friction: 0.8,\n      pageDots: false,\n      pauseAutoPlayOnHover: true,\n      prevNextButtons: false,\n      selectedAttraction: 0.2,\n      wrapAround: true,\n    });\n\n    this._setCellHeights();\n    this._bindEvents();\n  }\n\n  _bindEvents() {\n    this.events = [\n      this.$slides.on('focusin.slideshow', (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const slideIndex = this._getSlideIndex(event.currentTarget);\n\n        // Instant transitions confuse Flickity going back\n        // Non-instant transitions confuse Flickity going forward\n        const isInstant = slideIndex > this.flickity.selectedIndex;\n\n        this.selectSlide(slideIndex, false, isInstant);\n      }),\n      this.$paginationNext.on('click.slideshow', () => this.flickity.next()),\n      this.$paginationPrev.on('click.slideshow', () => this.flickity.previous()),\n    ];\n\n    this.flickity.on('settle', this._onSlideSettle);\n  }\n}\n","/*********************************************************************\r\n*  #### Twitter Post Fetcher v18.0.2 ####\r\n*  Coded by Jason Mayes 2015. A present to all the developers out there.\r\n*  www.jasonmayes.com\r\n*  Please keep this disclaimer with my code if you use it. Thanks. :-)\r\n*  Got feedback or questions, ask here:\r\n*  http://www.jasonmayes.com/projects/twitterApi/\r\n*  Github: https://github.com/jasonmayes/Twitter-Post-Fetcher\r\n*  Updates will be posted to this site.\r\n*********************************************************************/\r\n(function(root,factory){if(typeof define==='function'&&define.amd){define([],factory);}else if(typeof exports==='object'){module.exports=factory();}else{factory();}}(this,function(){var domNode='';var maxTweets=20;var parseLinks=true;var queue=[];var inProgress=false;var printTime=true;var printUser=true;var formatterFunction=null;var supportsClassName=true;var showRts=true;var customCallbackFunction=null;var showInteractionLinks=true;var showImages=false;var useEmoji=false;var targetBlank=true;var lang='en';var permalinks=true;var dataOnly=false;var script=null;var scriptAdded=false;function handleTweets(tweets){if(customCallbackFunction===null){var x=tweets.length;var n=0;var element=document.getElementById(domNode);var html='<ul>';while(n<x){html+='<li>'+tweets[n]+'</li>';n++;}\r\nhtml+='</ul>';element.innerHTML=html;}else{customCallbackFunction(tweets);}}\r\nfunction strip(data){return data.replace(/<b[^>]*>(.*?)<\\/b>/gi,function(a,s){return s;}).replace(/class=\"(?!(tco-hidden|tco-display|tco-ellipsis))+.*?\"|data-query-source=\".*?\"|dir=\".*?\"|rel=\".*?\"/gi,'');}\r\nfunction targetLinksToNewWindow(el){var links=el.getElementsByTagName('a');for(var i=links.length-1;i>=0;i--){links[i].setAttribute('target','_blank');links[i].setAttribute('rel','noopener');}}\r\nfunction getElementsByClassName(node,classname){var a=[];var regex=new RegExp('(^| )'+classname+'( |$)');var elems=node.getElementsByTagName('*');for(var i=0,j=elems.length;i<j;i++){if(regex.test(elems[i].className)){a.push(elems[i]);}}\r\nreturn a;}\r\nfunction extractImageUrl(image_data){if(image_data!==undefined&&image_data.innerHTML.indexOf('data-image')>=0){var data_src=image_data.innerHTML.match(/data-image=\\\"([A-z0-9]+:\\/\\/[A-z0-9]+\\.[A-z0-9]+\\.[A-z0-9]+\\/[A-z0-9]+\\/[A-z0-9\\-]+)/i)[1];return decodeURIComponent(data_src)+'.jpg';}}\r\nvar twitterFetcher={fetch:function(config){if(config.maxTweets===undefined){config.maxTweets=20;}\r\nif(config.enableLinks===undefined){config.enableLinks=true;}\r\nif(config.showUser===undefined){config.showUser=true;}\r\nif(config.showTime===undefined){config.showTime=true;}\r\nif(config.dateFunction===undefined){config.dateFunction='default';}\r\nif(config.showRetweet===undefined){config.showRetweet=true;}\r\nif(config.customCallback===undefined){config.customCallback=null;}\r\nif(config.showInteraction===undefined){config.showInteraction=true;}\r\nif(config.showImages===undefined){config.showImages=false;}\r\nif(config.useEmoji===undefined){config.useEmoji=false;}\r\nif(config.linksInNewWindow===undefined){config.linksInNewWindow=true;}\r\nif(config.showPermalinks===undefined){config.showPermalinks=true;}\r\nif(config.dataOnly===undefined){config.dataOnly=false;}\r\nif(inProgress){queue.push(config);}else{inProgress=true;domNode=config.domId;maxTweets=config.maxTweets;parseLinks=config.enableLinks;printUser=config.showUser;printTime=config.showTime;showRts=config.showRetweet;formatterFunction=config.dateFunction;customCallbackFunction=config.customCallback;showInteractionLinks=config.showInteraction;showImages=config.showImages;useEmoji=config.useEmoji;targetBlank=config.linksInNewWindow;permalinks=config.showPermalinks;dataOnly=config.dataOnly;var head=document.getElementsByTagName('head')[0];if(script!==null){head.removeChild(script);}\r\nscript=document.createElement('script');script.type='text/javascript';if(config.list!==undefined){script.src='https://syndication.twitter.com/timeline/list?'+'callback=__twttrf.callback&dnt=false&list_slug='+\r\nconfig.list.listSlug+'&screen_name='+config.list.screenName+'&suppress_response_codes=true&lang='+(config.lang||lang)+'&rnd='+Math.random();}else if(config.profile!==undefined){script.src='https://syndication.twitter.com/timeline/profile?'+'callback=__twttrf.callback&dnt=false'+'&screen_name='+config.profile.screenName+'&suppress_response_codes=true&lang='+(config.lang||lang)+'&rnd='+Math.random();}else if(config.likes!==undefined){script.src='https://syndication.twitter.com/timeline/likes?'+'callback=__twttrf.callback&dnt=false'+'&screen_name='+config.likes.screenName+'&suppress_response_codes=true&lang='+(config.lang||lang)+'&rnd='+Math.random();}else{script.src='https://cdn.syndication.twimg.com/widgets/timelines/'+\r\nconfig.id+'?&lang='+(config.lang||lang)+'&callback=__twttrf.callback&'+'suppress_response_codes=true&rnd='+Math.random();}\r\nhead.appendChild(script);}},callback:function(data){if(data===undefined||data.body===undefined){inProgress=false;if(queue.length>0){twitterFetcher.fetch(queue[0]);queue.splice(0,1);}\r\nreturn;}\r\nif(!useEmoji){data.body=data.body.replace(/(<img[^c]*class=\"Emoji[^>]*>)|(<img[^c]*class=\"u-block[^>]*>)/g,'');}\r\nif(!showImages){data.body=data.body.replace(/(<img[^c]*class=\"NaturalImage-image[^>]*>|(<img[^c]*class=\"CroppedImage-image[^>]*>))/g,'');}\r\nif(!printUser){data.body=data.body.replace(/(<img[^c]*class=\"Avatar\"[^>]*>)/g,'');}\r\nvar div=document.createElement('div');div.innerHTML=data.body;if(typeof(div.getElementsByClassName)==='undefined'){supportsClassName=false;}\r\nfunction swapDataSrc(element){var avatarImg=element.getElementsByTagName('img')[0];if(avatarImg){avatarImg.src=avatarImg.getAttribute('data-src-2x');}else{var screenName=element.getElementsByTagName('a')[0].getAttribute('href').split('twitter.com/')[1];var img=document.createElement('img');img.setAttribute('src','https://twitter.com/'+screenName+'/profile_image?size=bigger');element.prepend(img);}\r\nreturn element;}\r\nvar tweets=[];var authors=[];var times=[];var images=[];var rts=[];var tids=[];var permalinksURL=[];var x=0;if(supportsClassName){var tmp=div.getElementsByClassName('timeline-Tweet');while(x<tmp.length){if(tmp[x].getElementsByClassName('timeline-Tweet-retweetCredit').length>0){rts.push(true);}else{rts.push(false);}\r\nif(!rts[x]||rts[x]&&showRts){tweets.push(tmp[x].getElementsByClassName('timeline-Tweet-text')[0]);tids.push(tmp[x].getAttribute('data-tweet-id'));if(printUser){authors.push(swapDataSrc(tmp[x].getElementsByClassName('timeline-Tweet-author')[0]));}\r\ntimes.push(tmp[x].getElementsByClassName('dt-updated')[0]);permalinksURL.push(tmp[x].getElementsByClassName('timeline-Tweet-timestamp')[0]);if(tmp[x].getElementsByClassName('timeline-Tweet-media')[0]!==undefined){images.push(tmp[x].getElementsByClassName('timeline-Tweet-media')[0]);}else{images.push(undefined);}}\r\nx++;}}else{var tmp=getElementsByClassName(div,'timeline-Tweet');while(x<tmp.length){if(getElementsByClassName(tmp[x],'timeline-Tweet-retweetCredit').length>0){rts.push(true);}else{rts.push(false);}\r\nif(!rts[x]||rts[x]&&showRts){tweets.push(getElementsByClassName(tmp[x],'timeline-Tweet-text')[0]);tids.push(tmp[x].getAttribute('data-tweet-id'));if(printUser){authors.push(swapDataSrc(getElementsByClassName(tmp[x],'timeline-Tweet-author')[0]));}\r\ntimes.push(getElementsByClassName(tmp[x],'dt-updated')[0]);permalinksURL.push(getElementsByClassName(tmp[x],'timeline-Tweet-timestamp')[0]);if(getElementsByClassName(tmp[x],'timeline-Tweet-media')[0]!==undefined){images.push(getElementsByClassName(tmp[x],'timeline-Tweet-media')[0]);}else{images.push(undefined);}}\r\nx++;}}\r\nif(tweets.length>maxTweets){tweets.splice(maxTweets,(tweets.length-maxTweets));authors.splice(maxTweets,(authors.length-maxTweets));times.splice(maxTweets,(times.length-maxTweets));rts.splice(maxTweets,(rts.length-maxTweets));images.splice(maxTweets,(images.length-maxTweets));permalinksURL.splice(maxTweets,(permalinksURL.length-maxTweets));}\r\nvar arrayTweets=[];var x=tweets.length;var n=0;if(dataOnly){while(n<x){arrayTweets.push({tweet:tweets[n].innerHTML,author:authors[n]?authors[n].innerHTML:'Unknown Author',author_data:{profile_url:authors[n]?authors[n].querySelector('[data-scribe=\"element:user_link\"]').href:null,profile_image:authors[n]?'https://twitter.com/'+authors[n].querySelector('[data-scribe=\"element:screen_name\"]').title.split('@')[1]+'/profile_image?size=bigger':null,profile_image_2x:authors[n]?'https://twitter.com/'+authors[n].querySelector('[data-scribe=\"element:screen_name\"]').title.split('@')[1]+'/profile_image?size=original':null,screen_name:authors[n]?authors[n].querySelector('[data-scribe=\"element:screen_name\"]').title:null,name:authors[n]?authors[n].querySelector('[data-scribe=\"element:name\"]').title:null},time:times[n].textContent,timestamp:times[n].getAttribute('datetime').replace('+0000','Z').replace(/([\\+\\-])(\\d\\d)(\\d\\d)/,'$1$2:$3'),image:extractImageUrl(images[n]),rt:rts[n],tid:tids[n],permalinkURL:(permalinksURL[n]===undefined)?'':permalinksURL[n].href});n++;}}else{while(n<x){if(typeof(formatterFunction)!=='string'){var datetimeText=times[n].getAttribute('datetime');var newDate=new Date(times[n].getAttribute('datetime').replace(/-/g,'/').replace('T',' ').split('+')[0]);var dateString=formatterFunction(newDate,datetimeText);times[n].setAttribute('aria-label',dateString);if(tweets[n].textContent){if(supportsClassName){times[n].textContent=dateString;}else{var h=document.createElement('p');var t=document.createTextNode(dateString);h.appendChild(t);h.setAttribute('aria-label',dateString);times[n]=h;}}else{times[n].textContent=dateString;}}\r\nvar op='';if(parseLinks){if(targetBlank){targetLinksToNewWindow(tweets[n]);if(printUser){targetLinksToNewWindow(authors[n]);}}\r\nif(printUser){op+='<div class=\"user\">'+strip(authors[n].innerHTML)+'</div>';}\r\nop+='<p class=\"tweet\">'+strip(tweets[n].innerHTML)+'</p>';if(printTime){if(permalinks){op+='<p class=\"timePosted\"><a href=\"'+permalinksURL[n]+'\">'+times[n].getAttribute('aria-label')+'</a></p>';}else{op+='<p class=\"timePosted\">'+\r\ntimes[n].getAttribute('aria-label')+'</p>';}}}else{if(tweets[n].textContent){if(printUser){op+='<p class=\"user\">'+authors[n].textContent+'</p>';}\r\nop+='<p class=\"tweet\">'+tweets[n].textContent+'</p>';if(printTime){op+='<p class=\"timePosted\">'+times[n].textContent+'</p>';}}else{if(printUser){op+='<p class=\"user\">'+authors[n].textContent+'</p>';}\r\nop+='<p class=\"tweet\">'+tweets[n].textContent+'</p>';if(printTime){op+='<p class=\"timePosted\">'+times[n].textContent+'</p>';}}}\r\nif(showInteractionLinks){op+='<p class=\"interact\"><a href=\"https://twitter.com/intent/'+'tweet?in_reply_to='+tids[n]+'\" class=\"twitter_reply_icon\"'+\r\n(targetBlank?' target=\"_blank\" rel=\"noopener\">':'>')+'Reply</a><a href=\"https://twitter.com/intent/retweet?'+'tweet_id='+tids[n]+'\" class=\"twitter_retweet_icon\"'+\r\n(targetBlank?' target=\"_blank\" rel=\"noopener\">':'>')+'Retweet</a>'+'<a href=\"https://twitter.com/intent/favorite?tweet_id='+\r\ntids[n]+'\" class=\"twitter_fav_icon\"'+\r\n(targetBlank?' target=\"_blank\" rel=\"noopener\">':'>')+'Favorite</a></p>';}\r\nif(showImages&&images[n]!==undefined&&extractImageUrl(images[n])!==undefined){op+='<div class=\"media\">'+'<img src=\"'+extractImageUrl(images[n])+'\" alt=\"Image from tweet\" />'+'</div>';}\r\nif(showImages){arrayTweets.push(op);}else if(!showImages&&tweets[n].textContent.length){arrayTweets.push(op);}\r\nn++;}}\r\nhandleTweets(arrayTweets);inProgress=false;if(queue.length>0){twitterFetcher.fetch(queue[0]);queue.splice(0,1);}}};window.__twttrf=twitterFetcher;window.twitterFetcher=twitterFetcher;return twitterFetcher;}));(function(arr){arr.forEach(function(item){if(item.hasOwnProperty('prepend')){return;}\r\nObject.defineProperty(item,'prepend',{configurable:true,enumerable:true,writable:true,value:function prepend(){var argArr=Array.prototype.slice.call(arguments),docFrag=document.createDocumentFragment();argArr.forEach(function(argItem){var isNode=argItem instanceof Node;docFrag.appendChild(isNode?argItem:document.createTextNode(String(argItem)));});this.insertBefore(docFrag,this.firstChild);}});});})([Element.prototype,Document.prototype,DocumentFragment.prototype]);","import $ from 'jquery';\nimport twitterFetcher from 'twitter-fetcher';\nimport { selectors } from '../Constants';\nimport MobileScrollers from '../components/MobileScrollers';\n\nexport default class DynamicTwitterFeed extends MobileScrollers {\n  constructor(section) {\n    super(section);\n    this.$el = $(section.el);\n    this.settings = section.data;\n    this.flickity = null;\n\n    this.$content = this.$el.find(selectors.twitter.container);\n    this.$tweets = this.$el.find(selectors.twitter.tweet);\n\n    this.$template = $(this.settings.template);\n\n    const onboarding = this.settings.onboarding;\n    const username = this.settings.username;\n    const retweets = this.settings.retweets;\n    const images = this.settings.images;\n    const locale = this.settings.locale || 'en';\n\n    this.init(selectors.twitter.container, {\n      cellSelector: selectors.twitter.tweet,\n    });\n\n\n    if (onboarding || !username) {\n      return;\n    }\n\n    twitterFetcher.fetch({\n      'profile': {\n        'screenName': username,\n      },\n      'maxTweets': 3,\n      'enableLinks': true,\n      'showUser': true,\n      'showTime': true,\n      'dataOnly': false,\n      'useEmoji': true,\n      'showImages': images,\n      'showRetweet': retweets,\n      'lang': locale,\n      'customCallback': (tweets) => this._renderTweets(tweets),\n      'showInteraction': false,\n    });\n  }\n\n  /**\n   * Retrieve information about user who tweeted\n   *\n   * @param el\n   * @returns {{$avatar: *, link: *, name, screenName}}\n   * @private\n   */\n  _extractAuthor(el) {\n    const $el = $(el);\n\n    const link = $el.find('a').attr('href');\n    const name = $el.find('[data-scribe=\"element:name\"]').text();\n    const screenName = $el.find('[data-scribe=\"element:screen_name\"]').text();\n    const $avatar = $el.find('img');\n\n    return { $avatar, link, name, screenName };\n  }\n\n  /**\n   * Retrieve link to tweet, and when it was tweeted\n   *\n   * @param el\n   * @returns {{link: *, postedAt: *}}\n   * @private\n   */\n  _extractMeta(el) {\n    const $el = $(el);\n\n    const link = $el.find('a').attr('href');\n    const postedAt = $el.text();\n\n    return { link, postedAt };\n  }\n\n  _renderTweets(tweets) {\n    const tweetsLength = tweets.length;\n\n    if (!tweets || !tweetsLength) return;\n\n    const tweetsArray = [];\n\n    tweets.forEach((tweet) => {\n      const $tweet = $(tweet);\n\n      const $template = this.$template.clone();\n      const authorInfo = this._extractAuthor($tweet[0]);\n      const meta = this._extractMeta($tweet[2]);\n\n      const content = $tweet[1];\n\n      // Render header\n      $template\n        .find('.tweet-header')\n        .attr('href', authorInfo.link);\n\n      $template\n        .find('.tweet-header-image')\n        .html(authorInfo.$avatar);\n\n      $template\n        .find('.tweet-header-name')\n        .text(authorInfo.name);\n\n      $template\n        .find('.tweet-header-screenname')\n        .text(authorInfo.screenName);\n\n      // Render content\n      $template\n        .find('.tweet-content')\n        .append($tweet[3] ? $tweet[3] : null)\n        .append(content);\n\n      // Render footer\n      $template\n        .find('.tweet-footer')\n        .attr('href', meta.link)\n        .find('.tweet-footer-posted')\n        .text(meta.postedAt);\n\n      tweetsArray.push($template);\n    });\n\n    // Lock content height to prevent the screen from jumping\n    this.$content.css('min-height', this.$content.height());\n\n    this.$tweets.fadeOut().promise().then(() => {\n      this.destroyFlickity();\n      this.$tweets.remove();\n\n      this.$content\n        .append(tweetsArray)\n        .css('min-height', '');\n\n      this.$tweets = this.$el.find('[data-tweet-content]');\n      this.initFlickity();\n    });\n  }\n}\n","import { selectors } from '../Constants';\nimport DeckCase from '../components/DeckCase';\nimport PriceManager from '../components/PriceManager';\nimport ProductItem from '../components/ProductItem';\n\nexport default class FeaturedProducts {\n  constructor(section) {\n    this.section = section;\n    this.cardsEl = this.section.el.querySelector('[data-cards]');\n    this.productItems = [];\n\n    if (!this.cardsEl) {\n      return;\n    }\n\n    this.deckCase = new DeckCase(this.cardsEl);\n\n    this.priceManager = new PriceManager(this.section.el);\n    this.priceManager.updateAll();\n\n    this.productItemEls = this.section.el.querySelectorAll(selectors.product.item.el);\n\n    for (let i = 0; i < this.productItemEls.length; i += 1) {\n      this.productItems.push(new ProductItem(this.productItemEls[i]));\n    }\n  }\n\n  onSectionUnload() {\n    if (this.deckCase) {\n      this.deckCase.onSectionUnload();\n    }\n\n    for (let i = 0; i < this.productItems.length; i += 1) {\n      this.productItems[i].unload();\n    }\n  }\n}\n","import $ from 'jquery';\nimport debounce from 'just-debounce';\n\nexport default class ImageWithTextOverlay {\n  constructor(container) {\n    this.el = container.el.querySelector('[data-image-block]');\n    this.image = this.el.querySelector('[data-image-block-image]');\n    this.$image = $(this.image);\n    this.content = this.el.querySelector('[data-image-block-content]');\n\n    this.onResize = debounce(this._checkHeights, 15).bind(this);\n    window.addEventListener('resize', this.onResize);\n\n    this._checkHeights();\n  }\n\n  onSectionUnload() {\n    window.removeEventListener('resize', this.onResize);\n  }\n\n  _checkHeights() {\n    const imageHeight = this.image.getBoundingClientRect().height;\n    const contentHeight = this.content.getBoundingClientRect().height;\n\n    if (contentHeight === imageHeight) {\n      return;\n    }\n\n    if (contentHeight > imageHeight) {\n      this.$image.css('min-height', contentHeight);\n    } else {\n      this.$image.css('min-height', '');\n    }\n  }\n}\n\n","\n/*!\n * pxs-map v2.0.0\n * (c) 2018 undefined\n */\n\nimport $ from 'jquery';\n\nvar justDebounce = debounce;\n\nfunction debounce(fn, delay, at_start, guarantee) {\n  var timeout;\n  var args;\n  var self;\n\n  return function debounced() {\n    self = this;\n    args = Array.prototype.slice.call(arguments);\n\n    if (timeout && (at_start || guarantee)) {\n      return;\n    } else if (!at_start) {\n      clear();\n\n      timeout = setTimeout(run, delay);\n      return timeout;\n    }\n\n    timeout = setTimeout(clear, delay);\n    fn.apply(self, args);\n\n    function run() {\n      clear();\n      fn.apply(self, args);\n    }\n\n    function clear() {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar PxsMap = function () {\n  function PxsMap(section) {\n    var _this = this;\n\n    classCallCheck(this, PxsMap);\n\n    this.$el = $('[data-map]', section.el);\n    this.settings = section.data;\n    this.map = null;\n    this.center = null;\n\n    this.$container = $('[data-map-container]', this.$el);\n\n    // Scale so range is 12 ~ 17, rather than 1 to 6\n    this.zoom = 11 + parseInt(this.settings.zoom, 10);\n    if (isNaN(this.zoom)) this.zoom = 13;\n\n    this.colors = null;\n\n    if (this.settings.colors) {\n      this.colors = this.settings.colors;\n    }\n\n    this.resize = this.resize.bind(this);\n\n    this.address = this.settings.address;\n    this.apiKey = this.settings.api_key;\n\n    if (this.apiKey) {\n      if (window.googleMaps === undefined) {\n        window.googleMaps = true;\n\n        $.getScript('https://maps.googleapis.com/maps/api/js?key=' + this.apiKey).done(function () {\n          _this._createMap();\n        }).fail(function (status) {\n          console.error(status);\n        });\n      } else {\n        this._createMap();\n      }\n    }\n  }\n\n  createClass(PxsMap, [{\n    key: '_createMap',\n    value: function _createMap() {\n      var _this2 = this;\n\n      return this.geolocate().done(function (results) {\n        _this2.map = new google.maps.Map(_this2.$container.get(0), {\n          center: results[0].geometry.location,\n          clickableIcons: false,\n          disableDefaultUI: true,\n          disableDoubleClickZoom: true,\n          gestureHandling: 'none',\n          keyboardShortcuts: false,\n          maxZoom: _this2.zoom,\n          minZoom: _this2.zoom,\n          scrollWheel: false,\n          styles: _this2._getMapStyles(),\n          zoom: _this2.zoom,\n          zoomControl: false\n        });\n        _this2.center = _this2.map.getCenter();\n        _this2.map.panBy(0, 0);\n\n        new google.maps.Marker({\n          clickable: false,\n          map: _this2.map,\n          position: _this2.center\n        });\n\n        google.maps.event.addDomListener(window, 'resize', justDebounce(_this2.resize, 250, true, true));\n      }).fail(function (status) {\n        var usageLimits = 'https://developers.google.com/maps/faq#usagelimits';\n        var errorMessage = void 0;\n\n        switch (status) {\n          case 'ZERO_RESULTS':\n            errorMessage = '<p>Unable to find the address:</p> ' + _this2.address;\n            break;\n          case 'OVER_QUERY_LIMIT':\n            errorMessage = '\\n              <p>Unable to load Google Maps, you have reached your usage limit.</p>\\n              <p>\\n                Please visit\\n                <a href=\"' + usageLimits + '\" target=\"_blank\">' + usageLimits + '</a>\\n                for more details.\\n              </p>\\n            ';\n            break;\n          default:\n            errorMessage = 'Unable to load Google Maps.';\n            break;\n        }\n\n        _this2.displayErrorInThemeEditor(errorMessage, status);\n      });\n    }\n  }, {\n    key: 'geolocate',\n    value: function geolocate() {\n      var deferred = $.Deferred();\n      var geocoder = new google.maps.Geocoder();\n\n      geocoder.geocode({ address: this.address }, function (results, status) {\n        if (status !== google.maps.GeocoderStatus.OK) {\n          deferred.reject(status);\n        }\n\n        deferred.resolve(results);\n      });\n\n      return deferred;\n    }\n  }, {\n    key: 'resize',\n    value: function resize() {\n      if (this.map) {\n        google.maps.event.trigger(this.map, 'resize');\n        this.map.setCenter(this.center);\n        this.map.panBy(0, 100);\n      }\n    }\n  }, {\n    key: 'onSectionUnload',\n    value: function onSectionUnload() {\n      if (this.map) {\n        google.maps.event.clearListeners(this.map, 'resize');\n      }\n    }\n  }, {\n    key: '_getMapStyles',\n    value: function _getMapStyles() {\n      if (!this.colors) {\n        return;\n      }\n\n      return [{ elementType: 'geometry', stylers: [{ color: this.colors.e }] }, { elementType: 'labels.icon', stylers: [{ visibility: 'off' }] }, { elementType: 'labels.text.fill', stylers: [{ color: this.colors.a }] }, { elementType: 'labels.text.stroke', stylers: [{ color: this.colors.e }] }, { featureType: 'administrative', elementType: 'geometry', stylers: [{ visibility: 'off' }] }, { featureType: 'administrative.country', stylers: [{ visibility: 'off' }] }, { featureType: 'administrative.land_parcel', stylers: [{ visibility: 'off' }] }, { featureType: 'administrative.neighborhood', stylers: [{ visibility: 'off' }] }, { featureType: 'administrative.locality', stylers: [{ visibility: 'off' }] }, { featureType: 'poi', stylers: [{ visibility: 'off' }] }, { featureType: 'road', elementType: 'geometry.fill', stylers: [{ color: this.colors.d }] }, { featureType: 'road', elementType: 'labels.icon', stylers: [{ visibility: 'off' }] }, { featureType: 'road.arterial', elementType: 'geometry', stylers: [{ color: this.colors.c }] }, { featureType: 'road.highway', elementType: 'geometry', stylers: [{ color: this.colors.b }] }, { featureType: 'road.highway.controlled_access', stylers: [{ visibility: 'off' }] }, { featureType: 'road.local', elementType: 'labels.text.fill', stylers: [{ color: this.colors.b }] }, { featureType: 'road.local', elementType: 'labels.text.stroke', stylers: [{ color: this.colors.e }] }, { featureType: 'transit', stylers: [{ visibility: 'off' }] }, { featureType: 'water', elementType: 'geometry', stylers: [{ color: this.colors.f }] }];\n    }\n  }, {\n    key: 'displayErrorInThemeEditor',\n    value: function displayErrorInThemeEditor(errorMessage) {\n      var isThemeEditor = window.Shopify && window.Shopify.designMode;\n\n      if (!isThemeEditor) {\n        return;\n      }\n\n      this.$container.html('<div class=\"map-error-message\">' + errorMessage + '</div>');\n    }\n  }]);\n  return PxsMap;\n}();\n\nexport default PxsMap;\n","\n/*!\n * pxs-announcement-bar v0.0.0\n * (c) 2018 Pixel Union\n */\n\n/**\n * Trigger a custom event.\n *\n * Note: this approach is deprecated, but still required to support older\n * browsers such as IE 10.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\n * @param {*} el The element to trigger the event on.\n * @param {*} name The event name.\n * @returns {Boolean} True if the event was canceled.\n */\nfunction trigger(el, name) {\n  var event = document.createEvent('Event');\n  event.initEvent(name, true, true);\n  return !el.dispatchEvent(event);\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar PxsAnnouncementBar = function () {\n  function PxsAnnouncementBar(section) {\n    classCallCheck(this, PxsAnnouncementBar);\n\n    this.el = section.el;\n    this.scrolledPast = false;\n\n    this._onScroll = this._onScroll.bind(this);\n    this._bindEvents();\n  }\n\n  createClass(PxsAnnouncementBar, [{\n    key: 'onSectionUnload',\n    value: function onSectionUnload() {\n      window.removeEventListener('scroll', this._onScroll);\n    }\n  }, {\n    key: '_bindEvents',\n    value: function _bindEvents() {\n      window.addEventListener('scroll', this._onScroll);\n    }\n  }, {\n    key: '_onScroll',\n    value: function _onScroll() {\n      var _window = window,\n          pageYOffset = _window.pageYOffset;\n\n      var _el$getBoundingClient = this.el.getBoundingClientRect(),\n          height = _el$getBoundingClient.height;\n\n      var scrolledPast = pageYOffset > height;\n\n      // Trigger a hide event when viewport has scrolled past\n      if (!this.scrolledPast && scrolledPast) {\n        this.scrolledPast = true;\n        trigger(this.el, 'pxs-ab-hide');\n      }\n\n      // Trigger a show announcement bar is back in view\n      if (this.scrolledPast && !scrolledPast) {\n        this.scrolledPast = false;\n        trigger(this.el, 'pxs-ab-show');\n      }\n    }\n  }]);\n  return PxsAnnouncementBar;\n}();\n\nexport default PxsAnnouncementBar;\n","import $ from 'jquery';\nimport PxsAnnouncementBar from 'pxs-announcement-bar';\n\nexport default class StaticAnnouncementBar {\n  constructor(section) {\n    // Load in PxsAnnouncementBar to future proof dependency updates\n    this.announcementBar = new PxsAnnouncementBar(section);\n    $(window).trigger('announcement-bar');\n  }\n\n  onSectionUnload() {\n    this.announcementBar.onSectionUnload();\n  }\n}\n","import Cart from '../components/cart/Cart';\n\nexport default class StaticCart {\n  constructor(section) {\n    this.el = section.el;\n    this.moneyFormat = section.data.money_format;\n    this.shipping = section.data.shipping;\n    this.quantityText = section.data.quantity_text;\n    this.cartEl = this.el.querySelector('[data-cart]');\n\n    this._init();\n  }\n\n  _init() {\n    this.cart = new Cart(\n      this.cartEl,\n      {\n        moneyFormat: this.moneyFormat,\n        shipping: this.shipping,\n      },\n    );\n  }\n\n  onSectionUnload() {\n    this.cart.unload();\n  }\n}\n","/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.14.3\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\n\nvar longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nvar timeoutDuration = 0;\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var css = getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n    case '#document':\n      return element.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  var offsetParent = element.offsetParent;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);\n}\n\nfunction getWindowSizes() {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};\n  var width = sizes.width || element.clientWidth || result.right - result.left;\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if (fixedPosition && parent.nodeName === 'HTML') {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop, 10);\n    var marginLeft = parseFloat(styles.marginLeft, 10);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  return isFixed(getParentNode(element));\n}\n\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  var el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // NOTE: 1 DOM access here\n\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  boundaries.left += padding;\n  boundaries.top += padding;\n  boundaries.right -= padding;\n  boundaries.bottom -= padding;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var styles = getComputedStyle(element);\n  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);\n  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier['function']) {\n      // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroy the popper\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger onUpdate callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  // Avoid blurry text by using full pixel integers.\n  // For pixel-perfect positioning, top/bottom prefers rounded\n  // values, while left/right prefers floored values.\n  var offsets = {\n    left: Math.floor(popper.left),\n    top: Math.round(popper.top),\n    bottom: Math.round(popper.bottom),\n    right: Math.floor(popper.right)\n  };\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    top = -offsetParentRect.height + offsets.bottom;\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    left = -offsetParentRect.width + offsets.right;\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  var _data$offsets$arrow;\n\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjuction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);\n  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-right` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  var transformProp = getSupportedPropertyName('transform');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unitless, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the height.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > More on this [reading this issue](https://github.com/FezVrasta/popper.js/issues/373)\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * An scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper this makes sure the popper has always a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier, can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near eachothers\n   * without leaving any gap between the two. Expecially useful when the arrow is\n   * enabled and you want to assure it to point to its reference element.\n   * It cares only about the first axis, you can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjuction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations).\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position,\n     * the popper will never be placed outside of the defined boundaries\n     * (except if keepTogether is enabled)\n     */\n    boundariesElement: 'viewport'\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define you own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the informations used by Popper.js\n * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow, it expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements.\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overriden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass as 3rd argument an object with the same\n * structure of this object, example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated, this callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Create a new Popper.js instance\n   * @class Popper\n   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper\n   * @param {HTMLElement} popper - The HTML element used as popper.\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedule an update, it will run on the next UI update available\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\nexport default Popper;\n//# sourceMappingURL=popper.js.map\n","import $ from 'jquery';\nimport Popper from 'popper.js';\n\nimport { classes, selectors } from '../Constants';\n\nexport default class Popover {\n  constructor(options = {}) {\n    this.content = options.content;\n    this.trigger = options.trigger;\n    this.perfectCenter = options.perfectCenter || false;\n    this.$content = $(this.content);\n    this.$trigger = $(this.trigger);\n    this.$window = $(window);\n    this.$body = $(document.body);\n    this.popper = null;\n\n    this.onPopoverOpen = this._onPopoverOpen.bind(this);\n    this.onPopoverClose = this._onPopoverClose.bind(this);\n    this.toggle = this._togglePopover.bind(this);\n    this.computeStyle = this._computeStyle.bind(this);\n    this.onCreate = this._onCreate.bind(this);\n\n    const defaultCallbacks = {\n      onShow: () => {},\n      onHide: () => {},\n    };\n\n    this.callbacks = $.extend({}, defaultCallbacks, options.callbacks);\n\n    this.defaultOptions = {\n      placement: 'top',\n      modifiers: {\n        preventOverflow: {\n          order: 700,\n          enabled: true,\n          priority: ['top', 'bottom', 'right', 'left'],\n          boundariesElement: 'window',\n        },\n        computeStyle: {\n          order: 750,\n          gpuAcceleration: false,\n          fn: this.computeStyle,\n          x: 'top',\n        },\n        flip: {\n          enabled: false,\n        },\n        arrow: {\n          enabled: false,\n        },\n        hide: {\n          enabled: false,\n        },\n        keepTogether: {\n          enabled: false,\n        },\n      },\n      onCreate: this.onCreate,\n    };\n\n    this.options = $.extend(true, {}, this.defaultOptions, options.popperOptions);\n\n    this._initPopover();\n    this._bindEvents();\n  }\n\n  destroy() {\n    this._unbindEvents();\n    this.hidePopover();\n    this.popper.destroy();\n    this.popper = null;\n\n    this.$content\n      .removeClass(classes.popover.created)\n      .css({\n        height: '',\n        top: '',\n        right: '',\n        bottom: '',\n        left: '',\n        willChange: '',\n      });\n  }\n\n  update() {\n    if (!this.popper) {\n      return;\n    }\n\n    this.popper.update();\n  }\n\n  _initPopover() {\n    this.popper = new Popper(this.trigger, this.content, this.options);\n  }\n\n  _togglePopover() {\n    if (this.$trigger.parent().hasClass(classes.popover.buttonActive)) {\n      this.hidePopover();\n    } else {\n      this._showPopover();\n    }\n  }\n\n  /**\n   * Create and open a Popper\n   */\n  _showPopover() {\n    this.$window.trigger('popover-open', [this.trigger]);\n    this.$body.addClass(classes.popover.active);\n    this.callbacks.onShow();\n\n    this.$trigger\n      .parent()\n      .addClass(classes.popover.buttonActive)\n      .one('trend', () => {\n        this.popper.update();\n        this.$trigger.ariaExpanded(true);\n        this.$content\n          .ariaHidden(false)\n          .revealer('show').one('revealer-show', () => this.popper.update());\n      });\n  }\n\n  /**\n   * Close and remove Popper\n   */\n  hidePopover() {\n    this.callbacks.onHide();\n\n    this.$content\n      .removeClass(classes.popover.scrolls)\n      .ariaHidden(true)\n      .revealer('hide')\n      .one('revealer-animating', () => {\n        this.$body.removeClass(classes.popover.active);\n        this.$trigger\n          .ariaExpanded(false)\n          .parent()\n          .removeClass(classes.popover.buttonActive);\n        this.$window.trigger('popover-close', [this.trigger]);\n      });\n  }\n\n  _bindEvents() {\n    this.trigger.addEventListener('click', this.toggle);\n    this.$window.on('popover-open', this.onPopoverOpen);\n    this.$window.on('popover-close', this.onPopoverClose);\n  }\n\n  _unbindEvents() {\n    this.trigger.removeEventListener('click', this.toggle);\n    this.$window.off('popover-open', this.onPopoverOpen);\n    this.$window.off('popover-close', this.onPopoverClose);\n  }\n\n  _onCreate() {\n    this.$content.addClass(classes.popover.created);\n  }\n\n  /**\n   * Get style information from Popover for placement logic, and visual enhancement\n   *\n   * @param baseHeight\n   * @returns {{height: number, innerHeight: number, minLeft: Number}}\n   * @private\n   */\n  _popoverInfo(baseHeight) {\n    const { left, paddingTop, paddingBottom, marginTop, marginBottom } = getComputedStyle(this.content);\n    const minLeft = parseInt(left, 10);\n    const height = baseHeight - parseInt(marginBottom, 10) - parseInt(marginTop, 10);\n    const innerHeight = height - parseInt(paddingBottom, 10) - parseInt(paddingTop, 10);\n\n    return {\n      height,\n      innerHeight,\n      minLeft: !isNaN(minLeft) ? minLeft : 0,\n    };\n  }\n\n  /**\n   * Determine if a Popover's contents exceeds its possible height, and apply a scrolling class\n   *\n   * @param innerHeight\n   * @returns {boolean}\n   * @private\n   */\n  _popoverScrolls(innerHeight) {\n    const $children = $(this.content.querySelector('div')).children();\n\n    let childrenHeight = 0;\n    $children.each((i, el) => {\n      childrenHeight += $(el).outerHeight(true);\n    });\n\n    return Math.ceil(childrenHeight) > innerHeight;\n  }\n\n  _perfectCenter() {\n    return (this.$window.width() - this.$content.outerWidth()) / 2;\n  }\n\n  /**\n   * Sets Popper placement\n   *\n   * @param data\n   * @returns {*}\n   * @private\n   */\n  _computeStyle(data) {\n    if (!data) {\n      return {};\n    }\n\n    const { popper } = data.offsets;\n    const { height, innerHeight, minLeft } = this._popoverInfo(popper.height);\n    const popoverScrolls = this._popoverScrolls(innerHeight);\n\n    // If needing to perfectly center, use custom logic\n    // Popper will attach to center by the trigger, but doesn't account for translateX\n    const left = this.perfectCenter\n      ? Math.round(this._perfectCenter())\n      : Math.max(Math.round(popper.left), minLeft);\n    const top = Math.round(popper.top);\n\n    this.$content.toggleClass(classes.popover.scrolls, popoverScrolls);\n\n    const styles = {\n      position: popper.position,\n      left,\n      top,\n      height,\n    };\n\n    data.styles = $.extend(true, {}, data.styles, styles);\n\n    return data;\n  }\n\n  /**\n   * Toggle popover trigger as hidden if other popovers open\n   *\n   * @param event\n   * @param trigger\n   * @private\n   */\n  _onPopoverOpen(event, trigger) {\n    if (this.trigger === trigger) {\n      return;\n    }\n\n    this.$trigger.parent().addClass(classes.popover.buttonHidden);\n  }\n\n  /**\n   * Toggle popover trigger as visible if other popovers closed\n   *\n   * @param event\n   * @param trigger\n   * @private\n   */\n  _onPopoverClose(event, trigger) {\n    if (this.trigger === trigger) {\n      return;\n    }\n\n    this.$trigger.parent().removeClass(classes.popover.buttonHidden);\n  }\n}\n","import $ from 'jquery';\nimport layout from '../Layout';\nimport { classes, selectors } from '../Constants';\nimport ScrollHinter from '../helpers/ScrollHinter';\nimport Popover from '../components/Popover';\nimport ProductItem from '../components/ProductItem';\n\nexport default class StaticCollectionPages {\n  constructor(section) {\n    this.el = section.el;\n    this.$el = $(this.el);\n    this.$document = $(document);\n    this.$mainHeader = $(selectors.header.main);\n\n    this.filterGroups = this.el.querySelectorAll('.popover-list-filter-groups');\n    this.scrollHinters = [];\n\n    this.productItemEls = this.el.querySelectorAll(selectors.product.item.el);\n    this.productItems = [];\n\n    this.filterPopover = null;\n    this.sortByPopover = null;\n    this.events = null;\n\n    this.utilityBars = {\n      $utils: this.$el.find(selectors.collectionUtils.utils),\n      $narrow: this.$el.find(selectors.collectionUtils.narrow),\n      $wide: this.$el.find(selectors.collectionUtils.wide),\n    };\n\n    this.$filterItem = this.$el.find(selectors.collectionPopover.filterItem);\n    this.$filterItemAdvanced = this.$el.find(selectors.collectionPopover.filterItemAdvanced);\n    this.$sortTriggerButton = this.$el.find(selectors.collectionPopover.sortByItem);\n\n    this._onBreakpointChange = this._onBreakpointChange.bind(this);\n    layout.onBreakpointChange(this._onBreakpointChange);\n\n    this.onPopoverShow = this._onPopoverShow.bind(this);\n    this.onPopoverHide = this._onPopoverHide.bind(this);\n    this.onFiltersShow = this._onFiltersShow.bind(this);\n\n    this._init();\n  }\n\n  onSectionUnload() {\n    this.$document.off('action-bar:toggle');\n    layout.offBreakpointChange(this._onBreakpointChange);\n\n    if (this.events) {\n      this.events.forEach($el => $el.off('.collection'));\n    }\n\n    if (this.filterPopover) {\n      this.filterPopover.destroy();\n    }\n\n    if (this.sortByPopover) {\n      this.sortByPopover.destroy();\n    }\n\n    for (let i = 0; i < this.productItems.length; i += 1) {\n      this.productItems[i].unload();\n    }\n\n    this.scrollHinters.forEach((hinter) => {\n      hinter.unload();\n    });\n  }\n\n  _init() {\n    this._moveUtilityBar();\n    this._bindEvents();\n    this._initPopovers();\n    this._addScrollHinters();\n    this._setSortByQueryParameters();\n\n    for (let i = 0; i < this.productItemEls.length; i += 1) {\n      this.productItems.push(new ProductItem(this.productItemEls[i]));\n    }\n  }\n\n  _bindEvents() {\n    this.$document.on('action-bar:toggle', (event = null, data = {}) => {\n      this._toggleUtilityBar(data.hide);\n    });\n\n    this.events = [\n      this.$filterItem.on('click.collection', event => this._toggleTag(event.currentTarget)),\n      this.$filterItemAdvanced.on('click.collection', event => this._advancedTags(event)),\n      this.$sortTriggerButton.on('click.collection', event => this._changeSortingButton(event.currentTarget)),\n    ];\n  }\n\n  _onBreakpointChange() {\n    if (layout.crossesThreshold()) {\n      this._initPopovers();\n    }\n\n    this._moveUtilityBar();\n  }\n\n  /**\n   * Initiate Popovers\n   *\n   * @private\n   */\n  _initPopovers() {\n    if (!this.utilityBars.$utils.length) {\n      return;\n    }\n\n    let popperOptions = {};\n    const isMobile = layout.isBreakpoint('XS') || layout.isBreakpoint('S');\n\n    // Popovers assumes content is top oriented by default\n    if (!isMobile) {\n      popperOptions = {\n        placement: 'bottom',\n        modifiers: {\n          computeStyle: {\n            x: 'bottom',\n          },\n        },\n      };\n    }\n\n    const filterTrigger = this.el.querySelector(selectors.popover.triggers.collectionFilter);\n    const filterContent = this.el.querySelector(selectors.popover.contents.collectionFilter);\n\n    const sortByTrigger = this.el.querySelector(selectors.popover.triggers.collectionSortBy);\n    const sortByContent = this.el.querySelector(selectors.popover.contents.collectionSortBy);\n\n    if (filterTrigger && filterContent) {\n      if (this.filterPopover) {\n        this.filterPopover.destroy();\n      }\n\n      const popoverOptions = {\n        popperOptions,\n        callbacks: {\n          onShow: this.onFiltersShow,\n          onHide: this.onPopoverHide,\n        },\n        content: filterContent,\n        trigger: filterTrigger,\n        perfectCenter: isMobile,\n      };\n\n      this.filterPopover = new Popover(popoverOptions);\n    }\n\n    if (sortByTrigger && sortByContent) {\n      if (this.sortByPopover) {\n        this.sortByPopover.destroy();\n      }\n      const popoverOptions = {\n        popperOptions,\n        callbacks: {\n          onShow: this.onPopoverShow,\n          onHide: this.onPopoverHide,\n        },\n        content: sortByContent,\n        trigger: sortByTrigger,\n        perfectCenter: isMobile,\n      };\n\n      this.sortByPopover = new Popover(popoverOptions);\n    }\n  }\n\n  _onPopoverShow() {\n    this.$mainHeader\n      .addClass(classes.popover.hideHeader)\n      .one('trend', () => {\n        if (this.filterPopover) {\n          this.filterPopover.update();\n        }\n\n        if (this.sortByPopover) {\n          this.sortByPopover.update();\n        }\n      });\n  }\n\n  _onFiltersShow() {\n    this.scrollHinters.forEach((hinter) => {\n      hinter.checkScroll();\n    });\n\n    this._onPopoverShow();\n  }\n\n  _onPopoverHide() {\n    this.$mainHeader.removeClass(classes.popover.hideHeader);\n  }\n\n  _addScrollHinters() {\n    for (let i = 0; i < this.filterGroups.length; i += 1) {\n      this.scrollHinters.push(new ScrollHinter(this.filterGroups[i]));\n    }\n  }\n\n  /**\n   * Move utility bar in the DOM as needed for layout\n   *\n   * @private\n   */\n  _moveUtilityBar() {\n    if (!this.utilityBars.$utils.length) {\n      return;\n    }\n\n    if (layout.isBreakpoint('L') || layout.isBreakpoint('XL')) {\n      if ($.contains(this.utilityBars.$narrow[0], this.utilityBars.$utils[0])) {\n        return;\n      }\n\n      const $utils = this.utilityBars.$utils.detach();\n      this.utilityBars.$narrow.append($utils);\n      this._toggleUtilityBar(false);\n    } else {\n      if ($.contains(this.utilityBars.$wide[0], this.utilityBars.$utils[0])) {\n        return;\n      }\n\n      const $utils = this.utilityBars.$utils.detach();\n      this.utilityBars.$wide.append($utils);\n      this._toggleUtilityBar(false);\n    }\n  }\n\n  /**\n   * Show or hide utility bar\n   *\n   * @param state\n   * @private\n   */\n  _toggleUtilityBar(state) {\n    this.utilityBars.$utils.toggleClass('hidden', state);\n\n    if (this.filterPopover) {\n      this.filterPopover.hidePopover();\n    }\n\n    if (this.sortByPopover) {\n      this.sortByPopover.hidePopover();\n    }\n  }\n\n  /**\n   * Make Shopify aware of relevent collection search info\n   *  - tag\n   *  - vendor\n   *  - pagination\n   *  - sorting criteria\n   *\n   * @private\n   */\n  _setSortByQueryParameters() {\n    Shopify.queryParams = {};\n    if (location.search.length) {\n      for (let i = 0, aCouples = location.search.substr(1).split('&'); i < aCouples.length; i++) {\n        const aKeyValue = aCouples[i].split('=');\n        // Reset the page number when we apply (i.e. don't add it to params)\n        if (aKeyValue.length > 1 && aKeyValue[0] !== 'page') {\n          Shopify.queryParams[decodeURIComponent(aKeyValue[0])] = decodeURIComponent(aKeyValue[1]);\n        }\n      }\n    }\n  }\n\n  /**\n   * Update buttons styles when changing collection sorting\n   *\n   * @param target\n   * @private\n   */\n  _changeSortingButton(target) {\n    $(target)\n      .parent()\n      .addClass(classes.popover.listItemActive)\n      .siblings(`.${classes.popover.listItemActive}`)\n      .removeClass(classes.popover.listItemActive);\n\n    this._changeSorting(target);\n  }\n\n  /**\n   * Change sorting of collection\n   *\n   * @param target\n   * @private\n   */\n  _changeSorting(target) {\n    const $target = $(target);\n\n    Shopify.queryParams.sort_by = $target.val();\n    location.search = jQuery.param(Shopify.queryParams).replace(/\\+/g, '%20');\n  }\n\n  /**\n   * Toggle tag active state before page transition\n   *\n   * @param target\n   * @private\n   */\n  _toggleTag(target) {\n    $(target)\n      .parent()\n      .addClass(classes.popover.listItemActive)\n      .siblings(`.${classes.popover.listItemActive}`)\n      .removeClass(classes.popover.listItemActive);\n  }\n\n  _advancedTags(event) {\n    const target = event.currentTarget;\n    const $parent = $(target).parent();\n\n    const tagGroup = $parent.attr('data-group');\n    const tagHandle = $parent.attr('data-handle');\n    const $activeGroup = $(`.${classes.popover.listItemActive}[data-group=${tagGroup}]`);\n\n    // If item is active, perform as normal\n    // If there are there no active items in group, perform as normal\n    if ($parent.hasClass(classes.popover.listItemActive) || !$activeGroup.length) {\n      return this._toggleTag(target);\n    }\n\n    // Item is not active, and there are no items active in group\n    event.preventDefault();\n    this._toggleTag(target);\n\n    location.href = location.href\n      // swap tag\n      .replace($activeGroup.attr('data-handle'), tagHandle)\n      // go back to page 1\n      .replace(/(&page=\\d+)|(page=\\d+&)|(\\?page=\\d+$)/, '');\n  }\n}\n","import $ from 'jquery';\nimport RichText from '../components/RichText';\n\nexport default class StaticFaq {\n  constructor(section) {\n    this.faq = section.el ? new RichText(section.el, 'accordion') : false;\n  }\n\n  onSectionUnload() {\n    if (this.faq) {\n      this.faq.unload();\n    }\n  }\n\n  onSectionBlockSelect(block) {\n    const $trigger = $(block.el);\n\n    if (!$trigger.hasClass('active')) {\n      $trigger.trigger('click');\n    }\n  }\n}\n","import $ from 'jquery';\nimport $script from 'scriptjs';\n\nexport default class StaticGiftCard {\n  constructor(section) {\n    const $scripts = $('[data-scripts]');\n    const qrCodeEl = section.el.querySelector('[data-qrcode]');\n\n    if (!qrCodeEl) return;\n\n    this.selectText = this._selectText.bind(this);\n    this.qrCodeText = section.el.querySelector('[data-select-code]');\n\n    $script($scripts.data('shopify-qrcode'), () => {\n      const qrCode = qrCodeEl.getAttribute('data-qrcode');\n\n      this.qrCode = new QRCode(qrCodeEl, {\n        text: qrCode,\n        width: 120,\n        height: 120,\n      });\n    });\n\n    this.qrCodeText.addEventListener('click', this.selectText);\n  }\n\n  onSectionUnload() {\n    this.qrCodeText.removeEventListener('click', this.selectText);\n    this.qrCode = null;\n  }\n\n  _selectText() {\n    let range = '';\n\n    if (document.body.createTextRange) { // ms method\n      range = document.body.createTextRange();\n      range.moveToElementText(this.qrCodeText);\n      range.select();\n    } else if (window.getSelection) { // moz, opera, webkit method\n      const selection = window.getSelection();\n      range = document.createRange();\n      range.selectNodeContents(this.qrCodeText);\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n}\n","import $ from 'jquery';\nimport { classes, events, selectors } from '../../Constants';\nimport Cart from '../cart/Cart';\n\nexport default class HeaderCart {\n  constructor(options) {\n    const defaults = {\n      $mainHeader: null,\n      $drawer: null,\n      currency: '',\n      isMobile: () => {},\n    };\n\n    this.config = $.extend({}, defaults, options);\n    this.isMobile = this.config.isMobile;\n\n    this.$drawer = this.config.$drawer;\n    this.$mainHeader = this.config.$mainHeader;\n    this.mainHeader = this.$mainHeader[0];\n    \n    this.afterOpen = this._afterOpen.bind(this);\n    this.afterClose = this._afterClose.bind(this);\n\n    this.$window = $(window);\n    this.$document = $(document);\n\n    this.cart = new Cart(this.$drawer[0].querySelector(selectors.cart.el), {\n      moneyFormat: this.config.currency.money_format,\n    });\n    \n    this._bindEvents();\n  }\n\n  unload() {\n    this.cart.unload();\n  }\n\n  _bindEvents() {\n    this.$window.on(`${events.cart.loadingFinish}.header-cart`, () => this._toggleCartHeight(true));\n    this.$window.on(`${events.cart.item.removingFinished}.header-cart`, () => this._repositionCart());\n  }\n\n  _toggleCartHeight(on = true, force = false) {\n    if (force || (this.isMobile() && this.$drawer.hasClass('visible'))) {\n      this.$drawer.css('height', on ? this.$drawer.outerHeight() : '');\n    }\n  }\n\n  _repositionCart() {\n    if (!this.isMobile() || !this.$drawer.hasClass('visible')) {\n      return;\n    }\n\n    const drawerHeight = this.$drawer.find(selectors.cart.el).outerHeight();\n    const headerRect = this.mainHeader.getBoundingClientRect();\n\n    // Calculate relative offsets\n    const fromBottom = drawerHeight;\n    const fromTop = window.innerHeight - (headerRect.height + drawerHeight);\n\n    // Get offset types from existing _openHeader action\n    const offsetType = this.$mainHeader.data('offset-type');\n    const offset = offsetType === 'top' ? fromTop : fromBottom;\n\n    // Move header to new position\n    this.$mainHeader.css(offsetType, offset);\n\n    // Set height of drawer to height of new contents\n    this.$drawer.css('height', drawerHeight);\n  }\n\n  _afterClose() {\n    this._toggleCartHeight(false, true);\n    this.$drawer.off('click.header-cart');\n  }\n\n  _afterOpen() {\n    this.$drawer.on('click.header-cart', selectors.cart.expand, (event) => {\n      const $target = $(event.currentTarget);\n      this._toggleCartHeight($target.hasClass(classes.cart.expandable.expanded));\n    });\n  }\n}\n","import Flickity from 'flickity';\nimport layout from '../Layout';\n\nexport default class FeaturesList {\n  constructor(container) {\n    this.features = container.el.querySelector('[data-features-list-items]');\n    this.flickity = null;\n\n    this._onBreakpointChange = this._onBreakpointChange.bind(this);\n    layout.onBreakpointChange(this._onBreakpointChange);\n\n    this._initFlickity();\n  }\n\n  _initFlickity() {\n    if (!layout.isBreakpoint('XS') && !layout.isBreakpoint('S')) {\n      return this._destroyFlickity();\n    }\n\n    if (this.flickity) {\n      return;\n    }\n\n    this.flickity = new Flickity(this.features, {\n      cellAlign: 'left',\n      contain: true,\n      freeScroll: true,\n      prevNextButtons: false,\n      pageDots: false,\n    });\n  }\n\n  _destroyFlickity() {\n    if (!this.flickity) {\n      return;\n    }\n\n    this.flickity.destroy();\n    this.flickity = null;\n  }\n\n  _onBreakpointChange() {\n    this._initFlickity();\n  }\n\n  onSectionUnload() {\n    this._destroyFlickity();\n  }\n}\n","import $ from 'jquery';\nimport { selectors } from '../Constants';\n\nexport default class VideoWithText {\n  constructor(container) {\n    this.el = container.el;\n    this.videoEl = this.el.querySelector(selectors.videoBlock.videoEl);\n\n    this.playButton = this.videoEl.querySelector(selectors.videoBlock.playButton);\n    this.video = this.videoEl.querySelector('iframe');\n\n    this.$blockingLayer = $(this.videoEl.querySelector(selectors.videoBlock.blockingLayer));\n\n    this.playVideo = this._playVideo.bind(this);\n    this.onVideoLoad = this._onVideoLoad.bind(this);\n\n    this._bindEvents();\n  }\n\n  onSectionUnload() {\n    this.video.removeEventListener('load', this.onVideoLoad);\n\n    if (this.playButton) {\n      this.playButton.removeEventListener('click', this.playVideo);\n    }\n  }\n\n  _bindEvents() {\n    this.video.addEventListener('load', this.onVideoLoad);\n\n    if (this.playButton) {\n      this.playButton.addEventListener('click', this.playVideo);\n    }\n  }\n\n  _playVideo() {\n    const src = this.video.getAttribute('src');\n    const newSrc = `${src}&autoplay=1`;\n\n    this.playButton.classList.add('loading');\n    this.playButton.setAttribute('disabled', '');\n    this.video.setAttribute('src', newSrc);\n  }\n\n  _onVideoLoad() {\n    if (this.video.getAttribute('src').indexOf('autoplay') === -1) {\n      return;\n    }\n\n    setTimeout(() => {\n      this.$blockingLayer.addClass('hidden').one('trend', () => {\n        this.$blockingLayer.addClass('disabled');\n      });\n    }, 600);\n  }\n}\n","import { selectors } from '../Constants';\nimport ImageWithTextOverlay from './ImageWithTextOverlay';\nimport Popover from '../components/Popover';\n\nexport default class ShareBlock extends ImageWithTextOverlay {\n  constructor(container) {\n    super(container);\n\n    this.popover = new Popover({\n      content: this.el.querySelector(selectors.popover.contents.share),\n      trigger: this.el.querySelector(selectors.popover.triggers.share),\n      perfectCenter: true,\n    });\n  }\n\n  onSectionUnload() {\n    // Unload event binding in ImageWithTextOverlay\n    super.onSectionUnload();\n\n    this.popover.destroy();\n  }\n}\n","import MobileScrollers from '../components/MobileScrollers';\nimport PriceManager from '../components/PriceManager';\n\nexport default class Testimonials extends MobileScrollers {\n  constructor(container) {\n    super(container);\n    this.priceManager = new PriceManager(this.el);\n    this.priceManager.updateAll();\n\n    const cellAlign = this.el.querySelectorAll('.testimonial').length > 2\n      ? 'left'\n      : 'center';\n\n    this.init('[data-testimonials]', {\n      cellAlign,\n    });\n  }\n}\n","import FeaturesList from './FeaturesList';\nimport Gallery from './Gallery';\nimport VideoWithText from './VideoWithText';\nimport ImageWithTextOverlay from './ImageWithTextOverlay';\nimport ShareBlock from './ShareBlock';\nimport Testimonials from './Testimonials';\n\nexport default class StaticStory {\n  constructor(section) {\n    this.el = section.el;\n    this.blocks = this.el.querySelectorAll('[data-story-block]');\n    this.instances = {};\n\n    this.instanceTypes = {\n      'features-list': FeaturesList,\n      'gallery': Gallery,\n      'video-with-text': VideoWithText,\n      'image-with-text-overlay': ImageWithTextOverlay,\n      'share': ShareBlock,\n      'testimonials': Testimonials,\n    };\n\n    if (this.blocks) {\n      this._initBlocks();\n    }\n  }\n\n  onSectionUnload() {\n    Object.keys(this.instances).forEach((id) => {\n      if (this.instances[id] && this.instances[id].onSectionUnload) {\n        // Each Block in Story is treated as a Section\n        this.instances[id].onSectionUnload();\n      }\n    });\n\n    this.instances = {};\n  }\n\n  /**\n   * Block information\n   * - block.el: Used for compatibility with Section events\n   * - block.type: Used to map to appropriate JS Class\n   * - block.id: For possible future usage for block event handling\n   *\n   * @param block\n   * @returns {{el: *, type: (string|*), id: (string|*)}}\n   * @private\n   */\n  _getBlockInfo(block) {\n    return {\n      el: block,\n      type: block.getAttribute('data-story-block'),\n      id: block.getAttribute('data-story-id'),\n    };\n  }\n\n  _initBlocks() {\n    for (let i = 0; i < this.blocks.length; i++) {\n      const block = this.blocks[i];\n      const blockInfo = this._getBlockInfo(block);\n\n      if (this.instanceTypes[blockInfo.type]) {\n        this.instances[blockInfo.id] = new this.instanceTypes[blockInfo.type](blockInfo);\n      }\n    }\n  }\n}\n","import $ from 'jquery';\nimport { classes } from '../../Constants';\nimport StaticStory from '../../sections/StaticStory';\n\nexport default class HeaderStory {\n  constructor(options) {\n    this.$document = $(document);\n\n    const defaults = {\n      $mainHeader: null,\n      $drawer: null,\n      $toggle: null,\n      storyHandle: null,\n    };\n\n    this.config = $.extend({}, defaults, options);\n\n    this.story = null;\n  }\n\n  init() {\n    const storyHandle = this.config.storyHandle;\n    const storyTemplate = 'story.ajax';\n\n    $.ajax({\n      url: `/pages/${storyHandle}`,\n      data: `view=${storyTemplate}`,\n      dataType: 'html',\n      success: (data) => {\n        const el = this.config.$drawer[0];\n        this.config.$toggle.parent().removeClass(classes.drawerToggles.disabled);\n        this.config.$drawer.html(data);\n\n        this.story = new StaticStory({ el });\n        this.$document.trigger('check-object-fit', { el });\n      },\n      error: (jqXHR, textStatus, errorThrown) => {\n        console.warn(`Unable to retrieve Story with error: ${errorThrown}`);\n      },\n    });\n  }\n\n  unload() {\n    if (this.story) {\n      this.story.onSectionUnload();\n    }\n  }\n}\n\n","export default function getHeaderHeight(header) {\n  const { height } = header.getBoundingClientRect();\n  return Math.ceil(height);\n}\n","import { selectors } from '../../Constants';\n\nexport default function getAnnouncementBarHeight() {\n  const el = document.querySelector(selectors.announcementBar.main);\n\n  if (!el) {\n    return 0;\n  }\n\n  const { height } = el.getBoundingClientRect();\n  return Math.ceil(height);\n}\n","import $ from 'jquery';\n\nexport default class HeaderNotification {\n  constructor(options) {\n    const defaults = {\n      $drawer: null,\n      $mainHeader: null,\n      showNotification: false,\n    };\n\n    this.config = $.extend({}, defaults, options);\n    this.$notificationDismiss = this.config.$mainHeader.find('[data-notification-dismiss]');\n    this.notificationKey = 'pxu_notification_seen';\n\n    this.dismissNotification = this._dismissNotification.bind(this);\n    this._bindEvents();\n  }\n\n  _bindEvents() {\n    this.$notificationDismiss.on('click.header-drawers', (event) => {\n      event.preventDefault();\n\n      this._dismissNotification();\n      this._hideNotification();\n    });\n  }\n\n  unload() {\n    this.$notificationDismiss.off('click.header-drawers');\n  }\n\n  openNotification(skipClose = true, forceOpen = false) {\n    let showNotification = true;\n    const isDismissed = this.isNotificationDismissed();\n\n    // Only attempt to open notification if is enabled\n    if (!this.config.showNotification || isDismissed) {\n      showNotification = false;\n    }\n\n    // Force notification open\n    if (forceOpen && !this.config.$drawer.revealer('isVisible')) {\n      showNotification = true;\n    }\n\n    if (!showNotification) {\n      return;\n    }\n\n    this.config.$mainHeader.trigger('header-drawers:open', {\n      drawer: 'notification',\n      skipClose,\n    });\n  }\n\n  isNotificationDismissed() {\n    // Amount of days notification should be dismissed for\n    const lastSeen = this._lastSeenNotification();\n    const dismissalPeriod = 30;\n\n    const now = new Date().getTime();\n    const diff = Math.round((now - lastSeen) / 1000);\n\n    // Days since notification was dismissed\n    const elapsedDays = Math.floor(diff / (24 * 60 * 60));\n\n    return dismissalPeriod > elapsedDays;\n  }\n\n  /**\n   * When the notification last seen.\n   *\n   * @returns {number}\n   * @private\n   */\n  _lastSeenNotification() {\n    try {\n      return localStorage.getItem(this.notificationKey) || 0;\n    } catch (error) {\n      console.warn(error);\n      return 0;\n    }\n  }\n\n  _setNotificationTime(timestamp) {\n    try {\n      localStorage.setItem(this.notificationKey, timestamp);\n    } catch (error) {\n      console.warn(error);\n    }\n  }\n\n  _dismissNotification() {\n    if (this.isNotificationDismissed()) {\n      return;\n    }\n\n    const now = new Date().getTime();\n    this._setNotificationTime(now);\n  }\n\n  _hideNotification() {\n    this.config.$mainHeader.trigger('header-drawers:close', {\n      drawer: 'notification',\n    });\n  }\n}\n","import $ from 'jquery';\n\n/**\n * Traps the focus in a particular container\n *\n * @param {object} options - Options to be used\n * @property {jQuery} options.$container - Container to trap focus within\n * @property {string} options.namespace - Namespace used for new focus event handler\n */\nfunction trapFocus(options = { namespace: null, focusParent: false }) {\n  const { $container, namespace, focusParent } = options;\n  const eventName = namespace ? `focusin.${namespace}` : 'focusin';\n  const $focusable = focusParent\n    ? $container\n    : $container.find('a:visible:first').eq(0);\n\n  $container.attr('tabindex', '-1');\n  $focusable.focus();\n\n  $(document).on(eventName, (event) => {\n    if ($container[0] !== event.target && !$container.has(event.target).length) {\n      $focusable.focus();\n    }\n  });\n}\n\n\n/**\n * Removes the trap of focus in a particular container\n *\n * @param {object} options - Options to be used\n * @property {jQuery} options.$container - Container of trapped focus\n * @property {string} options.namespace - Namespace used for new focus event handler\n */\n\nfunction removeTrapFocus(options = {}) {\n  const { $container, namespace } = options;\n  const eventName = namespace ? `focusin.${namespace}` : 'focusin';\n\n  if ($container && $container.length) {\n    $container.attr('tabindex', '0');\n  }\n\n  $(document).off(eventName);\n}\n\nexport {\n  trapFocus,\n  removeTrapFocus,\n};\n","import $ from 'jquery';\nimport debounce from 'just-debounce';\nimport HeaderCart from './HeaderCart';\nimport HeaderStory from './HeaderStory';\nimport getHeaderHeight from './getHeaderHeight';\nimport getAnnouncementBarHeight from './getAnnouncementBarHeight';\nimport HeaderNotification from './HeaderNotification';\nimport layout from '../../Layout';\nimport { classes, selectors } from '../../Constants';\nimport { removeTrapFocus, trapFocus } from '../../helpers/a11y';\nimport ScrollLock from '../../helpers/ScrollLock';\n\nexport default class HeaderDrawers {\n  constructor(options) {\n    this.settings = options.settings;\n    this.currency = options.currency;\n    this.$mainHeader = options.$mainHeader;\n    this.mainHeader = this.$mainHeader[0];\n    this.$window = $(window);\n    this.$document = $(document);\n    this.$drawerToggle = this.$mainHeader.find(selectors.header.drawerToggle);\n    this.$drawers = this.$mainHeader.find(`[${selectors.header.drawerItemAttr}]`);\n\n    this.isMobile = this._isMobile.bind(this);\n    this._menuAfterOpen = this._menuAfterOpen.bind(this);\n    this._menuAfterClose = this._menuAfterClose.bind(this);\n    this._searchAfterOpen = this._searchAfterOpen.bind(this);\n    this._storyAfterOpen = this._storyAfterOpen.bind(this);\n    this._drawerBreakPoints = this._drawerBreakPoints.bind(this);\n    layout.onBreakpointChange(this._drawerBreakPoints);\n\n    this.$toggles = {\n      account: this._getDrawerObject(selectors.header.drawerToggleAttr, 'account'),\n      cart: this._getDrawerObject(selectors.header.drawerToggleAttr, 'cart'),\n      menu: this._getDrawerObject(selectors.header.drawerToggleAttr, 'menu'),\n      notification: this._getDrawerObject(selectors.header.drawerToggleAttr, 'notification'),\n      story: this._getDrawerObject(selectors.header.drawerToggleAttr, 'story'),\n      search: this._getDrawerObject(selectors.header.drawerToggleAttr, 'search'),\n    };\n\n    this.$drawerItems = {\n      account: this._getDrawerObject(selectors.header.drawerItemAttr, 'account'),\n      cart: this._getDrawerObject(selectors.header.drawerItemAttr, 'cart'),\n      menu: this._getDrawerObject(selectors.header.drawerItemAttr, 'menu'),\n      notification: this._getDrawerObject(selectors.header.drawerItemAttr, 'notification'),\n      story: this._getDrawerObject(selectors.header.drawerItemAttr, 'story'),\n      search: this._getDrawerObject(selectors.header.drawerItemAttr, 'search'),\n    };\n\n    this.headerStory = new HeaderStory({\n      $mainHeader: this.$mainHeader,\n      $drawer: this.$drawerItems.story,\n      $toggle: this.$toggles.story,\n      storyHandle: this.settings.story_handle,\n    });\n\n    this.headerCart = new HeaderCart({\n      $mainHeader: this.$mainHeader,\n      $drawer: this.$drawerItems.cart,\n      currency: this.currency,\n      isMobile: this.isMobile,\n    });\n\n    this.headerNotification = new HeaderNotification({\n      $mainHeader: this.$mainHeader,\n      $drawer: this.$drawerItems.notification,\n      showNotification: this.settings.show_notification,\n    });\n\n    this.drawerConfigs = this._configureDrawers();\n\n    this.scrollLock = new ScrollLock();\n\n    this._bindEvents();\n    this._positionDrawers();\n\n    if (this.settings.story_handle) {\n      this.headerStory.init();\n      this.headerNotification.openNotification();\n    }\n  }\n\n  unload() {\n    this.$drawerToggle.off('.header-drawers');\n    this.$drawers.off('.header-drawers');\n    this.$mainHeader.off('header-drawers:close');\n    this.$mainHeader.off('header-drawers:open');\n    this.$window.off('.relative-drawers');\n\n    this.headerStory.unload();\n    this.headerNotification.unload();\n    this.headerCart.unload();\n    this._closeAllDrawers();\n  }\n\n  /**\n   * When notification block is selected\n   */\n  notificationSelect() {\n    this.headerNotification.openNotification(false, true);\n  }\n\n  /**\n   * When notification block is deselected\n   */\n  notificationDeselect() {\n    const isDismissed = this.headerNotification.isNotificationDismissed();\n\n    if (isDismissed) {\n      this._closeDrawer({ drawerToClose: 'notification' });\n    }\n  }\n\n  _configureDrawers() {\n    const defaultDrawerConfig = {\n      afterOpen: () => {},\n      afterClose: () => {},\n      belowMobileHeader: true,\n      canTrapFocus: true,\n      scrollLock: true,\n      focusParent: false,\n    };\n\n    const menuConfig = $.extend({}, defaultDrawerConfig, {\n      afterOpen: this._menuAfterOpen,\n      afterClose: this._menuAfterClose,\n    });\n\n    const accountConfig = $.extend({}, defaultDrawerConfig, {\n      belowMobileHeader: false,\n      scrollLock: false,\n    });\n\n    const notificationConfig = $.extend({}, defaultDrawerConfig, {\n      belowMobileHeader: false,\n      canTrapFocus: false,\n      scrollLock: false,\n    });\n\n    const storyConfig = $.extend({}, defaultDrawerConfig, {\n      afterOpen: this._storyAfterOpen,\n      focusParent: true,\n    });\n\n    const searchConfig = $.extend({}, defaultDrawerConfig, {\n      afterOpen: this._searchAfterOpen,\n    });\n\n    const cartConfig = $.extend({}, defaultDrawerConfig, {\n      afterOpen: this.headerCart.afterOpen,\n      afterClose: this.headerCart.afterClose,\n    });\n\n    return {\n      account: accountConfig,\n      cart: cartConfig,\n      menu: menuConfig,\n      notification: notificationConfig,\n      story: storyConfig,\n      search: searchConfig,\n    };\n  }\n\n  _bindEvents() {\n    this.$window.on('resize.relative-drawers', debounce(() => this._positionDrawers(), 15));\n\n    this.$drawerToggle.on('click.header-drawers keypress.header-drawers', (event) => {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n\n      let shouldFocus = false;\n\n      if (event.type === 'keypress') {\n        const code = event.charCode || event.keyCode;\n\n        if ((code === 32) || (code === 13)) {\n          shouldFocus = true;\n        }\n      }\n\n      const drawerType = $(event.currentTarget).attr(selectors.header.drawerToggleAttr);\n      this._toggleDrawer(drawerType, shouldFocus);\n    });\n\n    this.$mainHeader.on('header-drawers:close', (event, data) => {\n      if (!data.drawer) {\n        return console.warn('No drawer specified to close');\n      }\n\n      this._closeDrawer({ drawerToClose: data.drawer });\n    });\n\n    this.$mainHeader.on('header-drawers:open', (event, data) => {\n      if (!data.drawer) {\n        return console.warn('No drawer specified to open');\n      }\n\n      const drawerToOpen =  data.drawer;\n      const skipClose = data.skipClose || false;\n\n      this._openDrawer(drawerToOpen, skipClose);\n    });\n\n    this.$drawers.on('revealer-hide.header-drawers', (event) => {\n      const closingDrawer = event.currentTarget.getAttribute(selectors.header.drawerItemAttr);\n      const $openDrawers = this.$drawers.filter('.visible, .animating');\n      if (closingDrawer === 'notification') {\n        return;\n      }\n\n      if (!$openDrawers.length) {\n        this.headerNotification.openNotification(true);\n      }\n    });\n  }\n\n  _getDrawerSelector(dataAttr, handle) {\n    return `[${dataAttr}=\"${handle}\"]`;\n  }\n\n  _getDrawerObject(dataAttr, handle) {\n    return this.$mainHeader.find(this._getDrawerSelector(dataAttr, handle));\n  }\n\n  _isMobile() {\n    return layout.isBreakpoint('XS') || layout.isBreakpoint('S');\n  }\n\n  _positionDrawers() {\n    this._positionDrawer('account', 'account');\n    this._positionDrawer('notification', 'story');\n  }\n\n  /**\n   * Position drawers relative to their toggle\n   *\n   * @param {string} drawerItem - Name of drawer to position\n   * @param {string} drawerToggle - Name of drawer to tether to\n   * @private\n   */\n  _positionDrawer(drawerItem, drawerToggle) {\n    const $drawer = this.$drawerItems[drawerItem];\n    const $toggle = this.$toggles[drawerToggle];\n    const rightGutter = 16;\n    const clientWidth = document.body.clientWidth;\n\n    if (!$drawer.length || !$toggle.length) {\n      return;\n    }\n\n    const toggleRect = $toggle[0].getBoundingClientRect();\n    const toggleMiddle = (toggleRect.left + (toggleRect.width / 2));\n    const drawerWidth = parseInt(window.getComputedStyle($drawer[0]).width, 10);\n    const drawerLeft = toggleMiddle - (drawerWidth / 2);\n    const exceedsWindow = (drawerLeft + rightGutter + drawerWidth) >  clientWidth;\n\n    // Update position\n    let left = drawerLeft;\n    let transformOrigin = '50% 0%'; // Desktop transform origin, if fits\n\n    if (exceedsWindow) {\n      left = clientWidth - drawerWidth - rightGutter;\n    }\n\n    if (!this._isMobile() && exceedsWindow) {\n      // Use calculated left edge of drawer\n      const offsetX = ((toggleMiddle - drawerLeft) / drawerWidth) * 100;\n      transformOrigin = `${offsetX}% 0%`;\n    }\n\n    if (this._isMobile()) {\n      // Unset right offset on mobile\n      left = '';\n      transformOrigin = '50% 100%';\n    }\n\n    $drawer.css({left, transformOrigin});\n  }\n\n  /**\n   * Debounce method to close drawers when transitioning over to different displays\n   *\n   * @private\n   */\n  _drawerBreakPoints() {\n    if (layout.crossesThreshold()) {\n      this._closeAllDrawers('notification');\n    }\n  }\n\n  _toggleButton(drawerType, state) {\n    const $toggle = this.$toggles[drawerType];\n\n    if (!$toggle || !$toggle.length) {\n      return;\n    }\n\n    $toggle\n      .ariaExpanded(state)\n      .parent(selectors.header.drawerToggleParent)\n      .toggleClass(classes.drawerToggles.active, state);\n  }\n\n  /**\n   * Toggle visibility of a drawer\n   *\n   * @param drawerType\n   * @private\n   */\n  _toggleDrawer(drawerType, shouldFocus = false) {\n    if (this.$mainHeader.hasClass(classes.drawerVisibility[drawerType])) {\n      this._closeDrawer({\n        drawerToClose: drawerType,\n        focusOnToggle: shouldFocus,\n      });\n    } else {\n      this._openDrawer(drawerType, false, shouldFocus);\n    }\n  }\n\n  /**\n   * Open a specific drawer\n   *\n   * @param {string} drawerToOpen - Name of drawer to open\n   * @param {boolean} skipClose - Skip closing of open menus\n   * @private\n   */\n  _openDrawer(drawerToOpen, skipClose = false, shouldFocus = false) {\n    const toggleExists = this.$toggles[drawerToOpen].length;\n    const toggleDisabled = this.$toggles[drawerToOpen]\n      .parent()\n      .hasClass(classes.drawerToggles.disabled);\n\n    if (toggleExists && toggleDisabled) {\n      return;\n    }\n\n    const headerHeight = getHeaderHeight(this.mainHeader);\n    const config = this.drawerConfigs[drawerToOpen];\n    this.$drawerItems[drawerToOpen].css('max-height', window.innerHeight - headerHeight);\n\n    if (!skipClose) {\n      this._closeAllDrawers(drawerToOpen);\n    }\n\n    if (config.scrollLock) {\n      this.scrollLock.lock();\n    }\n\n    if (this._isMobile()) {\n      this.$document.trigger('action-bar:toggle', { hide: true });\n    }\n\n    this._openHeader(drawerToOpen);\n\n    this.$drawerItems[drawerToOpen]\n      .revealer('show')\n      .ariaHidden(false)\n      .one('revealer-show', () => {\n        config.afterOpen();\n\n        this.$mainHeader.trigger('header-drawers:toggled', {\n          drawer: drawerToOpen,\n          headerBorder: true,\n        });\n\n        if (config.canTrapFocus && shouldFocus) {\n          trapFocus({\n            $container: this.$drawerItems[drawerToOpen],\n            namespace: `header-drawers-${drawerToOpen}`,\n            focusParent: config.focusParent,\n          });\n        }\n\n        this._bindDrawerClose(drawerToOpen);\n      });\n  }\n\n  /**\n   * Close a specific drawer.\n   *\n   * @param options\n   * @property {string} options.drawerToClose - Drawer to close\n   * @property {boolean} options.focusOnToggle - Should the closing drawer's toggle be focused\n   * @private\n   */\n  _closeDrawer(options, shouldFocus = true) {\n    const drawerToClose = options.drawerToClose;\n    const focusOnToggle = options.focusOnToggle || false;\n    const config = this.drawerConfigs[drawerToClose];\n\n    this._closeHeader(drawerToClose);\n\n    this.$drawerItems[drawerToClose]\n      .revealer('hide')\n      .one('revealer-hide', () => {\n        this.$drawerItems[drawerToClose]\n          .css('max-height', '')\n          .ariaHidden(true);\n        config.afterClose();\n        this.$mainHeader.trigger('header-drawers:toggled', {\n          drawer: drawerToClose,\n          headerBorder: false,\n        });\n\n        if (config.canTrapFocus && shouldFocus) {\n          removeTrapFocus({\n            $container: this.$drawerItems[drawerToClose],\n            namespace: `header-drawers-${drawerToClose}`,\n          });\n\n          if (focusOnToggle) {\n            this.$toggles[drawerToClose].focus();\n          }\n        }\n      });\n\n    if (config.scrollLock) {\n      this.scrollLock.unlock();\n    }\n\n    this._unbindDrawerClose(drawerToClose);\n\n    if (this._isMobile()) {\n      this.$document.trigger('action-bar:toggle', { hide: false });\n    }\n  }\n\n  /**\n   * Close all drawers. Optionally specify a drawer to return focus to.\n   *\n   * @param {string} keepOpen - Drawer to keep open\n   * @private\n   */\n  _closeAllDrawers(keepOpen = '') {\n    const $openDrawers = this.$drawers.filter('.visible, .animating');\n\n    $openDrawers.each((i, el) => {\n      const drawerToClose = el.getAttribute(selectors.header.drawerItemAttr);\n\n      if (keepOpen !== drawerToClose) {\n        this._closeDrawer({\n          drawerToClose,\n        });\n      }\n    });\n  }\n\n  /**\n   * Set up listeners to close drawers based on user interaction\n   *\n   * @param drawerType\n   * @private\n   */\n  _bindDrawerClose(drawerType) {\n    // Notification drawer has its own close method\n    if (drawerType === 'notification') {\n      return;\n    }\n\n    this.$document.on(`touchstart.header-drawers-${drawerType}, click.header-drawers-${drawerType}`, (event) => {\n      this._documentFocus(event.target, drawerType);\n    });\n\n    // Close drawer on esc key\n    this.$document.on(`keyup.header-drawers-${drawerType}`, (event) => {\n      if (event.keyCode === 27) {\n        this._closeDrawer({\n          drawerToClose: drawerType,\n          focusOnToggle: true,\n        });\n      }\n    });\n  }\n\n  /**\n   * Remove listeners when drawer closes\n   *\n   * @param drawerType\n   * @private\n   */\n  _unbindDrawerClose(drawerType) {\n    this.$document\n      .off(`touchstart.header-drawers-${drawerType}, click.header-drawers-${drawerType}`)\n      .off(`keyup.header-drawers-${drawerType}`);\n  }\n\n  /**\n   * Detect if document interaction occurs outside of a drawer\n   *\n   * @param target\n   * @param drawerType\n   * @private\n   */\n  _documentFocus(target, drawerType) {\n    const isToggleButton = $(target).parents(this._getDrawerSelector(selectors.header.drawerItemAttr, drawerType)).length;\n    const clickInHeader = $(target).parents(selectors.header.main).length;\n\n    // If click/tap is in header, and is mobile, ignore. Otherwise multiple closes occur\n    if (isToggleButton || (clickInHeader && this._isMobile())) {\n      return;\n    }\n\n    this._closeDrawer({\n      drawerToClose: drawerType,\n    });\n  }\n\n  _openHeader(drawer) {\n    const deferred = $.Deferred();\n    const windowHeight = window.innerHeight;\n    const config = this.drawerConfigs[drawer];\n    const $drawer = this.$drawerItems[drawer];\n    const drawerHeight = $drawer.outerHeight();\n    const headerRect = this.mainHeader.getBoundingClientRect();\n    const fromBottom = drawerHeight;\n    const fromTop = Math.max(0, headerRect.top - drawerHeight);\n\n    // Offset using 'top' only if height of drawer + header is larger than window\n    const offsetByTop = fromBottom >= windowHeight ;\n    let offset = fromBottom;\n    let offsetProp = 'bottom';\n\n    if (offsetByTop) {\n      offset = fromTop;\n      offsetProp = 'top';\n    }\n\n    if (config.belowMobileHeader && this._isMobile()) {\n      if (offsetByTop) {\n        this.$mainHeader.css({\n          top: headerRect.top,\n          bottom: 'auto',\n        });\n      }\n\n      // Save original top for easing back to 'closed' position\n      this.$mainHeader\n        .data('offset-type', offsetByTop ? 'top' : 'bottom')\n        .data('original-top', headerRect.top)\n        .revealer('show')\n        .one('revealer-animating', () => {\n          this.$mainHeader.css(offsetProp, offset);\n          deferred.resolve();\n        });\n    } else {\n      deferred.resolve();\n    }\n\n    deferred.done(() => {\n      this._toggleButton(drawer, true);\n      this.$mainHeader\n        .addClass(classes.drawerVisibility.general)\n        .addClass(classes.drawerVisibility[drawer]);\n    });\n  }\n\n  _closeHeader(drawer) {\n    const deferred = $.Deferred();\n    const headerHeight = getHeaderHeight(this.mainHeader);\n    const config = this.drawerConfigs[drawer];\n\n    if (config.belowMobileHeader && this._isMobile()) {\n      // Default to bottom for when transitioning from desktop to mobile\n      const offsetType = this.$mainHeader.data('offset-type') || 'bottom';\n      let offset = 0;\n\n      if (offsetType === 'top') {\n        offset = parseInt(this.$mainHeader.data('original-top'), 10);\n\n        if (isNaN(offset)) {\n          offset = `calc(100vh - ${headerHeight}px`;\n        }\n      }\n\n      this.$mainHeader\n        .revealer('hide')\n        .one('revealer-animating', () => {\n          this.$mainHeader.css(offsetType, offset);\n          deferred.resolve();\n        })\n        .one('revealer-hide', () => {\n          this.$mainHeader.css({\n            top: '',\n            bottom: '',\n          });\n        });\n    } else {\n      // Reset offsets when transitioning from mobile to desktop\n      this.$mainHeader.css({\n        top: this.settings.sticky_header ? getAnnouncementBarHeight() : '',\n        bottom: '',\n      });\n      deferred.resolve();\n    }\n\n    deferred.done(() => {\n      this.$mainHeader.data('original-top', '');\n      this._toggleButton(drawer, false);\n      this.$mainHeader\n        .removeClass(classes.drawerVisibility.general)\n        .removeClass(classes.drawerVisibility[drawer]);\n    });\n  }\n\n  _menuAfterOpen() {\n    if (!this._isMobile()) {\n      return;\n    }\n\n    const $drawer = this.$drawerItems.menu;\n    $drawer.css('height', $drawer.outerHeight());\n  }\n\n  _menuAfterClose() {\n    this.$drawerItems.menu.css('height', '');\n  }\n\n  _searchAfterOpen() {\n    this.$drawerItems.search\n      .find(selectors.drawers.search.field)\n      .focus();\n  }\n\n  _storyAfterOpen() {\n    this.headerNotification.dismissNotification();\n    this.$drawerItems.story.trigger('theme:rimg:watch');\n  }\n}\n","import $ from 'jquery';\nimport debounce from 'just-debounce';\n\nimport layout from '../../Layout';\nimport {classes, selectors} from '../../Constants';\n\nexport default class MenuDrawer {\n  constructor(options) {\n    this.$mainHeader = options.$mainHeader;\n    this.settings = options.settings;\n\n    this.$window = $(window);\n    this.windowWidth = window.innerWidth;\n    this.$navigation = this.$mainHeader.find(selectors.header.navigation);\n    this.$currencyConverter = this.$mainHeader.find(selectors.header.converterParent);\n    this.$actions = this.$mainHeader.find(selectors.header.actions);\n\n    this.isExpandedNav = this.settings.navigation_layout === 'expanded';\n    this.events = [];\n\n    // If navigation is 'expanded', collapse into drawer when needed\n    if (this.isExpandedNav) {\n      this.events.push(this.$window.on('resize.navigation-drawer', debounce(() => this._navigationResize(), 15)));\n    }\n\n    this._autoDrawer();\n    this._setupDrawer();\n  }\n\n  unload() {\n    if (this.events.length) {\n      this.events.forEach($el => $el.off('.navigation-drawer'));\n    }\n  }\n\n  _setupDrawer() {\n    // Clone Header components into menu drawer\n    this.$mainHeader\n      .find(selectors.drawers.menu.navigation)\n      .html(this.$navigation.children().clone(true, true));\n\n    if (this.$currencyConverter.length) {\n      this.$mainHeader\n        .find(selectors.drawers.menu.converterParent)\n        .html(this.$currencyConverter.children().clone(true, true));\n    }\n  }\n\n  _navigationResize() {\n    const windowWidth = window.innerWidth;\n    if (this.windowWidth === window.innerWidth) {\n      return;\n    }\n\n    this.windowWidth = windowWidth;\n    this._autoDrawer();\n  }\n\n  _autoDrawer() {\n    // Navigation and actions are the same width, but Actions never has its width change\n    const navigationWidth = this.$actions.width();\n    const innerWidths = [];\n\n    this.$navigation.find('.navmenu-depth-1 > .navmenu-item').each((index, el) => {\n      innerWidths.push(Math.ceil($(el).outerWidth(true)));\n    });\n\n    const combinedWidths = innerWidths.reduce((a, b) => a + b, 0);\n    const navItemsFit = combinedWidths < navigationWidth;\n    const isExpandable = this.isExpandedNav && (layout.isBreakpoint('L') || layout.isBreakpoint('XL'));\n\n    this._collapseNavigation(navItemsFit && isExpandable);\n  }\n\n  _collapseNavigation(expandNavigation = false) {\n    if (expandNavigation) {\n      this.$mainHeader\n        .removeClass(classes.navigation.collapsed)\n        .addClass(classes.navigation.expanded);\n    } else {\n      this.$mainHeader\n        .removeClass(classes.navigation.expanded)\n        .addClass(classes.navigation.collapsed)\n        .trigger('header-drawers:close', { drawer: 'account' });\n    }\n  }\n}\n","import $ from 'jquery';\n\nimport { classes, selectors } from '../../Constants';\n\nexport default class Navigation {\n  constructor($el) {\n    this.$el = $el;\n\n    this.events = [\n      this.$el.on('click.navigation', selectors.navmenu.trigger, (event) => {\n        event.preventDefault();\n        this._toggleMenu(event.currentTarget.parentNode);\n      }),\n      this.$el.on('focusin.navigation', (event) => {\n        this._navigationFocus(event.target);\n      }),\n    ];\n  }\n\n  /**\n   * Clean up class when this.$el is being removed\n   */\n  unload() {\n    this.events.forEach($el => $el.off('.navigation'));\n  }\n\n  /**\n   * Close all open menus excluding target menu\n   * @param menu\n   */\n  _closeAll(menu = false) {\n    const openMenus = `${selectors.navmenu.submenu}.visible, ${selectors.navmenu.submenu}.animating-in`;\n\n    this.$el.find(openMenus).parent().each((i, el) => {\n      if (menu && $.contains(el, menu)) {\n        return;\n      }\n\n      // Close any submenus in this tree\n      $(el)\n        .find(selectors.navmenu.trigger)\n        .each((i, trigger) => this._closeItem(trigger));\n\n      // Close root-level menu item\n      this._closeItem(el);\n    });\n  }\n\n  /**\n   * Toggle visibility of a menu\n   *\n   * @param {HTMLElement} parentNode\n   * @private\n   */\n  _toggleMenu(parentNode) {\n    const $parent = $(parentNode);\n    const $menu = $parent.children(selectors.navmenu.submenu);\n\n    if ($menu.revealer('isVisible')) {\n      this._closeItem(parentNode);\n    } else {\n      this._openItem(parentNode);\n    }\n  }\n\n  /**\n   * Retrieve information of immediate menu tree\n   *\n   * @param {HTMLElement} parentNode\n   * @returns {{parent: Element, link: Element, menu: Element}}\n   * @private\n   */\n  _menuTreeInfo(parentNode) {\n    return {\n      parent: parentNode,\n      link: parentNode.querySelector(selectors.navmenu.trigger),\n      menu: parentNode.querySelector(selectors.navmenu.submenu),\n    };\n  }\n\n  /**\n   * Toggle appropriate classes and flags for a menu parent\n   *\n   * @param {HTMLElement} parentNode\n   * @param {Boolean} active\n   * @private\n   */\n  _toggleParent(parentNode, active = true) {\n    const { parent, link } = this._menuTreeInfo(parentNode);\n    const $parent = $(parent);\n    const $link = $(link);\n\n    $parent.toggleClass(classes.navmenu.parentActive, active);\n    $link.ariaExpanded(active);\n  }\n\n  /**\n   * Open a menu item\n   *\n   * @param {HTMLElement} parentNode\n   * @private\n   */\n  _openItem(parentNode) {\n    this._toggleParent(parentNode, true);\n\n    this._closeAll(parentNode);\n    const $menu = $(parentNode.querySelector(selectors.navmenu.submenu));\n    $menu.revealer('show');\n  }\n\n  /**\n   * Close a menu item\n   *\n   * @param {HTMLElement} parentNode\n   * @private\n   */\n  _closeItem(parentNode) {\n    this._toggleParent(parentNode, false);\n\n    const $menu = $(parentNode).children(selectors.navmenu.submenu);\n    $menu.revealer('hide');\n  }\n\n  /**\n   * Close all open menus when focusing out of the navigation, or when focusing\n   * a top level item\n   *\n   * @param {HTMLElement} target\n   * @private\n   */\n  _navigationFocus(target) {\n    const inNavigation = $(target).parents(selectors.header.navigation).length;\n    const isDepthOne = $(target).closest(selectors.navmenu.depthOne).length;\n    const inDrawer = $(target)\n      .parents(`[${selectors.header.drawerItemAttr}=\"menu\"]`)\n      .length;\n\n    if (inDrawer) {\n      return;\n    }\n\n    if (!inNavigation || isDepthOne) {\n      this._closeAll();\n    }\n  }\n}\n","import $ from 'jquery';\nimport { classes, selectors } from '../../Constants';\nimport layout from '../../Layout';\nimport getHeaderHeight from './getHeaderHeight';\nimport getAnnouncementBarHeight from './getAnnouncementBarHeight';\n\nexport default class StickyHeader {\n  constructor(options) {\n    this.settings = options.settings;\n    this.$mainHeader = options.$mainHeader;\n    this.mainHeader = this.$mainHeader[0];\n    this.mobileHeader = document.querySelector(selectors.header.mobile);\n    this.$siteMain = $('.site-main');\n\n    this.$body = $(document.body);\n    this.$window = $(window);\n    this.requestAnimationFrameId = null;\n\n    // Exit if Header is not sticky\n    if (!this.settings.sticky_header) {\n      return;\n    }\n\n    this._onBreakpointChange = this._onBreakpointChange.bind(this);\n    layout.onBreakpointChange(this._onBreakpointChange);\n\n    this._headerChecker = this._headerChecker.bind(this);\n    this._checkScrolled = this._checkScrolled.bind(this);\n    this._mainHeaderOffset = this._mainHeaderOffset.bind(this);\n\n    this._init();\n    this._bindEvents();\n  }\n\n  unload() {\n    if (!this.settings.sticky_header) {\n      return;\n    }\n\n    this.$window.off('.sticky-header');\n    layout.offBreakpointChange(this._onBreakpointChange);\n    window.cancelAnimationFrame(this.requestAnimationFrameId);\n  }\n\n  onSectionSelect() {\n    // Reset sticky header styles if no sticky header\n    if (!this.settings.sticky_header) {\n      this._setSticky(false);\n    }\n  }\n\n  _supportsSticky() {\n    return layout.isBreakpoint('L') || layout.isBreakpoint('XL') || layout.isBreakpoint('M');\n  }\n\n  _init() {\n    this._setSticky(this._supportsSticky());\n    this._headerChecker();\n  }\n\n  _bindEvents() {\n    this.$window.on('scroll.sticky-header', this._checkScrolled);\n    this.$window.on('resize.sticky-header', this._mainHeaderOffset);\n    this.$window.on('announcement-bar.sticky-header', this._mainHeaderOffset);\n  }\n\n  _onBreakpointChange() {\n    this._setSticky(this._supportsSticky());\n  }\n\n  /**\n   * Determine the amount to offset the body by\n   *\n   * @param state\n   * @returns {*}\n   * @private\n   */\n  _getStickyOffset(state) {\n    if (!state) {\n      return '';\n    }\n\n    const headerHeight = getHeaderHeight(this.mainHeader);\n    const announcementBar = getAnnouncementBarHeight();\n\n    return headerHeight + announcementBar;\n  }\n\n  _setScrolled(state) {\n    this.$body.toggleClass(classes.header.scrolled, state);\n  }\n\n  _setSticky(state) {\n    this.$body.toggleClass(classes.header.sticky, state);\n    this._mainHeaderOffset();\n    this._setStickyOffset(state);\n  }\n\n  _setStickyOffset(state) {\n    const stickyOffset = this._getStickyOffset(state);\n    this.$siteMain.css('paddingTop', stickyOffset);\n\n    this.$window.trigger('sticky-header', {\n      state,\n      stickyOffset,\n    });\n  }\n\n  _headerChecker() {\n    // Periodically check to make sure header is offset correctly\n    this.requestAnimationFrameId = window.requestAnimationFrame(this._headerChecker);\n\n    if (this.$body.hasClass(classes.header.scrolled)) {\n      return;\n    }\n\n    if (this._supportsSticky()) {\n      this._setStickyOffset(true);\n    }\n  }\n\n  _checkScrolled() {\n    // Add border when is scrolling passed header\n    const desktopThreshold = getHeaderHeight(this.mainHeader);\n    const mobileThreshold = getHeaderHeight(this.mobileHeader);\n    const threshold = this._supportsSticky() ? desktopThreshold : mobileThreshold;\n\n    const isScrolled = window.pageYOffset >= threshold;\n\n    this._setScrolled(isScrolled);\n    this.$mainHeader.trigger('set-border', {\n      state: (this._supportsSticky() && isScrolled),\n    });\n  }\n\n  /**\n   * Offset main by announcement bar when is sticky, and sticky is supported\n   *\n   * @private\n   */\n  _mainHeaderOffset() {\n    const top = this._supportsSticky() ? getAnnouncementBarHeight() : '';\n    this.$mainHeader.css({ top });\n  }\n}\n","import $ from 'jquery';\nimport $script from 'scriptjs';\nimport CurrencyConverter from 'shopify-currency-converter';\nimport { classes, selectors } from '../Constants';\nimport HeaderDrawers from '../components/header/HeaderDrawers';\nimport MenuDrawer from '../components/header/MenuDrawer';\nimport Navigation from '../components/header/Navigation';\nimport StickyHeader from '../components/header/StickyHeader';\n\nexport default class StaticHeader {\n  constructor(section) {\n    this.currency = section.data.currency;\n    this.settings = section.data.settings;\n    this.$el = $(section.el);\n    this.$body = $(document.body);\n\n    this.mainHeader = section.el.querySelector(selectors.header.main);\n    this.$mainHeader = $(this.mainHeader);\n\n    this.$scripts = $('[data-scripts]');\n\n    if (this.currency.enable) {\n      $script(this.$scripts.data('shopify-currencies'), () => {\n        this._converter();\n      });\n    }\n\n    this.stickyHeader = new StickyHeader({\n      $mainHeader: this.$mainHeader,\n      settings: this.settings,\n    });\n\n    this.navigation = new Navigation(this.$mainHeader);\n\n    this.menuDrawer = new MenuDrawer({\n      $mainHeader: this.$mainHeader,\n      settings: this.settings,\n    });\n\n    this.headerDrawers = new HeaderDrawers({\n      $mainHeader: this.$mainHeader,\n      settings: this.settings,\n      currency: this.currency,\n    });\n\n    this._bindEvents();\n  }\n\n  onSectionUnload() {\n    this.headerDrawers.unload();\n    this.menuDrawer.unload();\n    this.navigation.unload();\n    this.stickyHeader.unload();\n    this._setBorder(false);\n\n    this.$mainHeader.off('header-drawers:toggled');\n    this.$mainHeader.off('set-border');\n\n    if (this.currency.enable) {\n      this.$mainHeader.off('change.converter');\n    }\n  }\n\n  onSectionSelect() {\n    this.stickyHeader.onSectionSelect();\n  }\n\n  onSectionBlockSelect(block) {\n    const drawerType = block.el.getAttribute(selectors.header.drawerItemAttr);\n    if (drawerType && drawerType === 'notification') {\n      this.headerDrawers.notificationSelect();\n    }\n  }\n\n  onSectionBlockDeselect(block) {\n    const drawerType = block.el.getAttribute(selectors.header.drawerItemAttr);\n    if (drawerType && drawerType === 'notification') {\n      this.headerDrawers.notificationDeselect();\n    }\n  }\n\n  _bindEvents() {\n    this.$mainHeader.on('header-drawers:toggled', (event, data) => this._triggerBorder(data));\n    this.$mainHeader.on('set-border', (event, data) => this._setBorder(data.state));\n  }\n\n  _converter() {\n    CurrencyConverter.init({\n      switcherSelector: selectors.header.currencyConverter,\n      priceSelector: '.money',\n      shopCurrency: this.currency.shop_currency,\n      defaultCurrency: this.currency.default_currency,\n      displayFormat: this.currency.display_format,\n      moneyFormat: this.currency.money_format,\n      moneyFormatNoCurrency: this.currency.money_format_no_currency,\n      moneyFormatCurrency: this.currency.money_format_currency,\n    });\n\n    this.$mainHeader.on('change.converter', selectors.header.currencyConverter, event => {\n      const currencyValue = event.currentTarget.value;\n\n      this.$mainHeader.find(selectors.header.currencyConverter).each((index, converter) => {\n        if (converter.value !== currencyValue) {\n          converter.value = currencyValue;\n        }\n      });\n\n      CurrencyConverter.setCurrency(currencyValue);\n    });\n  }\n\n  _setBorder(state) {\n    this.$body.toggleClass(classes.header.bordered, state);\n  }\n\n  _triggerBorder(data) {\n    const drawer = data.drawer || false;\n    const headerBorder = data.headerBorder;\n\n    if (!drawer) {\n      return console.warn('Drawer toggled trigger is missing drawer name');\n    }\n\n    // Only update border if drawer toggle is Story\n    if (drawer !== 'story') {\n      return;\n    }\n\n    // If headerBorder, set border, otherwise determine if border is needed\n    if (headerBorder) {\n      this._setBorder(true);\n      this.$body.toggleClass(classes.header.bordered, true);\n    } else {\n      // Kep bordered class only if is scrolled, which is only if the header is sticky\n      this._setBorder(this.$body.hasClass(classes.header.scrolled));\n    }\n  }\n}\n","import ProductLayout from '../components/ProductLayout';\n\nexport default class StaticProductPages {\n  constructor(section) {\n    const { el } = section;\n    const { product } = section.data;\n    const variantAvailable = section.data.variant_available;\n    const moneyFormat = section.data.money_format;\n    const textStrings = section.data.text_strings;\n    const cartRedirect = section.data.cart_redirect;\n    const enableHistory = true;\n\n    this.productLayout = new ProductLayout({\n      el,\n      moneyFormat,\n      product,\n      variantAvailable,\n      cartRedirect,\n      textStrings,\n      enableHistory,\n    });\n  }\n\n  onSectionUnload() {\n    this.productLayout.unload();\n  }\n}\n","// jQuery plugins\nimport './globals/jquery';\nimport './globals/jquery-plugins';\nimport 'jquery-trend'; // eslint-disable-line\nimport 'jquery-revealer'; // eslint-disable-line\n\n// Responsive Images\nimport 'intersection-observer'; // eslint-disable-line\nimport rimg from 'rimg-shopify'; // eslint-disable-line\n\n// Helpers\nimport ObjectFitPolyfill from './helpers/ObjectFitPolyfill';\nimport Newsletter from './helpers/Newsletter';\nimport './helpers/formElements';\n\n// Template imports\nimport Page from './templates/Page';\nimport SearchPage from './templates/SearchPage';\nimport initAddresses from './templates/account';\n\n// Section imports\nimport Sections from './Sections';\nimport DynamicBlogPosts from './sections/DynamicBlogPosts';\nimport DynamicInstagramFeed from './sections/DynamicInstagramFeed';\nimport DynamicListCollections from './sections/DynamicListCollections';\nimport DynamicProduct from './sections/DynamicProduct';\nimport DynamicSlideshow from './sections/DynamicSlideshow';\nimport DynamicTwitterFeed from './sections/DynamicTwitterFeed';\nimport FeaturedProducts from './sections/FeaturedProducts';\nimport ImageWithTextOverlay from './sections/ImageWithTextOverlay';\nimport PxsMap from 'pxs-map'; // eslint-disable-line\nimport StaticAnnouncementBar from './sections/StaticAnnouncementBar';\nimport StaticCart from './sections/StaticCart';\nimport StaticCollectionPages from './sections/StaticCollectionPages';\nimport StaticFaq from './sections/StaticFaq';\nimport StaticGiftCard from './sections/StaticGiftCard';\nimport StaticHeader from './sections/StaticHeader';\nimport StaticProductPages from './sections/StaticProductPages';\nimport StaticStory from './sections/StaticStory';\nimport Testimonials from './sections/Testimonials';\nimport VideoWithText from './sections/VideoWithText';\n\nimport { BannerManager } from './components/BannerManager';\n\nconst data = JSON.parse(document.body.querySelector('[data-theme-data]').innerHTML);\n\nnew BannerManager({\n  target: document.body.querySelector('[data-banners]'),\n  dismissIcon: data.dismiss_icon,\n});\n\nrimg.init();\n\nconst sections = new Sections();\nsections.register('dynamic-blog-posts', section => new DynamicBlogPosts(section));\nsections.register('dynamic-featured-collection', section => new FeaturedProducts(section));\nsections.register('dynamic-image-with-text-overlay', section => new ImageWithTextOverlay(section));\nsections.register('dynamic-instagram-feed', section => new DynamicInstagramFeed(section));\nsections.register('dynamic-list-collections', section => new DynamicListCollections(section));\nsections.register('dynamic-product', section => new DynamicProduct(section));\nsections.register('dynamic-slideshow', section => new DynamicSlideshow(section));\nsections.register('dynamic-testimonials', section => new Testimonials(section));\nsections.register('dynamic-twitter-feed', section => new DynamicTwitterFeed(section));\nsections.register('dynamic-video-with-text', section => new VideoWithText(section));\nsections.register('pxs-announcement-bar', section => new StaticAnnouncementBar(section));\nsections.register('pxs-map', section => new PxsMap(section));\nsections.register('static-cart', section => new StaticCart(section));\nsections.register('static-collection-pages', section => new StaticCollectionPages(section));\nsections.register('static-faq', section => new StaticFaq(section));\nsections.register('static-gift-card', section => new StaticGiftCard(section));\nsections.register('static-header', section => new StaticHeader(section));\nsections.register('static-product-pages', section => new StaticProductPages(section));\nsections.register('static-related-products', section => new FeaturedProducts(section));\nsections.register('static-story', section => new StaticStory(section));\nsections.register('static-testimonials', section => new Testimonials(section));\n\nnew SearchPage();\nnew Page();\nnew ObjectFitPolyfill();\nnew Newsletter();\n\ninitAddresses()\n  .catch(error => console.error(error));\n"],"names":["this","define","window","jQuery","$","fn","ariaExpanded","toggleOn","attr","ariaHidden","rimg","selectors","classes","events","ObjectFitPolyfill","_onSectionEvent","bind","document","on","event","data","_checkElement","_init","body","documentElement","style","target","el","console","warn","_isObjectFitAvailable","$items","each","i","item","$item","$image","hasClass","objectFit","noObjectFit","length","src","css","addClass","Newsletter","$body","$formPosted","find","newsletter","formPosted","scrollTop","eq","parents","offset","top","animate","observer","MutationObserver","mutations","forEach","mutation","classList","contains","form","formElements","parent","parentElement","disabled","add","remove","observe","init","update","asyncGenerator","classCallCheck","createClass","init$1","update$1","RichText","layout","groupedContent","GroupedContent","intelliparse","_initExternalLinks","unload","anchors","filter","href","indexOf","location","hostname","Page","rteEl","querySelector","rte","ScrollLock","html","blockScroll","_blockScroll","scrollLock","locked","pageYOffset","addEventListener","removeEventListener","preventDefault","Modal","callbacks","$window","modal","$modal","wrapper","defaultCallbacks","extend","_onOpen","_onBeforeOpen","_onBeforeShow","_onClose","_onBeforeClose","modalOptions","isOpen","destroy","selector","handle","_addModalClass","VanillaModal","open","close","modalClass","match","removeClass","_removeModalClass","revealer","one","unlock","onClose","lock","onOpen","onBeforeClose","onBeforeShow","onBeforeOpen","eventHandlers","getBreakpoint","getComputedStyle","getPropertyValue","replace","previousBreakpoint","currentBreakpoint","eventHandler","isBreakpoint","breakpoint","onBreakpointChange","push","offBreakpointChange","index","splice","crossesThreshold","previous","current","mobileSizes","desktopSizes","desktopToMobile","mobileToDesktop","PriceManager","moneyFormat","prices","querySelectorAll","updateCurrency","price","innerHTML","Shopify","formatMoney","matchesSelector","require$$0","getSize","utils","require$$1","require$$2","require$$3","require$$4","require$$5","cell","slide","flickity","require$$6","CardsPlayer","speedThreshold","minSpeed","snapThreshold","hintShown","cards","cardsPlayer","card","deck","hand","mc","panningCard","translatingCards","requestAnimationFrameId","_onResize","_onScroll","_onHintRotateOut","_onHintRotateIn","_onPanStart","_onPan","_onPanEnd","_onTap","_translateElementsOffScreen","_createElements","_setCardsContainerHeight","pan","Hammer","Pan","direction","DIRECTION_HORIZONTAL","threshold","Manager","cardsContainer","Tap","maxIterations","appendChild","elVisual","cardVisual","repositioning","transform","hintingStart","hintingEnd","visualFirst","topCard","iterations","off","cancelAnimationFrame","drawToCardIndex","_destroyElements","createElement","cardsContentContainer","cardContent","contentClone","cloneNode","player","content","maxHeight","height","getBoundingClientRect","paddingBottom","elemRect","elemMiddle","isVisible","innerHeight","clientHeight","currentTarget","topCardVisual","center","deltaX","isFinal","emit","x","y","requestAnimationFrame","translate","containerRect","containerWidth","width","containerCenter","left","panningCardRect","panningCardWidth","panningCardCenter","thresholdValue","Math","max","opacity","velocity","isCenter","metSpeedThreshold","abs","metSnapThreshold","translateVelocity","min","panningCardVisual","insertBefore","firstChild","element","url","getAttribute","timestamp","translatingElement","prevTimestamp","elapsedTimeMilli","distance","newOffset","right","debounce","ProductGallery","options","flickitySelect","_flickitySelect","flickityStaticClick","_flickityStaticClick","flickityPrev","flickityNext","next","staticGallery","onThumbnailClick","_onThumbnailClick","onThumbnailKeyPress","_onThumbnailKeyPress","$thumbnailsWrapper","product","galleryThumbnailsWrapper","imageContainer","galleryImages","thumbnailContainer","galleryThumbnails","$images","galleryImage","$thumbnails","galleryThumbnail","thumbnailPrev","galleryThumbnailsPrev","thumbnailNext","galleryThumbnailsNext","$selectedThumbnail","galleryThumbnailSelected","selectedThumbnailIndex","onResize","id","$thumbnail","galleryImageSelected","_destroyCardsPlayer","_destroyFlickity","_destroyStaticGallery","_initCardsPlayer","_shouldInitFlickity","_initFlickity","_shouldInitStaticGallery","_initStaticGallery","getTopCardIndex","get","select","trigger","thumbnailsWidth","outerWidth","Flickity","reloadCells","galleryThumbnailsFlickityEnabled","$selectedElement","selectedElement","imageId","pointer","cellElement","cellIndex","key","switchImage","Node","variant","optionsCount","neighbors","variants","option","available","ProductOptions","productHandle","nodeMap","_generateNodeMap","variant2","addNeighbor","found","j","closestVariant","matchingValues","tempMatchingValues","_getVariant","_getClosestVariant","getValidOptions","VariantHelper","$variants","$options","productOptions","optionsTypes","$radioOptions","is","radio","$selectOptions","_bindEvents","_unbindEvents","_switchVariant","firstLoad","$currentTarget","availableOptions","value","getVariant","_switchVariantSelect","_switchVariantRadio","val","$select","$optionEls","$option","isUnavailable","prop","title","option1","isDefault","Quantity","callback","decrementButton","quantity","decrement","$formElement","$input","input","parseInt","Infinity","incrementButton","increment","decrementInput","_adjustInput","incrementInput","onInputChange","_onInputChange","disable","triggerEvent","_setValue","baseValue","isNaN","adjustment","_formatValue","formatted","constrainedValue","_restrictValue","QuantitySubmit","text","disableText","submit","submitEl","_setText","setAttribute","removeAttribute","instance","dismissIcon","maxConcurrentBanners","Type","Priority","Banner","message","type","autoDismiss","undefined","creationTime","Date","now","_dismissed","_dismissing","dismissPromise","onDismiss","_onDismiss","onTransitionEnd","_onTransitionEnd","bannerMessage","bannerDismiss","hasTransition","deferred","Deferred","resolve","_dismiss","then","promise","removeChild","force","BannerManager","queue","banners","adjustBannerLocation","_adjustBannerLocation","interval","setInterval","_update","priority","sort","a","b","banner","dismissed","shift","state","stickyOffset","CartRequests","handlerHelpers","postRequests","_postRequests","handleResponse","_handleResponse","handleError","_handleError","additionalHandlers","lastRequestTimestamp","floor","postAfterLastRequestMillis","noteRequest","itemRequests","inProgressItemRequests","triggerCartReload","recentItem","lockSubmission","bannerManager","itemRequest","_findExistingItemRequest","itemsRemoving","_countItemsRemoving","_triggerStartLoadingEvents","note","responseHandlers","reduce","removing","request","cart","loadingStart","cartResponse","itemResponses","error","itemResponse","response","loadingFinish","original_total_price","items","variant_id","total","original_line_price","_parseItemResponses","_triggerFinishLoadingEvent","onResponse","done","onError","responseJSON","description","high","_shouldPostRequests","post","updates","fail","iRequest","CartItem","$el","quantityEl","$removeEls","$priceEls","totalEls","priceManager","cartRequests","slideUpComplete","removeCartItem","_destroy","onClickRemove","_onClickRemove","onQuantityChange","_onQuantityChange","onCartItemLoadingStart","_onCartItemLoadingStart","onCartItemLoadingFinish","_onCartItemLoadingFinish","onSlideUpComplete","_onSlideUpComplete","updateAll","submitItemRequest","loading","totalLoading","setQuantity","sliding","slideUp","totalEl","updatePrice","removingFinished","Cart","shipping","isInline","inline","hasShipping","onExpandClick","_onExpandClick","onOtherItemsClick","_onOtherItemsClick","onNoteChange","_onNoteChange","onLoadingStart","_onLoadingStart","onLoadingFinish","_onLoadingFinish","onShippingSubmit","_onShippingSubmit","renderShippingResponse","_renderShippingResponse","$scripts","_onError","_initShippingCalc","cartItem","$expandButtons","expand","_createItems","hasItems","$otherItemsButton","otherItemsButton","totals","subtotal","expanded","toggleClass","empty","$shippingResponse","$shippingResponseMessage","$shippingResponseRates","rates","$shippingSubmit","ShippingCalculator","show","submitText","submittingText","customerIsLoggedIn","itemEls","$target","$expandable","siblings","expandable","slideToggle","$itemEl","inlineVisible","trim","submitNoteRequest","affectsTotal","reload","loadingAffectsTotal","reloading","reloadStart","ajax","origin","$response","$form","replaceAll","$recentItemEl","atcSuccess","inlineRecentlyAdded","reloadFinish","_disableShippingButton","shippingAddress","country","province","zip","getCartShippingRatesForDestination","xhr","errors","parseJSON","responseText","_hideShippingResponse","postalcode","_showShippingResponse","_enableShippingButton","addressBase","address","join","firstRate","formatRate","multiple_rates","one_rate","no_rates","rate","rateValue","rate_value","name","append","submit_text","submitting_text","responseVisible","Popover","reference","attachment","defaults","$attachment","onClick","_onClick","isEnabled","referencePoint","viewportHeight","fixed","reject","action","object","_fixToReference","_absoluteToReference","animateHeight","currentHeight","toHeight","_animateHeight","stopPropagation","position","attach","bottom","boundaryElement","_constrainToBoundary","boundaryRect","boundaryHeight","boundaryTop","currentBottom","transition","attachmentRect","attachmentTop","from","to","ScrollHinter","parentNode","checkScroll","_checkScroll","scrollLeft","scrollWidth","overflowsLeft","overflowsRight","_toggleClasses","className","condition","overflows","_toggleClass","ProductAtc","config","textStrings","cartEl","$cartEl","popover","triggers","atcSteps","atcToggle","contentForm","contents","atcStepForm","contentCart","atcStepCart","dcbSubmit","$dcbSubmit","$dcbSubmitText","dcbSubmitText","optionGroups","scrollHinters","triggerFormPopover","triggerCartPopover","formCartPopoverFixed","formCartPopoverAbsolute","container","activePopover","enable","formAtc","atc","isStatic","static","isDefaultVariant","defaultVariant","submitting","variantHelper","onTriggerClick","_onTriggerClick","onBodyClick","_onBodyClick","onSubmit","_onSubmit","onCartReloadFinish","_onCartReloadFinish","onCartItemRemoveFinish","_onCartItemRemoveFinish","onVariantSwitch","_onVariantSwitch","updatePopper","_updatePopper","restoreHandlers","hinter","_onBreakpointChange","$productVariants","$productOptions","productOption","quantity_text","quantity_disable","_atcState","variantAvailable","_enablePopoverByBreakpoint","_addScrollHinters","breakpoints","_changePopover","toggle","_checkScrollHinters","cartRedirect","onATCSubmit","serializeArray","onATCSuccess","setDisable","add_to_cart","ProductLayout","$productEl","addBack","gallery","richText","productGallery","productAtc","featured_image","_updatePrice","enableHistory","param","replaceState","$compareAtPrice","compareAt","$price","$compareAtPriceMoney","$priceMoney","hasComparePrice","compare_at_price","QuickShop","productUrl","productID","$document","$trigger","selectorTag","quickshop","selectorAttr","productLoaded","productEl","$formAtc","$errorMessage","errorAttr","_handleBeforeShow","_handleOpen","_handleClose","_resetError","_onATCSubmit","_onATCSuccess","$wrapper","$contents","JSON","parse","_openQuickShop","jqXHR","textStatus","errorThrown","modalCallbacks","money_format","productLayout","variant_available","cart_redirect","text_strings","prepend","focus","PaymentButton","removeAttr","setHandlers","ProductItem","urlAttr","idAttr","quickShopTrigger","quickShop","openQuickShop","_onOpenQuickshop","SearchPage","searchPage","productItemEls","initAddresses","$themeScripts","CountryProvinceSelector","Sections","handlers","instances","_triggerInstanceEvent","handler","_initSections","dataEls","dataEl","idEl","sectionId","_createInstance","detail","blockId","eventName","args","keys","typeEl","_loadData","postMessage","_postMessage","MobileScrollers","section","slider","flickityDefaults","flickityOptions","initFlickity","destroyFlickity","DynamicBlogPosts","cellAlign","Gallery","DynamicInstagramFeed","settings","accessToken","access_token","instagram","$gallery","$galleryImages","$placeholders","placeholder","photos","processPhotos","_processPhotos","track","_getPhotos","untrack","photoPromise","meta","code","error_message","error_type","photo","$link","image","hidden","link","$photo","images","standard_resolution","appendTo","_renderPhotos","outerHeight","fadeOut","$imageContainer","$slide","hasImage","children","resize","DeckCase","DynamicListCollections","deckCase","onSectionUnload","DynamicProduct","DynamicSlideshow","$slideshow","slideshow","$slides","$paginationNext","paginationNext","$paginationPrev","paginationPrev","_setCellHeights","_onSlideSettle","selectSlide","autoplay","block","slideIndex","_getSlideIndex","stopPlayer","playPlayer","isWrap","isInstant","selectedIndex","$focusable","pagination","linkButton","_minCellHeight","reposition","cells","slideContent","slideImage","contentHeight","imageHeight","DynamicTwitterFeed","$content","twitter","$tweets","tweet","$template","template","onboarding","username","retweets","locale","fetch","tweets","_renderTweets","screenName","$avatar","postedAt","tweetsLength","tweetsArray","$tweet","clone","authorInfo","_extractAuthor","_extractMeta","FeaturedProducts","cardsEl","productItems","ImageWithTextOverlay","_checkHeights","justDebounce","StaticAnnouncementBar","announcementBar","PxsAnnouncementBar","StaticCart","quantityText","defineProperty","_extends","perfectCenter","popper","onPopoverOpen","_onPopoverOpen","onPopoverClose","_onPopoverClose","_togglePopover","computeStyle","_computeStyle","onCreate","_onCreate","defaultOptions","popperOptions","_initPopover","hidePopover","created","Popper","buttonActive","_showPopover","active","onShow","onHide","scrolls","baseHeight","paddingTop","marginTop","marginBottom","minLeft","$children","childrenHeight","ceil","offsets","_popoverInfo","popoverScrolls","_popoverScrolls","round","_perfectCenter","styles","buttonHidden","StaticCollectionPages","$mainHeader","header","main","filterGroups","filterPopover","sortByPopover","utilityBars","collectionUtils","narrow","wide","$filterItem","collectionPopover","filterItem","$filterItemAdvanced","filterItemAdvanced","$sortTriggerButton","sortByItem","onPopoverShow","_onPopoverShow","onPopoverHide","_onPopoverHide","onFiltersShow","_onFiltersShow","_moveUtilityBar","_initPopovers","_setSortByQueryParameters","_toggleUtilityBar","hide","_toggleTag","_advancedTags","_changeSortingButton","$utils","isMobile","filterTrigger","collectionFilter","filterContent","sortByTrigger","collectionSortBy","sortByContent","popoverOptions","hideHeader","$narrow","detach","$wide","queryParams","search","aCouples","substr","split","aKeyValue","decodeURIComponent","listItemActive","_changeSorting","sort_by","$parent","tagGroup","tagHandle","$activeGroup","StaticFaq","faq","StaticGiftCard","qrCodeEl","selectText","_selectText","qrCodeText","qrCode","QRCode","range","createTextRange","moveToElementText","getSelection","selection","createRange","selectNodeContents","removeAllRanges","addRange","HeaderCart","$drawer","mainHeader","afterOpen","_afterOpen","afterClose","_afterClose","currency","_toggleCartHeight","_repositionCart","drawerHeight","headerRect","fromBottom","fromTop","offsetType","FeaturesList","features","VideoWithText","videoEl","videoBlock","playButton","video","$blockingLayer","blockingLayer","playVideo","_playVideo","onVideoLoad","_onVideoLoad","newSrc","ShareBlock","share","Testimonials","StaticStory","blocks","instanceTypes","_initBlocks","blockInfo","_getBlockInfo","HeaderStory","story","storyHandle","storyTemplate","$toggle","drawerToggles","getHeaderHeight","getAnnouncementBarHeight","HeaderNotification","$notificationDismiss","notificationKey","dismissNotification","_dismissNotification","_hideNotification","skipClose","forceOpen","showNotification","isDismissed","isNotificationDismissed","lastSeen","_lastSeenNotification","dismissalPeriod","getTime","diff","elapsedDays","localStorage","getItem","setItem","_setNotificationTime","trapFocus","namespace","focusParent","$container","has","removeTrapFocus","HeaderDrawers","$drawerToggle","drawerToggle","$drawers","drawerItemAttr","_isMobile","_menuAfterOpen","_menuAfterClose","_searchAfterOpen","_storyAfterOpen","_drawerBreakPoints","$toggles","_getDrawerObject","drawerToggleAttr","$drawerItems","headerStory","story_handle","headerCart","headerNotification","notification","show_notification","drawerConfigs","_configureDrawers","_positionDrawers","openNotification","_closeAllDrawers","_closeDrawer","drawerToClose","defaultDrawerConfig","menuConfig","accountConfig","notificationConfig","storyConfig","searchConfig","cartConfig","stopImmediatePropagation","shouldFocus","charCode","keyCode","drawerType","_toggleDrawer","drawer","drawerToOpen","_openDrawer","closingDrawer","$openDrawers","dataAttr","_getDrawerSelector","_positionDrawer","drawerItem","rightGutter","clientWidth","toggleRect","toggleMiddle","drawerWidth","drawerLeft","exceedsWindow","transformOrigin","offsetX","drawerToggleParent","drawerVisibility","toggleExists","toggleDisabled","headerHeight","_openHeader","canTrapFocus","_bindDrawerClose","focusOnToggle","_closeHeader","_unbindDrawerClose","keepOpen","_documentFocus","isToggleButton","clickInHeader","windowHeight","offsetByTop","offsetProp","belowMobileHeader","_toggleButton","general","sticky_header","menu","drawers","field","MenuDrawer","windowWidth","innerWidth","$navigation","navigation","$currencyConverter","converterParent","$actions","actions","isExpandedNav","navigation_layout","_navigationResize","_autoDrawer","_setupDrawer","navigationWidth","innerWidths","combinedWidths","navItemsFit","isExpandable","_collapseNavigation","expandNavigation","collapsed","Navigation","navmenu","_toggleMenu","_navigationFocus","openMenus","submenu","_closeItem","$menu","_openItem","_menuTreeInfo","parentActive","_toggleParent","_closeAll","inNavigation","isDepthOne","closest","depthOne","inDrawer","StickyHeader","mobileHeader","mobile","$siteMain","_headerChecker","_checkScrolled","_mainHeaderOffset","_setSticky","_supportsSticky","scrolled","sticky","_setStickyOffset","_getStickyOffset","desktopThreshold","mobileThreshold","isScrolled","_setScrolled","StaticHeader","_converter","stickyHeader","menuDrawer","headerDrawers","_setBorder","onSectionSelect","notificationSelect","notificationDeselect","_triggerBorder","currencyConverter","shop_currency","default_currency","display_format","money_format_no_currency","money_format_currency","currencyValue","converter","setCurrency","bordered","headerBorder","StaticProductPages","dismiss_icon","sections","register","PxsMap","catch"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}